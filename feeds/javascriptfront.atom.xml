<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>wklken's blog - javascript,front</title><link href="http://www.wklken.me/" rel="alternate"></link><link href="http://www.wklken.me/feeds/javascriptfront.atom.xml" rel="self"></link><id>http://www.wklken.me/</id><updated>2014-04-20T00:00:00+08:00</updated><entry><title>JavaScript一站式入门笔记</title><link href="http://www.wklken.me/posts/2014/04/20/javascript-base.html" rel="alternate"></link><published>2014-04-20T00:00:00+08:00</published><updated>2014-04-20T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-04-20:/posts/2014/04/20/javascript-base.html</id><summary type="html">&lt;p&gt;&lt;img alt="封面" src="/imgs/front/javascript.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;大二开始接触的javascript，到现在，五年过去了，中间断断续续用了一些，但是主要是搞后端的，没有正儿八经“学习”一下。&lt;/p&gt;
&lt;p&gt;对其了解不成系统，最近做了一个系统涉及前端框架，所以借此机会学习总结了下。&lt;/p&gt;
&lt;p&gt;入门笔记，非初学者可以绕道哈:)&lt;/p&gt;
&lt;p&gt;后续打算深入学习一下，顺带去玩玩node.js&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;参考教程&lt;/p&gt;
&lt;p&gt;入门: 【已完成】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://gitbookio.github.io/javascript/"&gt;gitbook javascript教程&lt;/a&gt; 【简单】&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.w3school.com.cn/js/index.asp"&gt;w3cschool教程&lt;/a&gt; 【简单，较全】&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.jquery.com/javascript-101/"&gt;Jquery:JavaScript101&lt;/a&gt; 【质量高】&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.learn-javascript-tutorial.com/"&gt;JavaScript Tutorial&lt;/a&gt; 【全面，不错】&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进阶：【待阅读】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ejohn.org/apps/learn"&gt;Learning Advanced JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他资料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://superherojs.com/"&gt;javascript资料大全-superherojs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jstherightway.org/"&gt;javascript the right way&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;书籍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;javascript 权威指南&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：笔记全部来自于以上资料&lt;/p&gt;
&lt;h2 id="mu-lu"&gt;目录&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt; 第一部分 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="封面" src="/imgs/front/javascript.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;大二开始接触的javascript，到现在，五年过去了，中间断断续续用了一些，但是主要是搞后端的，没有正儿八经“学习”一下。&lt;/p&gt;
&lt;p&gt;对其了解不成系统，最近做了一个系统涉及前端框架，所以借此机会学习总结了下。&lt;/p&gt;
&lt;p&gt;入门笔记，非初学者可以绕道哈:)&lt;/p&gt;
&lt;p&gt;后续打算深入学习一下，顺带去玩玩node.js&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;参考教程&lt;/p&gt;
&lt;p&gt;入门: 【已完成】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://gitbookio.github.io/javascript/"&gt;gitbook javascript教程&lt;/a&gt; 【简单】&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.w3school.com.cn/js/index.asp"&gt;w3cschool教程&lt;/a&gt; 【简单，较全】&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.jquery.com/javascript-101/"&gt;Jquery:JavaScript101&lt;/a&gt; 【质量高】&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.learn-javascript-tutorial.com/"&gt;JavaScript Tutorial&lt;/a&gt; 【全面，不错】&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进阶：【待阅读】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ejohn.org/apps/learn"&gt;Learning Advanced JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他资料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://superherojs.com/"&gt;javascript资料大全-superherojs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jstherightway.org/"&gt;javascript the right way&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;书籍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;javascript 权威指南&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：笔记全部来自于以上资料&lt;/p&gt;
&lt;h2 id="mu-lu"&gt;目录&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt; 第一部分：简介(Getting Started)&lt;/span&gt;
&lt;span class="code-line"&gt;  1.HTML/CSS/JavaScript&lt;/span&gt;
&lt;span class="code-line"&gt;  2.JavaScript书写和位置&lt;/span&gt;
&lt;span class="code-line"&gt;  3.简单语法&lt;/span&gt;
&lt;span class="code-line"&gt; 第二部分：基本语法&lt;/span&gt;
&lt;span class="code-line"&gt;  1.变量(varivalbes)&lt;/span&gt;
&lt;span class="code-line"&gt;  2.操作符(operators)&lt;/span&gt;
&lt;span class="code-line"&gt;  3.真值判断 - 比较&lt;/span&gt;
&lt;span class="code-line"&gt;  4.控制流&lt;/span&gt;
&lt;span class="code-line"&gt;    分支&lt;/span&gt;
&lt;span class="code-line"&gt;    循环&lt;/span&gt;
&lt;span class="code-line"&gt; 第二部分：函数&lt;/span&gt;
&lt;span class="code-line"&gt;  1.Functions&lt;/span&gt;
&lt;span class="code-line"&gt;  2.global functions&lt;/span&gt;
&lt;span class="code-line"&gt; 第三部分：对象&lt;/span&gt;
&lt;span class="code-line"&gt;  1.Array&lt;/span&gt;
&lt;span class="code-line"&gt;  2.Object&lt;/span&gt;
&lt;span class="code-line"&gt; 第四部分：内置对象&lt;/span&gt;
&lt;span class="code-line"&gt;  1.字符串(string)&lt;/span&gt;
&lt;span class="code-line"&gt;  2.math&lt;/span&gt;
&lt;span class="code-line"&gt;  3.date&lt;/span&gt;
&lt;span class="code-line"&gt;  4.boolean&lt;/span&gt;
&lt;span class="code-line"&gt; 第五部分: DOM 操作&lt;/span&gt;
&lt;span class="code-line"&gt; 第六部分：其他&lt;/span&gt;
&lt;span class="code-line"&gt;  1.正则&lt;/span&gt;
&lt;span class="code-line"&gt;  2.this关键字&lt;/span&gt;
&lt;span class="code-line"&gt;  3.异常处理&lt;/span&gt;
&lt;span class="code-line"&gt;  4.作用域&lt;/span&gt;
&lt;span class="code-line"&gt;    Global Scope&lt;/span&gt;
&lt;span class="code-line"&gt;    Local Scope&lt;/span&gt;
&lt;span class="code-line"&gt;  5.闭包&lt;/span&gt;
&lt;span class="code-line"&gt;  6.typeof(Testing Type)&lt;/span&gt;
&lt;span class="code-line"&gt;  7.Timers&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="di-yi-bu-fen-jian-jie-getting-started"&gt;第一部分：简介(Getting Started)&lt;/h2&gt;
&lt;h3 id="1htmlcssjavascript"&gt;1.HTML/CSS/JavaScript&lt;/h3&gt;
&lt;p&gt;关系&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;HTML is for Content&lt;/span&gt;
&lt;span class="code-line"&gt;CSS is for Presentation&lt;/span&gt;
&lt;span class="code-line"&gt;JavaScript is for Interactivity&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="2javascriptshu-xie-he-wei-zhi"&gt;2.JavaScript书写和位置&lt;/h3&gt;
&lt;p&gt;external,外部js文件引入&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- Code is written in a .js file, included via the script tag src attribute. --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/path/to/example.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;inline,本页面&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- Embed code directly on a web page using script tags. --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;alert( "Hello World!" );&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;attribute&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- Inline code directly on HTML elements being clicked. --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"javascript:alert( 'Hello World' );"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click Me!&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;"alert( 'Good Bye World' );"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click Me Too!&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;BP:将&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;放到页面底部，&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;标签之前&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"hello-world"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// Moving the script to the bottom of the page will make sure the element exists.&lt;/span&gt;
&lt;span class="code-line"&gt;var title = document.getElementById( "hello-world" );&lt;/span&gt;
&lt;span class="code-line"&gt;console.log( title );&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3jian-dan-yu-fa"&gt;3.简单语法&lt;/h3&gt;
&lt;p&gt;code sample&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;var hello = "Hello";&lt;/span&gt;
&lt;span class="code-line"&gt;var world = "World";&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// Message equals "Hello World"&lt;/span&gt;
&lt;span class="code-line"&gt;var message = hello + " " + world;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分号 ;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;分号用于分隔 JavaScript 语句。&lt;/span&gt;
&lt;span class="code-line"&gt;通常我们在每条可执行的语句结尾添加分号。&lt;/span&gt;
&lt;span class="code-line"&gt;使用分号的另一用处是在一行中编写多条语句。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注释&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// 单行,This is a comment, it will be ignored by the interpreter&lt;/span&gt;
&lt;span class="code-line"&gt;var a = "this is a variable defined in a statement";&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;/*&lt;/span&gt;
&lt;span class="code-line"&gt;多行&lt;/span&gt;
&lt;span class="code-line"&gt;This is a multi-line comment,&lt;/span&gt;
&lt;span class="code-line"&gt;it will be ignored by the interpreter&lt;/span&gt;
&lt;span class="code-line"&gt;*/&lt;/span&gt;
&lt;span class="code-line"&gt;var a = "this is a variable defined in a statement";&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对代码行进行折行  - 可以对js代码通过反斜杠，拆分换行&lt;/p&gt;
&lt;p&gt;JavaScript 会忽略多余的空格。可以向脚本添加空格，来提高其可读性。(空格和折行无关紧要)&lt;/p&gt;
&lt;p&gt;javaScript 中的所有事物都是对象：字符串、数字、数组、日期，等等。&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="di-er-bu-fen-ji-ben-yu-fa_1"&gt;第二部分：基本语法&lt;/h2&gt;
&lt;h3 id="1bian-liang-varivalbes"&gt;1.变量(varivalbes)&lt;/h3&gt;
&lt;p&gt;命名&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;必须以字母开头, 也能以 $ 和 _ 符号开头（不过我们不推荐这么做）&lt;/span&gt;
&lt;span class="code-line"&gt;可以包含数字&lt;/span&gt;
&lt;span class="code-line"&gt;名称大小写敏感（y 和 Y 是不同的变量）&lt;/span&gt;
&lt;span class="code-line"&gt;不能使用保留字&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：变量命名不要使用保留字 &lt;a href="https://learn.jquery.com/javascript-101/reserved-words/"&gt;Reserved Words&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;声明和赋值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;var age;&lt;/span&gt;
&lt;span class="code-line"&gt;age = 26;&lt;/span&gt;
&lt;span class="code-line"&gt;//or&lt;/span&gt;
&lt;span class="code-line"&gt;var age = 26;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var age, height, weight, gender;&lt;/span&gt;
&lt;span class="code-line"&gt;//or&lt;/span&gt;
&lt;span class="code-line"&gt;var name="Gates", age=56, job="CEO";&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;//注意，只声明不赋值，其值为undefined&lt;/span&gt;
&lt;span class="code-line"&gt;var x;&lt;/span&gt;
&lt;span class="code-line"&gt;x === undefined; // true&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;//=================&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// This works:&lt;/span&gt;
&lt;span class="code-line"&gt;var test = 1;&lt;/span&gt;
&lt;span class="code-line"&gt;var test2 = function() { ... };&lt;/span&gt;
&lt;span class="code-line"&gt;var test3 = test2( test );&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// And so does this:&lt;/span&gt;
&lt;span class="code-line"&gt;var test4 = 1,&lt;/span&gt;
&lt;span class="code-line"&gt;    test5 = function() { ... },&lt;/span&gt;
&lt;span class="code-line"&gt;    test6 = test2( test );&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;变量类型 Types&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;Numbers&lt;/span&gt;
&lt;span class="code-line"&gt;    Float: a number, like 1.21323, 4, -33.5, 100004 or 0.123&lt;/span&gt;
&lt;span class="code-line"&gt;    Integer: a number like 1, 12, -33, 140 but not 1.233&lt;/span&gt;
&lt;span class="code-line"&gt;String: a line of text like "boat", "elephant" or "damn, you are tall!"&lt;/span&gt;
&lt;span class="code-line"&gt;Boolean: either true or false, but nothing else&lt;/span&gt;
&lt;span class="code-line"&gt;    // Boolean values.&lt;/span&gt;
&lt;span class="code-line"&gt;    var okay = true;&lt;/span&gt;
&lt;span class="code-line"&gt;    var fail = false;&lt;/span&gt;
&lt;span class="code-line"&gt;Arrays: a collection of values like: 1,2,3,4,'I am bored now'&lt;/span&gt;
&lt;span class="code-line"&gt;Objects: a representation of a more complex object&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;null&lt;/span&gt;
&lt;span class="code-line"&gt;    // Define a null value. 可用于清空变量&lt;/span&gt;
&lt;span class="code-line"&gt;    var foo = null;&lt;/span&gt;
&lt;span class="code-line"&gt;undefined, 表示变量不含值&lt;/span&gt;
&lt;span class="code-line"&gt;    // Two ways to achieve an undefined value.&lt;/span&gt;
&lt;span class="code-line"&gt;    var bar1 = undefined;&lt;/span&gt;
&lt;span class="code-line"&gt;    var bar2;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="2cao-zuo-fu-operators"&gt;2.操作符(operators)&lt;/h3&gt;
&lt;p&gt;算术(Arithmetic Operators)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;Operator Description&lt;/span&gt;
&lt;span class="code-line"&gt;+        Addition&lt;/span&gt;
&lt;span class="code-line"&gt;-        Subtraction&lt;/span&gt;
&lt;span class="code-line"&gt;*        Multiplication&lt;/span&gt;
&lt;span class="code-line"&gt;/        Division&lt;/span&gt;
&lt;span class="code-line"&gt;%        Modulus (remainder)&lt;/span&gt;
&lt;span class="code-line"&gt;++       Increment by one&lt;/span&gt;
&lt;span class="code-line"&gt;--       Decrement by one&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;Increment: Given a = 5&lt;/span&gt;
&lt;span class="code-line"&gt;    c = a++, Results: c = 5 and a = 6&lt;/span&gt;
&lt;span class="code-line"&gt;    c = ++a, Results: c = 6 and a = 6&lt;/span&gt;
&lt;span class="code-line"&gt;Decrement: Given a = 5&lt;/span&gt;
&lt;span class="code-line"&gt;    c = a--, Results: c = 5 and a = 4&lt;/span&gt;
&lt;span class="code-line"&gt;    c = --a, Results: c = 4 and a = 4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;减法(-)&lt;/span&gt;
&lt;span class="code-line"&gt;将两边的操作数都转换为数字&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;加法(+)&lt;/span&gt;
&lt;span class="code-line"&gt;1. 两边的操作数首先被转换成原始值.这里我们称之为A 和 B.&lt;/span&gt;
&lt;span class="code-line"&gt;2. 如果有任意一个原始值是字符串,则把另一个也转换成字符串,执行A和B的连接操作并返回连接后的字符串.&lt;/span&gt;
&lt;span class="code-line"&gt;3. 否则把A和B都转换为数字,返回两个数字的和&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&amp;lt; 同 +&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;赋值操作符(Assignment Operators)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;Operator    Description&lt;/span&gt;
&lt;span class="code-line"&gt;=           Assignment, a = 3&lt;/span&gt;
&lt;span class="code-line"&gt;+=          (a+=3 is the same as a=a+3)&lt;/span&gt;
&lt;span class="code-line"&gt;-=          (a-=3 is the same as a=a-3)&lt;/span&gt;
&lt;span class="code-line"&gt;*=          (a*=3 is the same as a=a*3)&lt;/span&gt;
&lt;span class="code-line"&gt;/=          (a/=3 is the same as a=a/3)&lt;/span&gt;
&lt;span class="code-line"&gt;%=          (a%=3 is the same as a=a%3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;字符串操作符(String Operators)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;Operator    Description&lt;/span&gt;
&lt;span class="code-line"&gt;+           Concatenation (var greeting = "Hello " + firstname;)&lt;/span&gt;
&lt;span class="code-line"&gt;+=          One step concatenation and assignment (var greeting = "Hello "; greeting += firstname;)&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;"hello".concat(" world")// "hello world"&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;注意区别&lt;/span&gt;
&lt;span class="code-line"&gt;// Addition vs. Concatenation&lt;/span&gt;
&lt;span class="code-line"&gt;var foo = 1;&lt;/span&gt;
&lt;span class="code-line"&gt;var bar = "2";&lt;/span&gt;
&lt;span class="code-line"&gt;console.log( foo + bar ); // 12&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// Coercing a string to act as a number.&lt;/span&gt;
&lt;span class="code-line"&gt;var foo = 1;&lt;/span&gt;
&lt;span class="code-line"&gt;var bar = "2";&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;console.log( foo + Number(bar) ); // 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;三元运算(Ternary Operator)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;test ? expression1 : expression2&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;test&lt;/span&gt;
&lt;span class="code-line"&gt;任何 Boolean 表达式。&lt;/span&gt;
&lt;span class="code-line"&gt;expression1&lt;/span&gt;
&lt;span class="code-line"&gt;如果 test 为 true，则返回表达式。 可能是逗号表达式。&lt;/span&gt;
&lt;span class="code-line"&gt;expression2&lt;/span&gt;
&lt;span class="code-line"&gt;如果 test 为 false，则返回表达式。 可以使用逗号表达式链接多个表达式。&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;e.g.&lt;/span&gt;
&lt;span class="code-line"&gt;// Set foo to 1 if bar is true; otherwise, set foo to 0:&lt;/span&gt;
&lt;span class="code-line"&gt;var foo = bar ? 1 : 0;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;默认值(Default Operator)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;Operator    Description&lt;/span&gt;
&lt;span class="code-line"&gt;||          Used to assign a default operator&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var yourName = prompt("Your Name?","") || "Stranger";&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;比较运算符(Comparison operators)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;==  Equals&lt;/span&gt;
&lt;span class="code-line"&gt;!=  Doesn't equal&lt;/span&gt;
&lt;span class="code-line"&gt;=== Strictly equals&lt;/span&gt;
&lt;span class="code-line"&gt;!== Doesn't strictly equal&lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;   Is greater than&lt;/span&gt;
&lt;span class="code-line"&gt;&amp;lt;   Is less than&lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;=  Is greater than or equal to&lt;/span&gt;
&lt;span class="code-line"&gt;&amp;lt;=  Is less than or equal to&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;== / === 的区别&lt;/span&gt;
&lt;span class="code-line"&gt;== 值相等， === 值相等，且类型相同&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;BP: 相等比较总是使用 === 和 !===&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;//=====================&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;e.g.&lt;/span&gt;
&lt;span class="code-line"&gt;var foo = 1;&lt;/span&gt;
&lt;span class="code-line"&gt;var bar = 0;&lt;/span&gt;
&lt;span class="code-line"&gt;var baz = "1";&lt;/span&gt;
&lt;span class="code-line"&gt;var bim = 2;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;foo == bar; // false&lt;/span&gt;
&lt;span class="code-line"&gt;foo != bar; // true&lt;/span&gt;
&lt;span class="code-line"&gt;foo == baz; // true; but note that the types are different&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;foo === baz;             // false&lt;/span&gt;
&lt;span class="code-line"&gt;foo !== baz;             // true&lt;/span&gt;
&lt;span class="code-line"&gt;foo === parseInt( baz ); // true&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;foo &amp;gt; bim;  // false&lt;/span&gt;
&lt;span class="code-line"&gt;bim &amp;gt; baz;  // true&lt;/span&gt;
&lt;span class="code-line"&gt;foo &amp;lt;= baz; // true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3zhen-zhi-pan-duan-bi-jiao"&gt;3.真值判断 - 比较&lt;/h3&gt;
&lt;p&gt;真值判断&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// Values that evaluate to false:&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;false&lt;/span&gt;
&lt;span class="code-line"&gt;"" // An empty string.&lt;/span&gt;
&lt;span class="code-line"&gt;NaN // JavaScript's "not-a-number" variable.&lt;/span&gt;
&lt;span class="code-line"&gt;null&lt;/span&gt;
&lt;span class="code-line"&gt;undefined // Be careful -- undefined can be redefined!&lt;/span&gt;
&lt;span class="code-line"&gt;0 // The number zero.&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// Values that evaluate to true:&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;true&lt;/span&gt;
&lt;span class="code-line"&gt;// Everything else evaluates to true, some examples:&lt;/span&gt;
&lt;span class="code-line"&gt;"0"&lt;/span&gt;
&lt;span class="code-line"&gt;"any string"&lt;/span&gt;
&lt;span class="code-line"&gt;[] // An empty array.&lt;/span&gt;
&lt;span class="code-line"&gt;{} // An empty object.&lt;/span&gt;
&lt;span class="code-line"&gt;1 // Any non-zero number.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;逻辑运算&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;//短路运算&lt;/span&gt;
&lt;span class="code-line"&gt;&amp;amp;&amp;amp;  and (a == b &amp;amp;&amp;amp; c != d)&lt;/span&gt;
&lt;span class="code-line"&gt;||  or (a == b || c != d)&lt;/span&gt;
&lt;span class="code-line"&gt;!   not !(a == b || c != d)&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;--------------------&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// Logical AND and OR operators&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var foo = 1;&lt;/span&gt;
&lt;span class="code-line"&gt;var bar = 0;&lt;/span&gt;
&lt;span class="code-line"&gt;var baz = 2;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// returns 1, which is true&lt;/span&gt;
&lt;span class="code-line"&gt;foo || bar;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// returns 1, which is true&lt;/span&gt;
&lt;span class="code-line"&gt;bar || foo;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// returns 0, which is false&lt;/span&gt;
&lt;span class="code-line"&gt;foo &amp;amp;&amp;amp; bar;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// returns 2, which is true&lt;/span&gt;
&lt;span class="code-line"&gt;foo &amp;amp;&amp;amp; baz;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// returns 1, which is true&lt;/span&gt;
&lt;span class="code-line"&gt;baz &amp;amp;&amp;amp; foo;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;--------------------&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;if(x &amp;gt; 10 &amp;amp;&amp;amp; x &amp;lt; 20) {&lt;/span&gt;
&lt;span class="code-line"&gt;    ...&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;if(country === 'England' || country === 'Germany') {&lt;/span&gt;
&lt;span class="code-line"&gt;        ...&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;if ( (name === "John" || name === "Jennifer") &amp;amp;&amp;amp; country === "France")&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;--------------------&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;//其他用法&lt;/span&gt;
&lt;span class="code-line"&gt;// Do something with foo if foo is truthy.&lt;/span&gt;
&lt;span class="code-line"&gt;foo &amp;amp;&amp;amp; doSomething( foo );&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// Set bar to baz if baz is truthy;&lt;/span&gt;
&lt;span class="code-line"&gt;// otherwise, set it to the return value of createBar()&lt;/span&gt;
&lt;span class="code-line"&gt;var bar = baz || createBar();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="4kong-zhi-liu"&gt;4.控制流&lt;/h3&gt;
&lt;h4 id="fen-zhi"&gt;分支&lt;/h4&gt;
&lt;p&gt;if-eles&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;if (conditions) {&lt;/span&gt;
&lt;span class="code-line"&gt;    statements;&lt;/span&gt;
&lt;span class="code-line"&gt;} else if (conditions) {&lt;/span&gt;
&lt;span class="code-line"&gt;    statements;&lt;/span&gt;
&lt;span class="code-line"&gt;} else {&lt;/span&gt;
&lt;span class="code-line"&gt;    statements;&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;if (time&amp;lt;10)&lt;/span&gt;
&lt;span class="code-line"&gt;{&lt;/span&gt;
&lt;span class="code-line"&gt;    x="Good morning";&lt;/span&gt;
&lt;span class="code-line"&gt;} else if (time&amp;lt;20)&lt;/span&gt;
&lt;span class="code-line"&gt;{&lt;/span&gt;
&lt;span class="code-line"&gt;    x="Good day";&lt;/span&gt;
&lt;span class="code-line"&gt;} else&lt;/span&gt;
&lt;span class="code-line"&gt;{&lt;/span&gt;
&lt;span class="code-line"&gt;    x="Good evening";&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;switch&lt;/p&gt;
&lt;p&gt;在判断情况大于2种的时候，使用 switch/case 更高效，而且更优雅（更易于组织代码）。但在判断的情况超过10种的时候不要使用 switch/case&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;switch (expression) {&lt;/span&gt;
&lt;span class="code-line"&gt;    case value :&lt;/span&gt;
&lt;span class="code-line"&gt;        statements;&lt;/span&gt;
&lt;span class="code-line"&gt;    case value :&lt;/span&gt;
&lt;span class="code-line"&gt;        statements;&lt;/span&gt;
&lt;span class="code-line"&gt;    default :&lt;/span&gt;
&lt;span class="code-line"&gt;        statements;&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;//记得break&lt;/span&gt;
&lt;span class="code-line"&gt;var quantity = 1;&lt;/span&gt;
&lt;span class="code-line"&gt;switch (quantity) {&lt;/span&gt;
&lt;span class="code-line"&gt;    case 1 :&lt;/span&gt;
&lt;span class="code-line"&gt;        alert("quantity is 1");&lt;/span&gt;
&lt;span class="code-line"&gt;        break;&lt;/span&gt;
&lt;span class="code-line"&gt;    case 2 :&lt;/span&gt;
&lt;span class="code-line"&gt;        alert("quantity is 2");&lt;/span&gt;
&lt;span class="code-line"&gt;        break;&lt;/span&gt;
&lt;span class="code-line"&gt;    default :&lt;/span&gt;
&lt;span class="code-line"&gt;        alert("quantity is not 1 or 2");&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="xun-huan"&gt;循环&lt;/h4&gt;
&lt;p&gt;for&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;for (initialization; conditions; change) {&lt;/span&gt;
&lt;span class="code-line"&gt;    statements;&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;for(var i = 0; i &amp;lt; 10; i = i + 1){&lt;/span&gt;
&lt;span class="code-line"&gt;    // do this code ten-times&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var i = 0;&lt;/span&gt;
&lt;span class="code-line"&gt;for(; i&amp;lt;length; i+=2) {&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var i=0,len=cars.length;&lt;/span&gt;
&lt;span class="code-line"&gt;for (; i&amp;lt;len; )&lt;/span&gt;
&lt;span class="code-line"&gt;{&lt;/span&gt;
&lt;span class="code-line"&gt;    document.write(cars[i] + "&amp;lt;br&amp;gt;");&lt;/span&gt;
&lt;span class="code-line"&gt;    i++;&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;for/in&lt;/p&gt;
&lt;p&gt;谨慎使用for-in, 遍历一个对象中的成员（属性，方法），如果用来遍历数组的到的结果并不是预期中数组每项的值，方法神马的会被遍历出来&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;for (var index in array) {&lt;/span&gt;
&lt;span class="code-line"&gt;    statements;&lt;/span&gt;
&lt;span class="code-line"&gt;    //array[index]&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;for (var key in object) {&lt;/span&gt;
&lt;span class="code-line"&gt;    statements;&lt;/span&gt;
&lt;span class="code-line"&gt;    //object[key]&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;for (var name in object) {&lt;/span&gt;
&lt;span class="code-line"&gt;    if (object.hasOwnProperty(name)) {&lt;/span&gt;
&lt;span class="code-line"&gt;        // do something with name&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;e.g.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;while&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;while (conditions) {&lt;/span&gt;
&lt;span class="code-line"&gt;    statements;&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;var i = 0, x = "";&lt;/span&gt;
&lt;span class="code-line"&gt;while (i &amp;lt; 5) {&lt;/span&gt;
&lt;span class="code-line"&gt;    x = x + "The number is " + i;&lt;/span&gt;
&lt;span class="code-line"&gt;    i++;&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;do-while&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;do {&lt;/span&gt;
&lt;span class="code-line"&gt;    statements;&lt;/span&gt;
&lt;span class="code-line"&gt;} while (conditions);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;do {&lt;/span&gt;
&lt;span class="code-line"&gt;    // Even though the condition evaluates to false&lt;/span&gt;
&lt;span class="code-line"&gt;    // this loop's body will still execute once.&lt;/span&gt;
&lt;span class="code-line"&gt;    alert( "Hi there!" );&lt;/span&gt;
&lt;span class="code-line"&gt;} while ( false );&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;break/continue&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;break 语句用于跳出循环。&lt;/span&gt;
&lt;span class="code-line"&gt;continue 用于跳过循环中的一个迭代。&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;label:&lt;/span&gt;
&lt;span class="code-line"&gt;    语句&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;break labelname;&lt;/span&gt;
&lt;span class="code-line"&gt;continue labelname;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// Stopping a loop&lt;/span&gt;
&lt;span class="code-line"&gt;for ( var i = 0; i &amp;lt; 10; i++ ) {&lt;/span&gt;
&lt;span class="code-line"&gt;    if ( something ) {&lt;/span&gt;
&lt;span class="code-line"&gt;        break;&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// Skipping to the next iteration of a loop&lt;/span&gt;
&lt;span class="code-line"&gt;for ( var i = 0; i &amp;lt; 10; i++ ) {&lt;/span&gt;
&lt;span class="code-line"&gt;    if ( something ) {&lt;/span&gt;
&lt;span class="code-line"&gt;        continue;&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;    // The following statement will only be executed&lt;/span&gt;
&lt;span class="code-line"&gt;    // if the conditional "something" has not been met&lt;/span&gt;
&lt;span class="code-line"&gt;    console.log( "I have been reached" );&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="di-er-bu-fen-han-shu_2"&gt;第二部分：函数&lt;/h2&gt;
&lt;h3 id="1functions"&gt;1.Functions&lt;/h3&gt;
&lt;p&gt;声明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// Function declaration.&lt;/span&gt;
&lt;span class="code-line"&gt;function foo() {&lt;/span&gt;
&lt;span class="code-line"&gt;    // Do something.&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// Named function expression.&lt;/span&gt;
&lt;span class="code-line"&gt;var foo = function() {&lt;/span&gt;
&lt;span class="code-line"&gt;    // Do something.&lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;function myFunction(var1,var2)&lt;/span&gt;
&lt;span class="code-line"&gt;{&lt;/span&gt;
&lt;span class="code-line"&gt;    //function statements go here&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;function double(x) {&lt;/span&gt;
&lt;span class="code-line"&gt;    return 2 * x;&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;or&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var double = function(x) {&lt;/span&gt;
&lt;span class="code-line"&gt;    return 2 * x;&lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;function changeBg(color){&lt;/span&gt;
&lt;span class="code-line"&gt;    document.bgColor = color;&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;返回值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;function myFunction()&lt;/span&gt;
&lt;span class="code-line"&gt;{&lt;/span&gt;
&lt;span class="code-line"&gt;    var x=5;&lt;/span&gt;
&lt;span class="code-line"&gt;    return x;&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;var myVar=myFunction();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// A simple function.&lt;/span&gt;
&lt;span class="code-line"&gt;var greet = function( person, greeting ) {&lt;/span&gt;
&lt;span class="code-line"&gt;    var text = greeting + ", " + person;&lt;/span&gt;
&lt;span class="code-line"&gt;    console.log( text );&lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;greet( "Rebecca", "Hello" ); // "Hello, Rebecca"&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// A function that returns a value.&lt;/span&gt;
&lt;span class="code-line"&gt;var greet = function( person, greeting ) {&lt;/span&gt;
&lt;span class="code-line"&gt;    var text = greeting + ", " + person;&lt;/span&gt;
&lt;span class="code-line"&gt;    return text;&lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;console.log( greet( "Rebecca", "Hello" ) ); // "Hello, Rebecca"&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// A function that returns another function.&lt;/span&gt;
&lt;span class="code-line"&gt;var greet = function( person, greeting ) {&lt;/span&gt;
&lt;span class="code-line"&gt;    var text = greeting + ", " + person;&lt;/span&gt;
&lt;span class="code-line"&gt;    return function() {&lt;/span&gt;
&lt;span class="code-line"&gt;        console.log( text );&lt;/span&gt;
&lt;span class="code-line"&gt;    };&lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var greeting = greet( "Rebecca", "Hello" );&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;greeting(); // "Hello, Rebecca"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Immediately-Invoked Function Expression (IIFE)&lt;/p&gt;
&lt;p&gt;参阅文章 &lt;a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/"&gt;IIFE&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建并立刻执行.This pattern is extremely useful for cases where you want to avoid polluting the global namespace with code – no variables declared inside of the function are visible outside of it.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// An immediately-invoked function expression.&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;(function() {&lt;/span&gt;
&lt;span class="code-line"&gt;    var foo = "Hello world";&lt;/span&gt;
&lt;span class="code-line"&gt;})();&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;console.log( foo ); // undefined!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法作为参数&lt;/p&gt;
&lt;p&gt;方法可以赋值给变量，且，可以作为函数参数传递&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// Passing an anonymous function as an argument.&lt;/span&gt;
&lt;span class="code-line"&gt;var myFn = function( fn ) {&lt;/span&gt;
&lt;span class="code-line"&gt;    var result = fn();&lt;/span&gt;
&lt;span class="code-line"&gt;    console.log( result );&lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// Logs "hello world"&lt;/span&gt;
&lt;span class="code-line"&gt;myFn( function() {&lt;/span&gt;
&lt;span class="code-line"&gt;    return "hello world";&lt;/span&gt;
&lt;span class="code-line"&gt;});&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// Passing a named function as an argument&lt;/span&gt;
&lt;span class="code-line"&gt;var myFn = function( fn ) {&lt;/span&gt;
&lt;span class="code-line"&gt;    var result = fn();&lt;/span&gt;
&lt;span class="code-line"&gt;    console.log( result );&lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var myOtherFn = function() {&lt;/span&gt;
&lt;span class="code-line"&gt;    return "hello world";&lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;myFn( myOtherFn ); // "hello world"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="2global-functions"&gt;2.global functions&lt;/h3&gt;
&lt;p&gt;These "global" functions we have discussed above are actually methods of the window object, but as window is assumed if no object is referenced, we don't need to explicitly write window.parseFloat() or window.isNaN(). Also, some of these functions such as Number() and String() are really function constructors for creating new String and Number objects. For now, just remember that you can use these functions to ensure you are working with a String or Number.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Number(object)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个数值包装器&lt;/p&gt;
&lt;p&gt;Number的属性&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;MAX_VALUE&lt;/span&gt;
&lt;span class="code-line"&gt;MIN_VALUE&lt;/span&gt;
&lt;span class="code-line"&gt;NEGATIVE_INFINITY&lt;/span&gt;
&lt;span class="code-line"&gt;POSITIVE_INFINITY&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;toExponential ,  toExponential 方法以指数形式返回 数字的字符串表示&lt;/span&gt;
&lt;span class="code-line"&gt;toFixed, 四舍五入&lt;/span&gt;
&lt;span class="code-line"&gt;toPrecision&lt;/span&gt;
&lt;span class="code-line"&gt;toString&lt;/span&gt;
&lt;span class="code-line"&gt;valueOf, valueOf 方法返回调用它的对象类型的原始&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;转为数字，如果失败返回NaN(Not a Number)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;var strNum1 = "1";&lt;/span&gt;
&lt;span class="code-line"&gt;var strNum2 = "2";&lt;/span&gt;
&lt;span class="code-line"&gt;var strSum = strNum1 + strNum2; //returns 12&lt;/span&gt;
&lt;span class="code-line"&gt;alert(strSum);&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var intNum1 = Number(strNum1);&lt;/span&gt;
&lt;span class="code-line"&gt;var intNum2 = Number(strNum2);&lt;/span&gt;
&lt;span class="code-line"&gt;var intSum = intNum1 + intNum2; //returns 3&lt;/span&gt;
&lt;span class="code-line"&gt;alert(intSum);&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// 四舍五入一个数字，保留N位小数&lt;/span&gt;
&lt;span class="code-line"&gt;var num =2.443242342;&lt;/span&gt;
&lt;span class="code-line"&gt;num = num.toFixed(4);  // num will be equal to 2.4432&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Boolean(object)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boolean 是一个 代表 true 或 false 值的对象&lt;/p&gt;
&lt;p&gt;Boolean 对象有多个值，这些值 &lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;相当于 false 值（0、 -0、null 或 “” [一个空字串]），未定义的 (NaN)，当然还有 false。&lt;/span&gt;
&lt;span class="code-line"&gt;所有其他布尔 值相当于 true 值&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;var myBoolean = true;
if(myBoolean == true) {
// If the condition evaluates to true
}
else {
// If the condition evaluates to false
}&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String(object)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;转为字符串&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;var intNum1 = 1;&lt;/span&gt;
&lt;span class="code-line"&gt;var intNum2 = 2;&lt;/span&gt;
&lt;span class="code-line"&gt;var intSum = intNum1 + intNum2; //returns 3&lt;/span&gt;
&lt;span class="code-line"&gt;alert(intSum);&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var strNum1 = String(intNum1);&lt;/span&gt;
&lt;span class="code-line"&gt;var strNum2 = String(intNum2);&lt;/span&gt;
&lt;span class="code-line"&gt;var strSum = strNum1 + strNum2; //returns 12&lt;/span&gt;
&lt;span class="code-line"&gt;alert(strSum);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;具体见string 方法&lt;/p&gt;
&lt;p&gt;isNaN(object)&lt;/p&gt;
&lt;p&gt;判断是否为数字，或者是否可以被转为数字。如果是数字，return false，否则，return true;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;isNaN(4) //false&lt;/span&gt;
&lt;span class="code-line"&gt;isNaN('4') //false&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;isNaN('hello') //true&lt;/span&gt;
&lt;span class="code-line"&gt;isNaN(0/0) //true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;parseFloat() and parseInt()&lt;/p&gt;
&lt;p&gt;The parseFloat() 如果字符串以数字开头，将会将字符串开头数字部分转为数字。否则，返回NaN&lt;/p&gt;
&lt;p&gt;The parseInt() 如果字符串以数字开头，将会将字符串开头数字部分转为数字。否则，返回NaN&lt;/p&gt;
&lt;p&gt;parseInt(string, radix), radix=[2,36], radix不设or0, 根据string, “0x”16进制, "0"8进制&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;var race = "26.2 miles";&lt;/span&gt;
&lt;span class="code-line"&gt;parseFloat(race); //26.2&lt;/span&gt;
&lt;span class="code-line"&gt;parseInt(race);  //26&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;race = "Marathon";&lt;/span&gt;
&lt;span class="code-line"&gt;parseFloat(race); //NaN&lt;/span&gt;
&lt;span class="code-line"&gt;parseInt(race); //NaN&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="di-san-bu-fen-dui-xiang_1"&gt;第三部分：对象&lt;/h2&gt;
&lt;h3 id="1array"&gt;1.Array&lt;/h3&gt;
&lt;p&gt;声明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;//语法&lt;/span&gt;
&lt;span class="code-line"&gt;new Array();&lt;/span&gt;
&lt;span class="code-line"&gt;new Array(size);&lt;/span&gt;
&lt;span class="code-line"&gt;new Array(element0, element1, ..., elementn);&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// Creating an array with the constructor:&lt;/span&gt;
&lt;span class="code-line"&gt;var myarray = new Array();&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// Creating an array with the array literal syntax:&lt;/span&gt;
&lt;span class="code-line"&gt;var bar = [];&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;========================&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// A simple array with constructor.&lt;/span&gt;
&lt;span class="code-line"&gt;var myArray1 = new Array( "hello", "world" );&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// Literal declaration, the preferred way.&lt;/span&gt;
&lt;span class="code-line"&gt;var myArray2 = [ "hello", "world" ];&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;========================&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var bar = new Array( 100 );&lt;/span&gt;
&lt;span class="code-line"&gt;alert( bar[ 0 ] ); // undefined&lt;/span&gt;
&lt;span class="code-line"&gt;alert( bar.length ); // 100&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var foo = [ 100 ];&lt;/span&gt;
&lt;span class="code-line"&gt;alert( foo[ 0 ] ); // 100&lt;/span&gt;
&lt;span class="code-line"&gt;alert( foo.length ); // 1&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;a = new Array(3) // [undefined × 3]&lt;/span&gt;
&lt;span class="code-line"&gt;a[0] // undefined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;赋值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;var myArray = [];&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;myArray[ 0 ] = "hello";&lt;/span&gt;
&lt;span class="code-line"&gt;myArray[ 1 ] = "world";&lt;/span&gt;
&lt;span class="code-line"&gt;myArray[ 3 ] = "!";&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;//Missing indices will be filled with undefined.&lt;/span&gt;
&lt;span class="code-line"&gt;console.log( myArray ); // [ "hello", "world", undefined, "!" ];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;读取&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// Accessing array items by index&lt;/span&gt;
&lt;span class="code-line"&gt;var myArray = [ "hello", "world", "!" ];&lt;/span&gt;
&lt;span class="code-line"&gt;console.log( myArray[ 2 ] ); // "!"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;属性-length&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// Length of an array&lt;/span&gt;
&lt;span class="code-line"&gt;var myArray = [ "hello", "world", "!" ];&lt;/span&gt;
&lt;span class="code-line"&gt;console.log( myArray.length ); // 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/56712/"&gt;原生数组函数&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;遍历&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// For loops and arrays - a classic&lt;/span&gt;
&lt;span class="code-line"&gt;var myArray = [ "hello", "world", "!" ];&lt;/span&gt;
&lt;span class="code-line"&gt;for ( var i = 0; i &amp;lt; myArray.length; i = i + 1 ) {&lt;/span&gt;
&lt;span class="code-line"&gt;    console.log( myArray[ i ] );&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// for/in&lt;/span&gt;
&lt;span class="code-line"&gt;var x&lt;/span&gt;
&lt;span class="code-line"&gt;var mycars = new Array()&lt;/span&gt;
&lt;span class="code-line"&gt;mycars[0] = "Saab"&lt;/span&gt;
&lt;span class="code-line"&gt;mycars[1] = "Volvo"&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;for (x in mycars)&lt;/span&gt;
&lt;span class="code-line"&gt;{&lt;/span&gt;
&lt;span class="code-line"&gt;    console.log(mycars[x]);&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;常用方法&lt;/p&gt;
&lt;p&gt;方法-push/pop&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// Pushing and popping&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var myArray = [];&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;myArray.push( 0 ); // [ 0 ]&lt;/span&gt;
&lt;span class="code-line"&gt;myArray.push( 2 ); // [ 0 , 2 ]&lt;/span&gt;
&lt;span class="code-line"&gt;myArray.push( 7 ); // [ 0 , 2 , 7 ]&lt;/span&gt;
&lt;span class="code-line"&gt;b = myArray.pop();     // [ 0 , 2 ] , b=7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-concat&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;myOtherArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="err"&gt;返回新数组&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;wholeArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;myArray&lt;/span&gt;&lt;span class="nc"&gt;.concat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="nt"&gt;myOtherArray&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="cp"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;附加（&lt;/span&gt;&lt;span class="nt"&gt;append&lt;/span&gt;&lt;span class="err"&gt;）一个数组到另一个数组上&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;array1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"foo"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Joe"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2458&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;array2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Doe"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;555&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;Array&lt;/span&gt;&lt;span class="nc"&gt;.prototype.push.apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;array1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;array2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;/* array1 will be equal to  &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"foo"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="s2"&gt;"Joe"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2458&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Doe"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;555&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="c"&gt; */&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-join&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// Joining elements&lt;/span&gt;
&lt;span class="code-line"&gt;var myArray = [ "hello", "world", "!" ];&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// The default separator is a comma. 默认逗号&lt;/span&gt;
&lt;span class="code-line"&gt;console.log( myArray.join() );     // "hello,world,!"&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// Any string can be used as separator...&lt;/span&gt;
&lt;span class="code-line"&gt;console.log( myArray.join( " " ) );  // "hello world !";&lt;/span&gt;
&lt;span class="code-line"&gt;console.log( myArray.join( "!!" ) ); // "hello!!world!!!";&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// ...including an empty one.&lt;/span&gt;
&lt;span class="code-line"&gt;console.log( myArray.join( "" ) );   // "helloworld!"&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// 拼标签&lt;/span&gt;
&lt;span class="code-line"&gt;"&lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;" + tdcell.join('&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;') + "&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-indexOf&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;var fruits = ["Banana", "Orange", "Apple", "Mango"];&lt;/span&gt;
&lt;span class="code-line"&gt;var a = fruits.indexOf("Apple");&lt;/span&gt;
&lt;span class="code-line"&gt;//2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-slice&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// Slicing&lt;/span&gt;
&lt;span class="code-line"&gt;var myArray = [ 1, 2, 3, 4, 5, 6, 7, 8 ];&lt;/span&gt;
&lt;span class="code-line"&gt;var newArray = myArray.slice( 3 );&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;console.log( myArray );  // [ 1, 2, 3, 4, 5, 6, 7, 8 ]&lt;/span&gt;
&lt;span class="code-line"&gt;console.log( newArray ); // [ 4, 5, 6, 7, 8 ]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-splice&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;myArray.splice( index, length, values, ... );&lt;/span&gt;
&lt;span class="code-line"&gt;Index – The starting index.&lt;/span&gt;
&lt;span class="code-line"&gt;Length – The number of elements to remove.&lt;/span&gt;
&lt;span class="code-line"&gt;Values – The values to be inserted at the index position.&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var myArray = [ 0, 7, 8, 5 ];&lt;/span&gt;
&lt;span class="code-line"&gt;myArray.splice( 1, 2, 1, 2, 3, 4 ); //from index 1, cut 2 elements, and insert 1,2,3,4&lt;/span&gt;
&lt;span class="code-line"&gt;console.log( myArray ); // [ 0, 1, 2, 3, 4, 5 ]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-sort&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// Sorting without comparing function.&lt;/span&gt;
&lt;span class="code-line"&gt;var myArray = [ 3, 4, 6, 1 ];&lt;/span&gt;
&lt;span class="code-line"&gt;myArray.sort(); // 1, 3, 4, 6&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// Sorting with comparing function.&lt;/span&gt;
&lt;span class="code-line"&gt;function descending( a, b ) {&lt;/span&gt;
&lt;span class="code-line"&gt;    return b - a;&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;var myArray = [ 3, 4, 6, 1 ];&lt;/span&gt;
&lt;span class="code-line"&gt;myArray.sort( descending ); // [ 6, 4, 3, 1 ]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-reverse&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;var myArray = [ "world" , "hello" ];&lt;/span&gt;
&lt;span class="code-line"&gt;myArray.reverse(); // [ "hello", "world" ]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-shift&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// Queue with shift() and push()&lt;/span&gt;
&lt;span class="code-line"&gt;var myArray = [];&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;myArray.push( 0 ); // [ 0 ]&lt;/span&gt;
&lt;span class="code-line"&gt;myArray.push( 2 ); // [ 0 , 2 ]&lt;/span&gt;
&lt;span class="code-line"&gt;myArray.push( 7 ); // [ 0 , 2 , 7 ]&lt;/span&gt;
&lt;span class="code-line"&gt;b = myArray.shift();   // [ 2 , 7 ],  b=0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-unshift&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;//Inserts an element at the first position of the array:&lt;/span&gt;
&lt;span class="code-line"&gt;var myArray = [];&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;myArray.unshift( 0 ); // [ 0 ]&lt;/span&gt;
&lt;span class="code-line"&gt;myArray.unshift( 2 ); // [ 2 , 0 ]&lt;/span&gt;
&lt;span class="code-line"&gt;myArray.unshift( 7 ); // [ 7 , 2 , 0 ]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-forEach&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;Element – The element itself.&lt;/span&gt;
&lt;span class="code-line"&gt;Index – The index of this element in the array.&lt;/span&gt;
&lt;span class="code-line"&gt;Array – The array itself.&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// Native .forEach()&lt;/span&gt;
&lt;span class="code-line"&gt;function printElement( elem ) {&lt;/span&gt;
&lt;span class="code-line"&gt;    console.log( elem );&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;function printElementAndIndex( elem, index ) {&lt;/span&gt;
&lt;span class="code-line"&gt;    console.log( "Index " + index + ": " + elem );&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;function negateElement( elem, index, array ) {&lt;/span&gt;
&lt;span class="code-line"&gt;    array[ index ] = -elem;&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;myArray = [ 1, 2, 3, 4, 5 ];&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// Prints all elements to the console&lt;/span&gt;
&lt;span class="code-line"&gt;myArray.forEach( printElement );&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// Prints "Index 0: 1", "Index 1: 2", "Index 2: 3", ...&lt;/span&gt;
&lt;span class="code-line"&gt;myArray.forEach( printElementAndIndex );&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// myArray is now [ -1, -2, -3, -4, -5 ]&lt;/span&gt;
&lt;span class="code-line"&gt;myArray.forEach( negateElement );&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取数字数组中最大最小值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;var  numbers = [5, 458 , 120 , -215 , 228 , 400 , 122205, -85411];&lt;/span&gt;
&lt;span class="code-line"&gt;var maxInNumbers = Math.max.apply(Math, numbers);&lt;/span&gt;
&lt;span class="code-line"&gt;var minInNumbers = Math.min.apply(Math, numbers);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;清空一个数组&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;var myArray = [12 , 222 , 1000 ];&lt;/span&gt;
&lt;span class="code-line"&gt;myArray.length = 0; // myArray will be equal to [].&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;改变length可以进行数组截断或者扩增(扩增的项是undefined)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不要使用 delete 来删除一个数组中的项&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;var items = [12, 548 ,'a' , 2 , 5478 , 'foo' , 8852, , 'Doe' ,2154 , 119 ];&lt;/span&gt;
&lt;span class="code-line"&gt;items.length; // return 11&lt;/span&gt;
&lt;span class="code-line"&gt;delete items[3]; // return true&lt;/span&gt;
&lt;span class="code-line"&gt;items.length; // return 11&lt;/span&gt;
&lt;span class="code-line"&gt;/* items will be equal to [12, 548, "a", undefined × 1, 5478, "foo", 8852, undefined × 1, "Doe", 2154,       119]   */&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;使用&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var items = [12, 548 ,'a' , 2 , 5478 , 'foo' , 8852, , 'Doe' ,2154 , 119 ];&lt;/span&gt;
&lt;span class="code-line"&gt;items.length; // return 11&lt;/span&gt;
&lt;span class="code-line"&gt;items.splice(3,1) ;&lt;/span&gt;
&lt;span class="code-line"&gt;items.length; // return 10&lt;/span&gt;
&lt;span class="code-line"&gt;/* items will be equal to [12, 548, "a", 5478, "foo", 8852, undefined × 1, "Doe", 2154,       119]   */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="2object"&gt;2.Object&lt;/h3&gt;
&lt;p&gt;Objects包含一个或多个键值对，键：任意字符串，值：数字，字符串，array，其他objects，函数等&lt;/p&gt;
&lt;p&gt;声明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// Creating an object with the constructor:&lt;/span&gt;
&lt;span class="code-line"&gt;var person1 = new Object;&lt;/span&gt;
&lt;span class="code-line"&gt;person1.firstName = "John";&lt;/span&gt;
&lt;span class="code-line"&gt;person1.lastName = "Doe";&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;alert( person1.firstName + " " + person1.lastName );&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// Creating an object with the object literal syntax:&lt;/span&gt;
&lt;span class="code-line"&gt;var person2 = {&lt;/span&gt;
&lt;span class="code-line"&gt;    firstName: "Jane",&lt;/span&gt;
&lt;span class="code-line"&gt;    lastName: "Doe"&lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;alert( person2.firstName + " " + person2.lastName );&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;//包含方法&lt;/span&gt;
&lt;span class="code-line"&gt;var myObject = {&lt;/span&gt;
&lt;span class="code-line"&gt;    sayHello: function() {&lt;/span&gt;
&lt;span class="code-line"&gt;        console.log( "hello" );&lt;/span&gt;
&lt;span class="code-line"&gt;    },&lt;/span&gt;
&lt;span class="code-line"&gt;    myName: "Rebecca"&lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;myObject.sayHello(); // "hello"&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;console.log( myObject.myName ); // "Rebecca"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;嵌套&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// As mentioned, objects can also have objects as a property.&lt;/span&gt;
&lt;span class="code-line"&gt;var people = {};&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;people[ "person1" ] = person1;&lt;/span&gt;
&lt;span class="code-line"&gt;people[ "person2" ] = person2;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;alert( people[ "person1" ].firstName );&lt;/span&gt;
&lt;span class="code-line"&gt;alert( people[ "person2" ].firstName );&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取属性：寻址方式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;name=person.lastname;&lt;/span&gt;
&lt;span class="code-line"&gt;name=person["lastname"];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除属性&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;b = { 'b1': 1, 'b2':2 }&lt;/span&gt;
&lt;span class="code-line"&gt;delete b['b2']&lt;/span&gt;
&lt;span class="code-line"&gt;//Object {b1: 1}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;读取未定义的属性&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Properties&lt;/span&gt; &lt;span class="nt"&gt;that&lt;/span&gt; &lt;span class="nt"&gt;have&lt;/span&gt; &lt;span class="nt"&gt;not&lt;/span&gt; &lt;span class="nt"&gt;been&lt;/span&gt; &lt;span class="nt"&gt;created&lt;/span&gt; &lt;span class="nt"&gt;are&lt;/span&gt; &lt;span class="nt"&gt;undefined&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"John Doe"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;alert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="nt"&gt;person&lt;/span&gt;&lt;span class="nc"&gt;.email&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;undefined&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;访问对象的方法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;objectName.methodName()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="di-si-bu-fen-nei-zhi-dui-xiang_1"&gt;第四部分：内置对象&lt;/h2&gt;
&lt;h3 id="1zi-fu-chuan-string"&gt;1.字符串(string)&lt;/h3&gt;
&lt;p&gt;字符串可以是引号中的任意文本&lt;/p&gt;
&lt;p&gt;声明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// Single quotes can be used&lt;/span&gt;
&lt;span class="code-line"&gt;var str = 'Our lovely string';&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// Double quotes as well&lt;/span&gt;
&lt;span class="code-line"&gt;var otherStr = "Another nice string";&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;//In Javascript, Strings can contain UTF-8 characters:&lt;/span&gt;
&lt;span class="code-line"&gt;"中文 español English हिन्दी العربية português বাংলা русский 日本語 ਪੰਜਾਬੀ 한국어";&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;连接字符串&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;//规则是：如果把数字与字符串相加，结果将成为字符串&lt;/span&gt;
&lt;span class="code-line"&gt;var bigStr = 'Hi ' + 'JS strings are nice ' + 'and ' + 'easy to add';&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;长度&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// Just use the property .length&lt;/span&gt;
&lt;span class="code-line"&gt;var size = 'Our lovely string'.length;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;常用方法&lt;/p&gt;
&lt;p&gt;方法-trim&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;var str = "       Hello World!        ";&lt;/span&gt;
&lt;span class="code-line"&gt;alert(str.trim());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-match&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;str.match("world")&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-replace&lt;/p&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;StringObject.replace(searchValue,replaceValue)&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;StringObject:字符串&lt;/span&gt;
&lt;span class="code-line"&gt;searchValue：字符串或正则表达式&lt;/span&gt;
&lt;span class="code-line"&gt;replaceValue:字符串或者函数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;replaceValue可以是字符串。如果字符串中有几个特定字符的话，会被转换为特定字符串&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;&amp;amp;  与正则相匹配的字符串&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;`  匹配字符串左边的字符&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;’ 匹配字符串右边的字符&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;1,&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;2,&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;,3,…,&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="x"&gt; 匹配结果中对应的分组匹配结果&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Microsoft&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"W3School"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt;"hello world"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt;"healo world"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt;"heaao worad"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sStr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;'讨论一下正则表达式中的&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="err"&gt;的用法'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;sStr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;正则表达式&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//讨论一下{正则表达式}中的replace的用法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"$`"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//aac&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"$'"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//acc"'`")&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;nimojs&lt;/span&gt;&lt;span class="mf"&gt;@126.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)(@)(.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"$2$1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//@nimojs&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;replaceValue 是函数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;JAVASCRIPT&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="c1"&gt;//JaVaScRIPT&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;logArguments&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//["nimojs@126.com", "nimojs", "@", "126.com", 0, "nimojs@126.com"] &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="err"&gt;'返回值会替换掉匹配到的目标'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;nimojs&lt;/span&gt;&lt;span class="mf"&gt;@126.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)(@)(.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;logArguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-split(delimiter)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;var s = "A,B,C,D";&lt;/span&gt;
&lt;span class="code-line"&gt;var a = s.split(",");&lt;/span&gt;
&lt;span class="code-line"&gt;document.write(a[2]);&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns C&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-indexOf(substring,startPosition)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;str.indexOf("Hello")&lt;/span&gt;
&lt;span class="code-line"&gt;// if not exists, return -1&lt;/span&gt;
&lt;span class="code-line"&gt;code.indexOf('a') === -1&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;webucator.indexOf("cat");&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns 4&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;webucator.indexOf("cat", 5);&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns -1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-lastIndexOf(substring,endPosition)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;webucator.lastIndexOf("cat");&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns 4&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt; webucator.lastIndexOf("cat", 5);&lt;/span&gt;
&lt;span class="code-line"&gt; //Returns 4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-substr(startPosition,length)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;webucator.substr(4, 3);&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns cat&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;webucator.substr(4);&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns cator&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-substring(startPosition,endPosition)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;webucator.substring(4, 7);&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns cat&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;webucator.substring(4);&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns cator&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-slice(startPosition,endPosition)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;webucator.slice(4, 7);&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns cat&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var str="Hello happy world!"&lt;/span&gt;
&lt;span class="code-line"&gt;str.slice(6)// happy world!&lt;/span&gt;
&lt;span class="code-line"&gt;str.slice(6,11) //happy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-slice(startPosition,positionFromEnd)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;webucator.slice(4, -2);&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns cat&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-toLowerCase()/toUpperCase()&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;webucator.toLowerCase()&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns webucator&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;webucator.toUpperCase();&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns WEBUCATOR&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-charAt(position)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;webucator.charAt(4)&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns c (the fifth character)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-charCodeAt(position)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;webucator.charCodeAt(4)&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns 99&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-fromCharCode(characterCodes)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;String.fromCharCode(169)&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns ©&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="2math"&gt;2.math&lt;/h3&gt;
&lt;p&gt;Math（算数）对象的作用是：执行常见的算数任务&lt;/p&gt;
&lt;p&gt;属性&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;//Math.PI Pi (Π)&lt;/span&gt;
&lt;span class="code-line"&gt;Math.PI;&lt;/span&gt;
&lt;span class="code-line"&gt;//3.141592653589793&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;//Math.SQRT2  Square root of 2.&lt;/span&gt;
&lt;span class="code-line"&gt;Math.SQRT2;&lt;/span&gt;
&lt;span class="code-line"&gt;//1.4142135623730951&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Math.abs(number)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;Math.abs(-12);&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns 12&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Math.ceil(number)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;Math.ceil(5.4);&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns 6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Math.floor(number)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;Math.floor(5.6);&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns 5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Math.max(numbers)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;Math.max(2, 5, 9, 3);&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns 9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Math.min(numbers)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;Math.min(2, 5, 9, 3);&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns 2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Math.pow(number, power)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;Math.pow(2, 5);&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns 32&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Math.round(number)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;Math.round(2.5);&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Math.random();&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;//Returns random&lt;/span&gt;
&lt;span class="code-line"&gt;//number from 0 to 1&lt;/span&gt;
&lt;span class="code-line"&gt;Math.random()&lt;/span&gt;
&lt;span class="code-line"&gt;var rndDec = Math.random();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Math.power()&lt;/p&gt;
&lt;h3 id="3date"&gt;3.date&lt;/h3&gt;
&lt;p&gt;处理日期和时间&lt;/p&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;Syntax&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;new&lt;/span&gt; &lt;span class="nt"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;myDate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;new&lt;/span&gt; &lt;span class="nt"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;"从 1970/01/01 至今已过去 "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;myDate&lt;/span&gt;&lt;span class="nc"&gt;.getTime&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" 毫秒"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;new&lt;/span&gt; &lt;span class="nt"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;document&lt;/span&gt;&lt;span class="nc"&gt;.write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;now&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;Syntax&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;new&lt;/span&gt; &lt;span class="nt"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"month dd, yyyy hh:mm:ss);"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;redSoxWin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;new&lt;/span&gt; &lt;span class="nt"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"October 21, 2004 12:01:00"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;document&lt;/span&gt;&lt;span class="nc"&gt;.write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;redSoxWin&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;Syntax&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;new&lt;/span&gt; &lt;span class="nt"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;yyyy&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;mm&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;dd&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;hh&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;mm&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ss&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ms&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;redSoxWin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;new&lt;/span&gt; &lt;span class="nt"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;2004&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;9&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;21&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;12&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;01&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;00&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;00&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;document&lt;/span&gt;&lt;span class="nc"&gt;.write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;redSoxWin&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="err"&gt;计数从&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="err"&gt;开始&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;new&lt;/span&gt; &lt;span class="nt"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;2012&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;15&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;2012&lt;/span&gt;&lt;span class="err"&gt;年&lt;/span&gt;&lt;span class="nt"&gt;5&lt;/span&gt;&lt;span class="err"&gt;月&lt;/span&gt;&lt;span class="nt"&gt;15&lt;/span&gt;&lt;span class="err"&gt;日&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;alert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;d&lt;/span&gt;&lt;span class="nc"&gt;.getMonth&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;            &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="err"&gt;结果为&lt;/span&gt;&lt;span class="nt"&gt;4&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Date.parse 的返回结果不是一个Date对象，而是从1970-01-01午夜（GMT）到给定日期之间的毫秒数。可以用Date的构造函数将其转换为Date对象&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;new Date(Date.parse("8/2/2012"));    // 正确识别为2012年8月2日&lt;/span&gt;
&lt;span class="code-line"&gt;new Date(Date.parse("2012-08-02"));    // 正确识别为2012年8月2日&lt;/span&gt;
&lt;span class="code-line"&gt;new Date(Date.parse("2012-8-2"));    // 不能识别&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法&lt;/p&gt;
&lt;p&gt;getDate()   Returns the day of the month (1-31).&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;rightNow.getDate();&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns 14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;getDay()    Returns the day of the week as a number (0-6, 0=Sunday, 6=Saturday).&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;rightNow.getDay();&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns 4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;getMonth()  Returns the month as a number (0-11, 0=January, 11=December).&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;rightNow.getMonth();&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;getFullYear()   Returns the four-digit year.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;rightNow.getFullYear();&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns 2011&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;getHours()  Returns the hour (0-23).&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;rightNow.getHours();&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns 0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;getMinutes()    Returns the minute (0-59).&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;rightNow.getMinutes();&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns 23&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;getSeconds()    Returns the second (0-59).&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;rightNow.getSeconds();&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns 54&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;getMilliseconds()   Returns the millisecond (0-999).&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;rightNow.getMilliseconds();&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns 650&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;getTime()   Returns the number of milliseconds since midnight January 1, 1970.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;rightNow.getTime();&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns 1113452634650&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;getTimezoneOffset() Returns the time difference in minutes between the computer of user and GMT.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;rightNow.getTimezoneOffset();&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns 240&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;toLocaleString()    Returns the Date object as a string.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;rightNow.toLocaleString();&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns Thursday, April 14,&lt;/span&gt;
&lt;span class="code-line"&gt;//2011 12:23:54 AM&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;toGMTString()   Returns the Date object as a string in GMT timezone.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;rightNow.toGMTString();&lt;/span&gt;
&lt;span class="code-line"&gt;//Returns Thu, 14 Apr 2011&lt;/span&gt;
&lt;span class="code-line"&gt;//04:23:54 UTC&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="4boolean"&gt;4.boolean&lt;/h3&gt;
&lt;p&gt;布尔（逻辑）只能有两个值：true 或 false&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;var x=true&lt;/span&gt;
&lt;span class="code-line"&gt;var y=false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对象&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;var myBoolean=new Boolean()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所有的代码行均会创建初始值为 false 的 Boolean 对象。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;var myBoolean=new Boolean();&lt;/span&gt;
&lt;span class="code-line"&gt;var myBoolean=new Boolean(0);&lt;/span&gt;
&lt;span class="code-line"&gt;var myBoolean=new Boolean(null);&lt;/span&gt;
&lt;span class="code-line"&gt;var myBoolean=new Boolean("");&lt;/span&gt;
&lt;span class="code-line"&gt;var myBoolean=new Boolean(false);&lt;/span&gt;
&lt;span class="code-line"&gt;var myBoolean=new Boolean(NaN);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所有的代码行均会创初始值为 true 的 Boolean 对象：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;var myBoolean=new Boolean(1);&lt;/span&gt;
&lt;span class="code-line"&gt;var myBoolean=new Boolean(true);&lt;/span&gt;
&lt;span class="code-line"&gt;var myBoolean=new Boolean("true");&lt;/span&gt;
&lt;span class="code-line"&gt;var myBoolean=new Boolean("false");&lt;/span&gt;
&lt;span class="code-line"&gt;var myBoolean=new Boolean("Bill Gates");&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="di-wu-bu-fen-domcao-zuo_1"&gt;第五部分: DOM操作&lt;/h2&gt;
&lt;h3 id="dom"&gt;DOM&lt;/h3&gt;
&lt;p&gt;当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。
HTML DOM 模型被构造为对象的树&lt;/p&gt;
&lt;p&gt;HTML DOM 树&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;JavaScript 能够改变页面中的所有 HTML 元素&lt;/span&gt;
&lt;span class="code-line"&gt;JavaScript 能够改变页面中的所有 HTML 属性&lt;/span&gt;
&lt;span class="code-line"&gt;JavaScript 能够改变页面中的所有 CSS 样式&lt;/span&gt;
&lt;span class="code-line"&gt;JavaScript 能够对页面中的所有事件做出反应&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过id查找&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;var x=document.getElementById("intro");&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;本例查找 id="main" 的元素，然后查找 "main" 中的所有 &lt;p&gt; 元素：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;var x=document.getElementById("main");&lt;/span&gt;
&lt;span class="code-line"&gt;var y=x.getElementsByTagName("p");&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改变输出&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;document.write(Date());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改变html&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;document.getElementById(id).innerHTML=new HTML&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改变html属性&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;document.getElementById(id).attribute=new value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改变css&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;document.getElementById(id).style.property=new style&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;HTML Event Handlers&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;onblur ,onchange ,onclick ,ondblclick ,onfocus ,onkeydown ,onkeypress ,onkeyup ,onload ,onload ,onmousedown ,onmousemove ,onmouseout ,onmouseover ,onmouseup ,onreset ,onselect ,onsubmit ,onunload ,onunload&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建节点&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"div1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"p1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;这是一个段落&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"p2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;这是另一个段落&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var para=document.createElement("p");&lt;/span&gt;
&lt;span class="code-line"&gt;var node=document.createTextNode("这是新段落。");&lt;/span&gt;
&lt;span class="code-line"&gt;para.appendChild(node);&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var element=document.getElementById("div1");&lt;/span&gt;
&lt;span class="code-line"&gt;element.appendChild(para);&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除节点&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"div1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"p1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;这是一个段落。&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"p2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;这是另一个段落。&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var parent=document.getElementById("div1");&lt;/span&gt;
&lt;span class="code-line"&gt;var child=document.getElementById("p1");&lt;/span&gt;
&lt;span class="code-line"&gt;parent.removeChild(child);&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="di-liu-bu-fen-qi-ta_1"&gt;第六部分：其他&lt;/h2&gt;
&lt;h3 id="1zheng-ze"&gt;1.正则&lt;/h3&gt;
&lt;p&gt;RegExp 对象用于存储检索模式。
通过 new 关键词来定义 RegExp 对象&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;var patt1=new RegExp("e");&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;RegExp 对象的方法
RegExp 对象有 3 个方法：test()、exec() 以及 compile()。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;var patt1=new RegExp("e");&lt;/span&gt;
&lt;span class="code-line"&gt;patt1.test("The best things in life are free"); //true&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;patt1.exec("The best things in life are free"); //["e"]&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var patt1=new RegExp("e","g");&lt;/span&gt;
&lt;span class="code-line"&gt;do&lt;/span&gt;
&lt;span class="code-line"&gt;{&lt;/span&gt;
&lt;span class="code-line"&gt;    result=patt1.exec("The best things in life are free");&lt;/span&gt;
&lt;span class="code-line"&gt;    document.write(result);&lt;/span&gt;
&lt;span class="code-line"&gt;}while (result!=null)&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;compile() 方法用于改变 RegExp。&lt;/span&gt;
&lt;span class="code-line"&gt;compile() 既可以改变检索模式，也可以添加或删除第二个参数&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var patt1=new RegExp("e");&lt;/span&gt;
&lt;span class="code-line"&gt;document.write(patt1.test("The best things in life are free"));&lt;/span&gt;
&lt;span class="code-line"&gt;patt1.compile("d");&lt;/span&gt;
&lt;span class="code-line"&gt;document.write(patt1.test("The best things in life are free"));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/33054/"&gt;JavaScript中的正则有几个不同于其他语言的地方&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="2thisguan-jian-zi"&gt;2.this关键字&lt;/h3&gt;
&lt;p&gt;"this"是一个特殊的关键字，用在方法中，指向调用该方法的对象。this的值
In JavaScript, as in most object-oriented programming languages, this is a special keyword that is used in methods to refer to the object on which a method is being invoked. The value of this is determined using a simple series of steps:&lt;/p&gt;
&lt;p&gt;1.调用方式是Function.call() 或者 Function.apply(), this将会被赋值为传递给.call()/.apply()的第一个参数.如果第一个参数是null或者undefined,this会指向global object.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// A function invoked using Function.call()&lt;/span&gt;
&lt;span class="code-line"&gt;var myObject = {&lt;/span&gt;
&lt;span class="code-line"&gt;    sayHello: function() {&lt;/span&gt;
&lt;span class="code-line"&gt;        console.log( "Hi! My name is " + this.myName );&lt;/span&gt;
&lt;span class="code-line"&gt;    },&lt;/span&gt;
&lt;span class="code-line"&gt;    myName: "Rebecca"&lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var secondObject = {&lt;/span&gt;
&lt;span class="code-line"&gt;    myName: "Colin"&lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;myObject.sayHello();                    // "Hi! My name is Rebecca"&lt;/span&gt;
&lt;span class="code-line"&gt;myObject.sayHello.call( secondObject ); // "Hi! My name is Colin"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.如果函数调用使用的是Function.bind(), this 会被赋值为传递给.bind()的第一个参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// A function created using Function.bind()&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var myName = "the global object";&lt;/span&gt;
&lt;span class="code-line"&gt;var sayHello = function() {&lt;/span&gt;
&lt;span class="code-line"&gt;    console.log( "Hi! My name is " + this.myName );&lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;span class="code-line"&gt;var myObject = {&lt;/span&gt;
&lt;span class="code-line"&gt;    myName: "Rebecca"&lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;span class="code-line"&gt;var myObjectHello = sayHello.bind( myObject );&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;sayHello();      // "Hi! My name is the global object"&lt;/span&gt;
&lt;span class="code-line"&gt;myObjectHello(); // "Hi! My name is Rebecca"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.如果函数是作为对象的一个方法被调用，this指向该对象&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// A function being attached to an object at runtime.&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var myName = "the global object";&lt;/span&gt;
&lt;span class="code-line"&gt;var sayHello = function() {&lt;/span&gt;
&lt;span class="code-line"&gt;    console.log( "Hi! My name is " + this.myName );&lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;span class="code-line"&gt;var myObject = {&lt;/span&gt;
&lt;span class="code-line"&gt;    myName: "Rebecca"&lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;span class="code-line"&gt;var secondObject = {&lt;/span&gt;
&lt;span class="code-line"&gt;    myName: "Colin"&lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;myObject.sayHello = sayHello;&lt;/span&gt;
&lt;span class="code-line"&gt;secondObject.sayHello = sayHello;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;sayHello();              // "Hi! My name is the global object"&lt;/span&gt;
&lt;span class="code-line"&gt;myObject.sayHello();     // "Hi! My name is Rebecca"&lt;/span&gt;
&lt;span class="code-line"&gt;secondObject.sayHello(); // "Hi! My name is Colin"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当在一个大的命名空间内调用函数，可以通过给一个变量赋值减少代码量，但是，注意方法赋值和对象赋值，在调用时this的区别,可能会会导致bug.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;var myNamespace = {&lt;/span&gt;
&lt;span class="code-line"&gt;    myObject: {&lt;/span&gt;
&lt;span class="code-line"&gt;        sayHello: function() {&lt;/span&gt;
&lt;span class="code-line"&gt;            console.log( "Hi! My name is " + this.myName );&lt;/span&gt;
&lt;span class="code-line"&gt;        },&lt;/span&gt;
&lt;span class="code-line"&gt;        myName: "Rebecca"&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var hello = myNamespace.myObject.sayHello;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;hello(); // "Hi! My name is undefined"&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;or&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var myNamespace = {&lt;/span&gt;
&lt;span class="code-line"&gt;    myObject: {&lt;/span&gt;
&lt;span class="code-line"&gt;        sayHello: function() {&lt;/span&gt;
&lt;span class="code-line"&gt;            console.log( "Hi! My name is " + this.myName );&lt;/span&gt;
&lt;span class="code-line"&gt;        },&lt;/span&gt;
&lt;span class="code-line"&gt;        myName: "Rebecca"&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var obj = myNamespace.myObject;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;obj.sayHello(); // "Hi! My name is Rebecca"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3yi-chang-chu-li"&gt;3.异常处理&lt;/h3&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;try&lt;/span&gt;
&lt;span class="code-line"&gt;{&lt;/span&gt;
&lt;span class="code-line"&gt;    //在这里运行代码&lt;/span&gt;
&lt;span class="code-line"&gt;}catch(err)&lt;/span&gt;
&lt;span class="code-line"&gt;{&lt;/span&gt;
&lt;span class="code-line"&gt;    //在这里处理错误&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;function&lt;/span&gt; &lt;span class="nt"&gt;message&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;try&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;adddlert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Welcome guest!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;err&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"There was an error on this page.\n\n"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="s2"&gt;"Error description: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"\n\n"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="s2"&gt;"Click OK to continue.\n\n"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;throw 语句允许我们创建自定义错误。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;正确的技术术语是：创建或抛出异常（&lt;/span&gt;&lt;span class="nt"&gt;exception&lt;/span&gt;&lt;span class="err"&gt;）。&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;如果把&lt;/span&gt; &lt;span class="nt"&gt;throw&lt;/span&gt; &lt;span class="err"&gt;与&lt;/span&gt; &lt;span class="nt"&gt;try&lt;/span&gt; &lt;span class="err"&gt;和&lt;/span&gt; &lt;span class="nt"&gt;catch&lt;/span&gt; &lt;span class="err"&gt;一起使用，那么您能够控制程序流，并生成自定义的错误消息。&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;语法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;throw&lt;/span&gt; &lt;span class="nt"&gt;exception&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;function&lt;/span&gt; &lt;span class="nt"&gt;myFunction&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;try&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"demo"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="s2"&gt;"empty"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="s2"&gt;"not a number"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="s2"&gt;"too high"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="s2"&gt;"too low"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;err&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mess"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;innerHTML&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Error: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="4zuo-yong-yu"&gt;4.作用域&lt;/h3&gt;
&lt;h4 id="global-scope"&gt;Global Scope&lt;/h4&gt;
&lt;p&gt;如果一个变量或函数是全局的，可以在任意地方获取。对浏览器，全局作用域是window对象。&lt;/p&gt;
&lt;p&gt;如果一个变量在函数外面定义，则这个变量是全局的&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;var x = 9;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;//anywhere&lt;/span&gt;
&lt;span class="code-line"&gt;window.x or x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="local-scope"&gt;Local Scope&lt;/h4&gt;
&lt;p&gt;在函数体中使用var定义的变量，是局部变量&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;function myFunc() {&lt;/span&gt;
&lt;span class="code-line"&gt;    var x = 5;&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;console.log( x ); // ReferenceError: x is not defined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意如果不适用var进行定义，则该变量默认全局&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;function myFunc() {&lt;/span&gt;
&lt;span class="code-line"&gt;    x = 5;&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;console.log( x ); // 5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Immediately-Invoked Function Expressions(IIFE) 可以避免全局变量(立刻定义和调用),在jQuery库中可以看到&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;(function() {&lt;/span&gt;
&lt;span class="code-line"&gt;    var jQuery = { /* All my methods go here. */ };&lt;/span&gt;
&lt;span class="code-line"&gt;    window.jQuery = jQuery;&lt;/span&gt;
&lt;span class="code-line"&gt;})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;局部变量在整个函数内可见，所以对于函数嵌套,内层可以访问外层变量:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;function outer() {&lt;/span&gt;
&lt;span class="code-line"&gt;    var x = 5;&lt;/span&gt;
&lt;span class="code-line"&gt;    function inner() {&lt;/span&gt;
&lt;span class="code-line"&gt;        console.log( x );&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;    inner(); // 5&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;外层不能访问内层变量&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;function outer() {&lt;/span&gt;
&lt;span class="code-line"&gt;    var x = 5;&lt;/span&gt;
&lt;span class="code-line"&gt;    function inner() {&lt;/span&gt;
&lt;span class="code-line"&gt;        console.log( x );&lt;/span&gt;
&lt;span class="code-line"&gt;        var y = 10;&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;    inner(); // 5&lt;/span&gt;
&lt;span class="code-line"&gt;    console.log( y ); // ReferenceError: y is not defined&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在函数中声明变量，没有使用var，javascript将作为全局变量处理，会到全局域去寻找该变量是否定义，如果未预定义，将会在全局域中定义该变量，造成一些不可预期的结果。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// Functions have access to variables defined in the same scope.&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var foo = "hello";&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var sayHello = function() {&lt;/span&gt;
&lt;span class="code-line"&gt;    console.log( foo );&lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;sayHello(); // "hello"&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;console.log( foo ); // "hello"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;全局变量和局部变量可以重名&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;var foo = "world";&lt;/span&gt;
&lt;span class="code-line"&gt;var sayHello = function() {&lt;/span&gt;
&lt;span class="code-line"&gt;    var foo = "hello";&lt;/span&gt;
&lt;span class="code-line"&gt;    console.log( foo );&lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;sayHello(); // "hello"&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;console.log( foo ); // "world"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When, within a function, you reference a variable defined in an outer scope, that function can see changes to the variable's value after the function is defined.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;var myFunction = function() {&lt;/span&gt;
&lt;span class="code-line"&gt;    var foo = "hello";&lt;/span&gt;
&lt;span class="code-line"&gt;    var myFn = function() {&lt;/span&gt;
&lt;span class="code-line"&gt;        console.log( foo ); //指向该变量&lt;/span&gt;
&lt;span class="code-line"&gt;    };&lt;/span&gt;
&lt;span class="code-line"&gt;    foo = "world"; // change 变量对应的值变更了&lt;/span&gt;
&lt;span class="code-line"&gt;    return myFn;&lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var f = myFunction();&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;f(); // "world"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一个复杂的例子演示：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;(function() {&lt;/span&gt;
&lt;span class="code-line"&gt;    var baz = 1;&lt;/span&gt;
&lt;span class="code-line"&gt;    var bim = function() {&lt;/span&gt;
&lt;span class="code-line"&gt;        console.log( baz );&lt;/span&gt;
&lt;span class="code-line"&gt;    };&lt;/span&gt;
&lt;span class="code-line"&gt;    bar = function() {&lt;/span&gt;
&lt;span class="code-line"&gt;        console.log( baz );&lt;/span&gt;
&lt;span class="code-line"&gt;    };&lt;/span&gt;
&lt;span class="code-line"&gt;})();&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;console.log( baz ); // baz is not defined outside of the function, ReferenceError&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;bar(); //  1, 外部可见，全局的&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;bim(); // ReferenceError: bim is not defined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;局部变量会在函数运行以后被删除。&lt;/p&gt;
&lt;p&gt;全局变量会在页面关闭后被删除。&lt;/p&gt;
&lt;h3 id="5bi-bao_1"&gt;5.闭包&lt;/h3&gt;
&lt;p&gt;可以参考 &lt;a href="https://learn.jquery.com/javascript-101/closures/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单例子&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;var buildMultiplier = function(x) {&lt;/span&gt;
&lt;span class="code-line"&gt;    return function(y) {&lt;/span&gt;
&lt;span class="code-line"&gt;        return x * y;&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;var double = buildMultiplier(2);&lt;/span&gt;
&lt;span class="code-line"&gt;var triple = buildMultiplier(3);&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;double(3); // =&amp;gt; 6&lt;/span&gt;
&lt;span class="code-line"&gt;triple(3); // =&amp;gt; 9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Closures are an extension of the concept of scope.&lt;/p&gt;
&lt;p&gt;通过闭包，函数可以获取在函数定义位置作用域范围内的变量&lt;/p&gt;
&lt;p&gt;闭包需要通过实例去理解。&lt;/p&gt;
&lt;p&gt;下面这个例子，最终每个函数的i将会是函数循环结果的最后一个值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// Each function executed within the loop will reference&lt;/span&gt;
&lt;span class="code-line"&gt;// the last value stored in i (5).&lt;/span&gt;
&lt;span class="code-line"&gt;// This won't behave as we want it to - every 100 milliseconds, 5 will alert&lt;/span&gt;
&lt;span class="code-line"&gt;for ( var i = 0; i &amp;lt; 5; i++ ) {&lt;/span&gt;
&lt;span class="code-line"&gt;    setTimeout(function() {&lt;/span&gt;
&lt;span class="code-line"&gt;        alert( i );&lt;/span&gt;
&lt;span class="code-line"&gt;    }, i * 100 );&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;闭包可以避免这种情况，为每个循环建立独立的可见范围--将变量的每个独立值存储在其可见域内。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// Using a closure to create a new private scope&lt;/span&gt;
&lt;span class="code-line"&gt;// fix: “close” the value of i inside createFunction, so it won't change&lt;/span&gt;
&lt;span class="code-line"&gt;var createFunction = function( i ) { //可见范围，i被保存，独立&lt;/span&gt;
&lt;span class="code-line"&gt;    return function() {&lt;/span&gt;
&lt;span class="code-line"&gt;        alert( i );&lt;/span&gt;
&lt;span class="code-line"&gt;    };&lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;for ( var i = 0; i &amp;lt; 5; i++ ) {&lt;/span&gt;
&lt;span class="code-line"&gt;    setTimeout( createFunction( i ), i * 100 );&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;闭包还通常和this关键字配合&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// Using a closure to access inner and outer object instances simultaneously.&lt;/span&gt;
&lt;span class="code-line"&gt;var outerObj = {&lt;/span&gt;
&lt;span class="code-line"&gt;    myName: "outer",&lt;/span&gt;
&lt;span class="code-line"&gt;    outerFunction: function() {&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        // Provide a reference to outerObj through innerFunction's closure&lt;/span&gt;
&lt;span class="code-line"&gt;        var self = this;&lt;/span&gt;
&lt;span class="code-line"&gt;        var innerObj = {&lt;/span&gt;
&lt;span class="code-line"&gt;            myName: "inner",&lt;/span&gt;
&lt;span class="code-line"&gt;            innerFunction: function() {&lt;/span&gt;
&lt;span class="code-line"&gt;                console.log( self.myName, this.myName ); // "outer inner"&lt;/span&gt;
&lt;span class="code-line"&gt;            }&lt;/span&gt;
&lt;span class="code-line"&gt;        };&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        innerObj.innerFunction();&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        console.log( this.myName ); // "outer"&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="6typeoftesting-type"&gt;6.typeof(Testing Type)&lt;/h3&gt;
&lt;p&gt;typeof关键之用于判断一个变量的类型&lt;/p&gt;
&lt;p&gt;type checking&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Testing the type of various variables.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;myFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;myObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nl"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"bar"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"c"&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;myString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;myNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;myRegExp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="n"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// "function"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="n"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// "object"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="n"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// "object" -- Careful!&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="n"&gt;myString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// "string"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="n"&gt;myNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// "number"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="c1"&gt;// "object" -- Careful!&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="n"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// "undefined"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="n"&gt;meh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="c1"&gt;// "undefined" -- undefined variable.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="n"&gt;myRegExp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// "function" or "object" depending on environment.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slice&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;// probably an array (this is called "duck typing")&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;myArray&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s"&gt;"[object Array]"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;// Definitely an array!&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;// This is widely considered as the most robust way&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;// to determine if a specific value is an Array.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="7timers"&gt;7.Timers&lt;/h3&gt;
&lt;p&gt;Timers are started and stopped with the following four methods of the window object:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;setTimeout(code_to_execute, wait_time_in_milliseconds)&lt;/span&gt;
&lt;span class="code-line"&gt;clearTimeout(timer)&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;setInterval(code_to_execute, interval_in_milliseconds)&lt;/span&gt;
&lt;span class="code-line"&gt;clearInterval(interval)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;test&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    var timer;&lt;/span&gt;
&lt;span class="code-line"&gt;    function changeBg(color) {&lt;/span&gt;
&lt;span class="code-line"&gt;        timer = setTimeout(function() { document.bgColor=color; }, 1000);&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    function stopTimer() {&lt;/span&gt;
&lt;span class="code-line"&gt;        clearTimeout(timer);&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"changeBg('red')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Change Background to Red&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"changeBg('white')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Change Background to White&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"stopTimer()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Wait! Don't do it!&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;</content><category term="javaScript"></category></entry></feed>