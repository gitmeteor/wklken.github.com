<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>wklken's blog</title><link href="http://www.wklken.me/" rel="alternate"></link><link href="http://www.wklken.me/feeds/blabla.atom.xml" rel="self"></link><id>http://www.wklken.me/</id><updated>2016-02-16T00:00:00+08:00</updated><entry><title>也许是一个新的开始</title><link href="http://www.wklken.me/posts/2016/02/16/maybe-a-new-start.html" rel="alternate"></link><published>2016-02-16T00:00:00+08:00</published><updated>2016-02-16T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-02-16:posts/2016/02/16/maybe-a-new-start.html</id><summary type="html">&lt;p&gt;也许是一个新的开始吧.&lt;/p&gt;
&lt;p&gt;原先写blog都是深思熟虑, 偶尔发发微博, 以及几乎不发朋友圈.....&lt;/p&gt;
&lt;p&gt;年后, 发现, 其实blog就是个个人吐吐槽, 以及一些积累的地方, 深思熟虑个蛋(好多笔记, 半成品等等蹲在wiki里不见天日, 也不见得有时间完善好)&lt;/p&gt;
&lt;p&gt;所以, 打算开启话唠模式. 至于那些不是很"深思熟虑"的东西, 通过长时间不断迭代来优化吧, 然后会有一些吐槽什么的.&lt;/p&gt;
&lt;p&gt;不大确定有多少人订阅了, 可以取关哈:)&lt;/p&gt;
&lt;p&gt;从此, 不想太多, 看看今年的产出吧. 当然, 尽量保质保量.&lt;/p&gt;
&lt;p&gt;从此文开始(够短吧)&lt;/p&gt;
&lt;p&gt;2016-02-16 于深圳&lt;/p&gt;</summary><category term="blabla"></category></entry><entry><title>我为什么要写博客</title><link href="http://www.wklken.me/posts/2015/09/26/why-i-keep-blogging.html" rel="alternate"></link><published>2015-09-26T00:00:00+08:00</published><updated>2015-09-26T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-09-26:posts/2015/09/26/why-i-keep-blogging.html</id><summary type="html">&lt;p&gt;从七月中旬, 到八月底, 彻彻底底休息了一个半月, 九月初开始找工作, 目测国庆节后才能完成入职开始干活.&lt;/p&gt;
&lt;p&gt;周期略长, 主要节点不好, 哎&lt;/p&gt;
&lt;p&gt;最近在想一个问题, 我为什么要写博客?&lt;/p&gt;
&lt;p&gt;开始写博客, 是在大学期间吧, 当时用的是新浪博客, 写了很多杂七杂八生活的点点滴滴, 临毕业前, 应该是刚从北京实习回学校, 2011年的4月1日(没错是愚人节), 注册了CSDN, 开始了写技术博客&lt;/p&gt;
&lt;p&gt;13年7月从 CSDN 迁移走, 到了独立博客, 主要是那时候CSDN不支持markdown, 而且感觉自己维护一个更为便利些, 便买了主机, 申请了域名, 开始了独立博客的时光.&lt;/p&gt;
&lt;p&gt;到现在, 也有两年了吧.&lt;/p&gt;
&lt;p&gt;现在博客, 每个月UV大概1W的样子. 没有任何推广渠道, 全靠用户回访以及搜索引擎带来的流量.&lt;/p&gt;
&lt;p&gt;&lt;img alt="blog_stats" src="/imgs/blabla/blog_stats.png"/&gt;&lt;/p&gt;
&lt;p&gt;偶尔隔一阵, 便会收到一份donation, 虽不多, 但是每次都会觉得很开心, 就像是隔一阵的惊喜, 也算是给自己的坚持注入了一些动力, 再次感谢各位:)&lt;/p&gt;
&lt;p&gt;回去看了下CSDN, 访问接近90W 次, 排名834......已经放弃维护好久了(两年多了), CSDN 留下了我那一两年青葱的时光.&lt;/p&gt;
&lt;p&gt;很快, 工作四年多了, 时间是把杀猪刀, 改变了很多东西.&lt;/p&gt;
&lt;p&gt;工作四年, 经历了三家公司, 不幸的是后面两家夭折了, 庆幸的是, 做了很多事情, 认识了很多朋友.&lt;/p&gt;
&lt;p&gt;做的事情多, 杂, 也接触了很多东西, 感觉遗憾的是没能完完整整地经历一个公司的发展, 或者一套系统的进化过程.&lt;/p&gt;
&lt;p&gt;四年, 改变了很多, 唯独没变的, 是偶尔会更新下博客, 输出一些东西, 吐吐槽神马的.&lt;/p&gt;
&lt;p&gt;写博客的目的, 对我来说, 不外乎如是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;活得越久, 越发现记忆的不靠谱.&lt;/p&gt;
&lt;p&gt;很难会到过去某一刻, 某个时期的所思所想, 当时的心境, 当时的境遇.&lt;/p&gt;
&lt;p&gt;所以, 记录, 写一写小结, 阶段性看看, 过去&lt;code&gt;无知&lt;/code&gt;/&lt;code&gt;青葱&lt;/code&gt;的自己, 也是必须的.&lt;/p&gt;
&lt;p&gt;当然, 更有效的做法是, 每天坚持写写日记&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分享&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有一些坑, 自己踩过就好......&lt;/p&gt;
&lt;p&gt;而有一些观点, 可以发出来一起看看, 或多或少得到一些感受&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;梳理思路&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我主要的知识管理工具是gollum, 以及evernote作为辅助, 在工作以及学习的过程中, 会碰到某个问题的方方面面, 各种细节, 散而且乱, 分布在不同地方, 而发个博客出来, 主要是可以花一两个小时, 对某块进行汇总, 然后重新梳理, 得到一个较为完整的内容, 顺手从笔记中清掉.&lt;/p&gt;
&lt;p&gt;总之, 类似于一个精粹的过程.&lt;/p&gt;
&lt;p&gt;还有, 例如在读python源码的时候, 读源码, 做笔记, 写注释, 同时还要参考书籍和文档, 往往当时读懂了, 觉得很清晰, 但是过阵子再回去看下, 面对一堆杂乱无从下手, 而出博文的过程, 会顺着思路走, 绘制一些结构图流程图, 再回头看的时候, 往往几分钟就能全盘了然&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搜索&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;gollum和evernote的搜索其实做的都还不错, 但是有时候搜一个点, 得到不止一篇的结果, 往往要点好多次才能找到, 而发博文后, 顺手笔记中清掉, 此时在脑中已经有个印象, 某个点我详细写过什么东西, 那么剩下的只是一键打开博客, 找到那篇文章即可.&lt;/p&gt;
&lt;p&gt;另一个好处是, gollum和evernote是本地的, 在别人电脑上处理问题的时候, 博客反正到哪都能访问到&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;写博的过程, 更多的是自己记录, 思考, 成长的过程, 坚持下来, 感觉还是收获颇多.&lt;/p&gt;
&lt;p&gt;明确目的, 不要把这个写博客的日常变成功利, 其实这次找工作的过程发现, 写博客或许加分了, 但是就是过简历那个环节而已, 太过功利会没必要, 花费大量时间并不值得. 更多的是, 做事情, 把事情做好, 然后得到一些积累和感悟, 而不是反之. &lt;/p&gt;
&lt;p&gt;PS:  其实github开源也是一样, 做自己感兴趣的事情, 而不是去为了开源而开源&lt;/p&gt;
&lt;p&gt;后续, 会主要关注两方面, 一块是偏底层的东西, 构建基础的知识体系, 另一块是做业务/项目过程中的总结.&lt;/p&gt;
&lt;p&gt;编码不易, 且行且珍惜, 共勉&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2015-09-26 于深圳&lt;/p&gt;</summary><category term="blabla"></category></entry><entry><title>"活动"设计的一些trick</title><link href="http://www.wklken.me/posts/2015/08/28/tricks-about-promotion-codes.html" rel="alternate"></link><published>2015-08-28T00:00:00+08:00</published><updated>2015-08-28T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-08-28:posts/2015/08/28/tricks-about-promotion-codes.html</id><summary type="html">&lt;p&gt;在梳理过去做过的项目&lt;/p&gt;
&lt;p&gt;之前做项目的时候, 十个月期间做了不少活动, 类型比较多, 有推广/抽奖/小游戏等等.&lt;/p&gt;
&lt;p&gt;有些活动需求明确一气呵成, 也有些活动需求模糊一度推倒重来, 还有的活动被刷了&amp;gt;&lt;em&gt;&amp;lt;#&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;好吧, 来说说活动&lt;/p&gt;
&lt;p&gt;一些想法, 可以是技术, 非技术&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="_1"&gt;目的&lt;/h3&gt;
&lt;p&gt;活动的目的是什么? 有没有存在的意义?&lt;/p&gt;
&lt;p&gt;存在由于没有想清楚, 耗费人力物力搞了结果不尽人意......所以目的应该先想清楚, 并且明学下来&lt;/p&gt;
&lt;h3 id="_2"&gt;活动开发简要流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;需求分析: 整体流程, 用户侧细节, 管理侧需求, 统计需求等等, 对整个流程达成一致, 对每个环节的条件/处理逻辑/后续出口等等明确下来, 对一些资质/数字限制等确定下来&lt;/li&gt;
&lt;li&gt;设计出图/后端建模-逻辑代码-API/前端开发&lt;/li&gt;
&lt;li&gt;测试环境上线&lt;/li&gt;
&lt;li&gt;内部测试, 试玩, 针对活动本身给意见. 测试人员测试, 针对逻辑本身, 同时进行网速测试(2g/3g/wifi) / 浏览器测试 / 不同手机-系统测试&lt;/li&gt;
&lt;li&gt;修正迭代, 测试&lt;/li&gt;
&lt;li&gt;正式上线&lt;/li&gt;
&lt;li&gt;管理侧/统计侧上线&lt;/li&gt;
&lt;li&gt;推广/监控&lt;/li&gt;
&lt;li&gt;活动结束&lt;/li&gt;
&lt;li&gt;奖品派发/数据统计等&lt;/li&gt;
&lt;li&gt;活动下线&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="quick-and-maybe-dirty"&gt;quick and maybe dirty&lt;/h3&gt;
&lt;p&gt;由于&lt;code&gt;活动&lt;/code&gt;本身的性质, 这类代码逻辑属于&lt;code&gt;短平快&lt;/code&gt;一类的.&lt;/p&gt;
&lt;p&gt;简而言之: 怎么快怎么来&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以不要考虑复用&lt;/li&gt;
&lt;li&gt;当然, 有些代码是复用的, 例如CRUD/get some list/check permission/call base service等等&lt;/li&gt;
&lt;li&gt;不要考虑将来/以后, 很多活动上了就下了, 不会有所谓的&lt;code&gt;将来&lt;/code&gt;, 切忌过渡设计, 空耗费许多精力没有必要&lt;/li&gt;
&lt;li&gt;要快&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_3"&gt;注意代码/数据/部署隔离&lt;/h3&gt;
&lt;p&gt;前面说过, 很多活动逻辑没有将来&lt;/p&gt;
&lt;p&gt;所以, 活动的代码尽量独立, 保证随写随测, 随上随下, 尽量隔离于主体代码之外, 这样上下线也方便&lt;/p&gt;
&lt;p&gt;当然, 不可能完全独立, 依赖外部尽量使用独立的服务接口, 被外部依赖提供也尽量通过提供接口解决(情况很少)&lt;/p&gt;
&lt;p&gt;数据独立, 包括, 数据库实例/redis or memcached/文件等, 活动需要记录一些数据, 和主体业务独立开来, 尽量不共用, 有条件的话单独提供实例&lt;/p&gt;
&lt;p&gt;部署隔离, 尽量不要和关键服务在同一台机器或者共用带宽, 由于&lt;code&gt;活动&lt;/code&gt;本身的特质, 可能带来突发的流量, 可能导致带宽/IO/缓存占用/机器负载等变高, 会影响到其他服务.(可以给定独立url, 通过反代定到活动服务)&lt;/p&gt;
&lt;h3 id="_4"&gt;开发注意&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;做好缓存&lt;/li&gt;
&lt;li&gt;每个接口做好资质/权限控制, 这类逻辑放在api代码的前面(判断条件放到最前面), fail fast, 验证通过后才进入主体逻辑代码&lt;/li&gt;
&lt;li&gt;友好的异常处理/用户提示&lt;/li&gt;
&lt;li&gt;后端需要考虑&lt;code&gt;防刷&lt;/code&gt;, 前端需要处理下&lt;code&gt;重复提交&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;做好事务控制(并发), 特别是涉及数字增减的情况, 例如奖品数&lt;/li&gt;
&lt;li&gt;涉及步骤的活动, 做好流程限制, 第一步-第二步-第三步......, 防止用户跳过某一步直接进入下一步.(可以通过签加密token的方式)&lt;/li&gt;
&lt;li&gt;图片, 尽量放到 CDN (血的教训, 前端一张背景图导致带宽被跑满, 后续用户进不来)&lt;/li&gt;
&lt;li&gt;需要有一套成熟的统计系统, 活动数据直接发送到统计系统, 由统计系统统一出数据&lt;/li&gt;
&lt;li&gt;对于关键性的步骤/数据, 可以记日志&lt;/li&gt;
&lt;li&gt;有必要的话, 做成一期一期的, 有开始结束时间, 自动切换(有些复杂的活动)&lt;/li&gt;
&lt;li&gt;有必要的话, (传说中的开关)提供方便的配置或者入口, 可以一键上下线活动/奖品(valid/invalid/shutdown)&lt;/li&gt;
&lt;li&gt;对于关键性的代码, 做好注释, 例如一些限制逻辑/数量等等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_5"&gt;学会打时间差&lt;/h3&gt;
&lt;p&gt;很多活动, 可能是热点? 节日? 等等, 时效性比较强的.&lt;/p&gt;
&lt;p&gt;然而, 当活动逻辑很复杂的时候, 又要在规定时间内上线, 这时候可以仔细切分需求,  分不同时间上线.&lt;/p&gt;
&lt;p&gt;例如, 一个玩游戏/抽奖/兑奖的活动, 可能分为两部分, 用户侧和管理侧, 用户侧逻辑&lt;code&gt;玩游戏/兑奖/查看是否获奖&lt;/code&gt;, 管理侧&lt;code&gt;查看获奖情况/颁奖/新增用户统计/渠道统计/流量统计&lt;/code&gt;等等&lt;/p&gt;
&lt;p&gt;那么, 可以先保证用户侧完成, 同时加入向统计系统发送统计数据的接口, 然后上线, 保证用户侧主体流程. 上线后开始开发管理侧, 管理侧可以按照运营优先级处理, 例如要查看实时统计信息的话, 先做统计, 保证推广效果, 获奖及颁奖可以稍稍押后, 作为第三阶段上线(如果活动兑奖都是在一个周期结束的话)&lt;/p&gt;
&lt;p&gt;例如, 要发奖数据, 如果没有管理后台, 直接库里导一份出来就是了. 其实这时候应该思考, 要不要花力气做管理后台, 大不了活动结束手工操作一下, 十分钟.&lt;/p&gt;
&lt;h3 id="_6"&gt;下线&lt;/h3&gt;
&lt;p&gt;额, 活动做完, 要下线了.&lt;/p&gt;
&lt;p&gt;如果程序是带日期限制的, 到点了自动结束, 提示用户活动结束, 活动流程无法走下去.&lt;/p&gt;
&lt;p&gt;如果需要人肉, 直接将外网入口去掉即可.&lt;/p&gt;
&lt;p&gt;然后, 可以考虑后续了&lt;/p&gt;
&lt;p&gt;首先, 要确认, 该记录的统计数据记录了, 该分析的分析了, 该发奖的也发奖了......&lt;/p&gt;
&lt;p&gt;首先, 备份代码到活动代码仓库(供后续参考/复用, 防止雷同逻辑/代码要重写), 然后从代码库删除.&lt;/p&gt;
&lt;p&gt;线上, 备份数据到备份服务器, 包括数据库数据/日志/文件等等, 如果缓存中有需要dump的, dump出来. 然后下线数据库, 清空缓存, 日志等&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;活动, 很大程度上是一堆&lt;code&gt;临时&lt;/code&gt;而&lt;code&gt;无用&lt;/code&gt;并且&lt;code&gt;没有技术含量&lt;/code&gt;, 而且非常&lt;code&gt;短命&lt;/code&gt;的代码组成的, 做多了容易烦躁, 最好一个项目组里轮流处理, 当然有人认领更好. &lt;/p&gt;
&lt;p&gt;活动成不成功, 决定因素很多, 但无论如何, 下线前做好review, 防止重复犯错&lt;/p&gt;
&lt;p&gt;就这些&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2015-08-28&lt;/p&gt;</summary><category term="blabla"></category></entry><entry><title>关于知识管理工具的思考</title><link href="http://www.wklken.me/posts/2015/05/02/about-knowledge-manage-tools.html" rel="alternate"></link><published>2015-05-02T00:00:00+08:00</published><updated>2015-05-02T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-05-02:posts/2015/05/02/about-knowledge-manage-tools.html</id><summary type="html">&lt;p&gt;毕业快四年了,  测试一年半, 后端开发两年半, 时间如梭.&lt;/p&gt;
&lt;p&gt;回顾这些年, 笔记什么的, 是一部漫长的&lt;code&gt;迁移&lt;/code&gt;史/血泪史, 如果能早些学习git/markdown等, 能早些了解到一些工具, 应该能省下不少时间吧.&lt;/p&gt;
&lt;p&gt;汇总整理下自己所使用过的知识管理工具&lt;/p&gt;
&lt;p&gt;工具的目标: 提升效率&lt;/p&gt;
&lt;p&gt;而我们的目的很简单&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方便快速收集/记录/整理/沉淀&lt;/li&gt;
&lt;li&gt;快速搜索&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="mywiki" src="/imgs/blabla/mywiki.png"/&gt;&lt;/p&gt;
&lt;h1 id="_1"&gt;手抄笔记&lt;/h1&gt;
&lt;p&gt;大学那段时间&lt;/p&gt;
&lt;p&gt;那时候, 学习&lt;code&gt;linux&lt;/code&gt;, 学习&lt;code&gt;vim&lt;/code&gt;,  学习&lt;code&gt;java/jsp/ssh....&lt;/code&gt;, 学习&lt;code&gt;xml&lt;/code&gt;等等, 大多数情况下, 都是看书+手抄笔记大法, 那时候完全没有意识去对知识进行组织和整理, 几年下来, 积累了各类笔记, 一大堆, 过年回家还发现当时学习java的六七本笔记, 还有oracle, 还有不知道什么时候做的c语言学习笔记(完全忘了).&lt;/p&gt;
&lt;p&gt;手抄, 现在回过头来, 费时费力, 效率极低, 但是就当时环境而言, 不失为一种好的做法(相对于啥都没记来说), &lt;code&gt;好记性不如烂笔头&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;而且, 上课/参加培训等等, 都通过笔记来记录&lt;/p&gt;
&lt;p&gt;手抄的做法, 太过古老, 如果是非技术书籍, 抑或个人喜欢纸质书籍, 不失为一种好的做法. 但是技术书籍, 手抄太过低效, 不易整理, 更不易搜索, 看似积累了很多, 实际沉淀不多.&lt;/p&gt;
&lt;h1 id="word"&gt;word&lt;/h1&gt;
&lt;p&gt;到毕业做测试一年多, 那时大多数情况下是windows系统, 毕业那会刚刚把系统转到ubuntu, 但是工作环境主要还是windows, 用终端连接主机工作.&lt;/p&gt;
&lt;p&gt;正式参加工作, 虽然还经常买纸质书, 但是正儿八经系统啃书的机会相当少, 大部分是工作中碎片化学习的东西, 所以&lt;code&gt;手抄笔记&lt;/code&gt;完全从生活中消失了&lt;/p&gt;
&lt;p&gt;这时候, 开始有意识记录使用电脑记录, 以及整理汇总一些东西.&lt;/p&gt;
&lt;p&gt;这段时间, 系统性整理了linux &amp;amp; shell笔记/vim笔记等, 测试理论, python入门等等.  工作中还是svn, 对git完全没有概念,  更别说markdown了.&lt;/p&gt;
&lt;p&gt;这时候笔记以word形式归总在目录下, 通过金山快盘同步, 后来迁到dropbox了&lt;/p&gt;
&lt;p&gt;那时候evernote/有道笔记还刚刚火起, 对云端没有太多需求, 没怎么关注&lt;/p&gt;
&lt;p&gt;word记录, 相对手抄效率略高, 也方便整理复习, 搜索功能有限.&lt;/p&gt;
&lt;h1 id="-"&gt;有道笔记 - 印象笔记&lt;/h1&gt;
&lt;p&gt;学习markdown了, 也开始玩github, 这时候云笔记开始火了, 刚好, 开始玩微博, 对各种人各种关注, 天天刷微博, 这个习惯延续至今.&lt;/p&gt;
&lt;p&gt;其实用得最多的只有一个功能: 网页剪藏&lt;/p&gt;
&lt;p&gt;每个人都会经历这么一个阶段, 碰到各种资源信息, 疯狂收集, 不管有用没用, 先搞下来再说.&lt;/p&gt;
&lt;p&gt;然后, 发现有3000+剪藏, 微博上2000+收藏, 后来觉得有道不足够靠谱, 丢过笔记,  本着&lt;code&gt;折腾&lt;/code&gt;的信念, 开始迁移笔记, 3000+剪藏只能以尽量高效的方式废弃: &lt;code&gt;当前不涉及不会接触短期内也不会关注的不管好不好以后有没有用全部删掉&lt;/code&gt;, 这样, 完成了自己的折腾史.&lt;/p&gt;
&lt;p&gt;除了剪藏, 最大的功能就是云同步了, 公司电脑和家里电脑同步. 那时候还在用android机, 移动端记录的需求倒是不怎么强烈&lt;/p&gt;
&lt;p&gt;这期间, 明白了&lt;code&gt;资源再多, 无用就是无用&lt;/code&gt;, 心态上改变了, 微博停止了点&lt;code&gt;收藏&lt;/code&gt;, 那2000+收藏, 也就废弃了. 另外, 也开始进行&lt;code&gt;关注&lt;/code&gt;的整理, 获取有效而稳定的信息流.&lt;/p&gt;
&lt;p&gt;PS: 云笔记最坑的是同步, 然后你发现丢了.....还有, 同步, 你发现冲突了, 然后在两份文件里面diff......都经历过, 心塞&lt;/p&gt;
&lt;h1 id="-ulysess"&gt;印象笔记 - Ulysess&lt;/h1&gt;
&lt;p&gt;印象笔记, 用了一段时间, 这时候也换了&lt;code&gt;mac&lt;/code&gt;和&lt;code&gt;iphone&lt;/code&gt;, 以及后来&lt;code&gt;ipad&lt;/code&gt;, 开始随时记录.&lt;/p&gt;
&lt;p&gt;但是用了一段时间, 发现一个问题: 不支持markdown&lt;/p&gt;
&lt;p&gt;后来, 又有一个问题: 代码高亮也不支持&lt;/p&gt;
&lt;p&gt;后来的后来, 发现: 这编辑功能也太渣了吧&lt;/p&gt;
&lt;p&gt;这时候, 刚好博客都迁移到自己站点, 全markdown静态.&lt;/p&gt;
&lt;p&gt;想着技术部分的笔记是否有一个更好的编辑/展现方式.&lt;/p&gt;
&lt;p&gt;也正好, 这时候对mac app有着一股狂热, 虽然现在过去了, 但是当时刚刚使用mac, 感受到了好处, 开始折腾&lt;code&gt;各类工具&lt;/code&gt;, 正好碰上了&lt;code&gt;ulysess&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这时候, 感觉技术笔记迁移到上面会更好, 然后逐步迁移.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;no zuo no die&lt;/code&gt;,  展现不错, 支持markdown, 支持高亮, 对于外貌党来说, 很赞的&lt;code&gt;编辑器&lt;/code&gt;, 是的, 迁完之后, 才想起来, 这货是个编辑器, 不是&lt;code&gt;笔记&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;由于搜索太弱, 不支持多端等等情况, 年前有发生了一次全部笔记给我double了一份, 老天, 几百篇笔记都变成双份了. 我花了一整天时间手工删除重复笔记. (目测可能是icloud的锅)&lt;/p&gt;
&lt;p&gt;死心了, 接着迁移&lt;/p&gt;
&lt;h1 id="wiznote"&gt;WizNote&lt;/h1&gt;
&lt;p&gt;为知笔记, 口碑不错, 试用了几天&lt;/p&gt;
&lt;p&gt;支持markdown, 目测是云笔记系列为数不多能支持这个的.&lt;/p&gt;
&lt;p&gt;然后, 为了&lt;code&gt;弃用&lt;/code&gt; ulysess, 花了点时间迁移完(ulysess作为编辑器还是很赞的, 还在用).&lt;/p&gt;
&lt;p&gt;用着用着, 发现这markdown, 这剪藏, 似乎没有那么&lt;code&gt;理想&lt;/code&gt;, 体验不佳, 用得越多越感觉到&lt;/p&gt;
&lt;p&gt;这时候, 搬了一回家, 发现搬书, 完全是一个自虐的活. 而且很多大部头看过后都不在打开, 很多书被我脱水了也没有阅读价值了......开始转向电子书, 多看&lt;/p&gt;
&lt;p&gt;这时候, 开始思考.......然后, 迁移&lt;/p&gt;
&lt;h1 id="_2"&gt;分级的知识管理&lt;/h1&gt;
&lt;p&gt;后来, 到了现在的情况: 分级, 邮件/evernote/gollum&lt;/p&gt;
&lt;h4 id="1"&gt;1. 收集&lt;/h4&gt;
&lt;p&gt;要求: 方便, 阅读格式ok, 不丢&lt;/p&gt;
&lt;p&gt;选择: Evernote国际版, 有条件上个高级版, 别问我为啥不用印象笔记&lt;/p&gt;
&lt;p&gt;专门建立一个笔记本: Inbox, 对于碰到的感兴趣的东西, 一键剪藏, 或者分享到evernote, 简单直接有效, 这点是所有云笔记中做的最好的&lt;/p&gt;
&lt;p&gt;另外, 支持多看读书笔记同步, 感受到这个世界深深地温暖&lt;/p&gt;
&lt;p&gt;PS: 对于微博的处理, 额, 我现在是这么干的: "分享到-邮件", 给自己发邮件, 然后定期处理:), 很有效.(使用unibox, 同一个发件人的邮件都在一个对话窗口里面, 很好处理 )&lt;/p&gt;
&lt;h4 id="2"&gt;2. 整理&lt;/h4&gt;
&lt;p&gt;要求: 易用, 高效&lt;/p&gt;
&lt;p&gt;选择: evernote, mindnode pro, gollum&lt;/p&gt;
&lt;p&gt;主要是一些点, 标注, 做思维导图&lt;/p&gt;
&lt;p&gt;对于观点/经验等等东西, 可以阅读梳理后, 放置到evernote&lt;/p&gt;
&lt;p&gt;对于技术类/干货类东西, 放evernote&lt;/p&gt;
&lt;h4 id="3"&gt;3. 沉淀&lt;/h4&gt;
&lt;p&gt;要求: 高效&lt;/p&gt;
&lt;p&gt;选择: evernote, gollum&lt;/p&gt;
&lt;p&gt;沉淀是再次提取思考的过程, 还是evernote&lt;/p&gt;
&lt;p&gt;不过, 对于技术类东西, 其实对云同步要求不需要那么高, 所以选择了自建wiki, 写完markdown往目录一扔, 就可以在本地web server上看到, 搜索等等, 是对技术/代码沉淀的最佳工具&lt;/p&gt;
&lt;h4 id="4"&gt;4. 搜索&lt;/h4&gt;
&lt;p&gt;要求: 精准高效&lt;/p&gt;
&lt;p&gt;选择: evernote, gollum&lt;/p&gt;
&lt;p&gt;用一下就知道了&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;这完全是一部&lt;code&gt;折腾&lt;/code&gt;的血泪史, 只有不断经历, 才能进步, 进化, 最终找到适合自己的方式.&lt;/p&gt;
&lt;p&gt;没有最好的方法, 只有最合适的方法, 对工具同理, 所以在整个过程中, 还是建议, 明确自己的需求, 要解决的问题等, 多关注一些东西, 多尝试.&lt;/p&gt;
&lt;p&gt;好了, 就这些:)&lt;/p&gt;
&lt;p&gt;2015-05-02&lt;/p&gt;
&lt;p&gt;wklken 于深圳&lt;/p&gt;</summary><category term="blabla"></category></entry></feed>