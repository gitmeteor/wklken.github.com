<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>wklken's blog - redis</title><link href="http://www.wklken.me/" rel="alternate"></link><link href="http://www.wklken.me/feeds/redis.atom.xml" rel="self"></link><id>http://www.wklken.me/</id><updated>2013-10-19T00:00:00+08:00</updated><entry><title>Redis基础笔记</title><link href="http://www.wklken.me/posts/2013/10/19/redis-base.html" rel="alternate"></link><published>2013-10-19T00:00:00+08:00</published><updated>2013-10-19T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-10-19:/posts/2013/10/19/redis-base.html</id><summary type="html">&lt;h2 id="zi-yuan-lian-jie"&gt;资源链接&lt;/h2&gt;
&lt;p&gt;推荐书籍:《Redis入门指南》&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;资源列表:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;redis命令速查&lt;a href="http://redis.io/commands"&gt;command&lt;/a&gt; |
             &lt;a href="http://redis.cn/commands.html"&gt;CMD索引-中文&lt;/a&gt; |
             &lt;a href="http://redis.readthedocs.org/en/latest/"&gt;CMD树-中文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis源码&lt;a href="https://github.com/antirez/redis"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载地址&lt;a href="http://redis.io/download"&gt;redis.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Little Redis book &lt;a href="https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis资料概要 @江南白衣 &lt;a href="https://github.com/springside/springside4/wiki/redis"&gt;gist&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis资料汇总专题 &lt;a href="http://blog.nosqlfan.com/html/3537.html"&gt;nosqlfan&lt;/a&gt; (这个站有很多文章)&lt;/p&gt;
&lt;p&gt;redis的设计与实现 &lt;a href="http://www.redisbook.com/en/latest/"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis2.6带注释源码 &lt;a href="https://github.com/huangz1990/annotated_redis_source"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis 各种语言clients&lt;a href="http://redis.io/clients"&gt;clients&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python redis cli &lt;a href="https://github.com/andymccurdy/redis-py"&gt;redis-py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;网络文章汇总 &lt;a href="http://www.redis.cn/article.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文章列表：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;十五分钟介绍Redis数据结构  &lt;a href="http://blog.nosqlfan.com/html/3202.html?ref=rediszt"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis的订阅与发布 &lt;a href="http://www.redisbook.com/en/latest/feature/pubsub.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis之七种武器 &lt;a href="http://blog.nosqlfan.com/html/2942.html?ref=rediszt"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用Redis的五个注意事项 &lt;a href="http://blog.nosqlfan.com/html/3705.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis源码分析系列文章 &lt;a href="http://blog.nosqlfan.com/html/2949.html?ref=rediszt"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Largest …&lt;/p&gt;</summary><content type="html">&lt;h2 id="zi-yuan-lian-jie"&gt;资源链接&lt;/h2&gt;
&lt;p&gt;推荐书籍:《Redis入门指南》&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;资源列表:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;redis命令速查&lt;a href="http://redis.io/commands"&gt;command&lt;/a&gt; |
             &lt;a href="http://redis.cn/commands.html"&gt;CMD索引-中文&lt;/a&gt; |
             &lt;a href="http://redis.readthedocs.org/en/latest/"&gt;CMD树-中文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis源码&lt;a href="https://github.com/antirez/redis"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载地址&lt;a href="http://redis.io/download"&gt;redis.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Little Redis book &lt;a href="https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis资料概要 @江南白衣 &lt;a href="https://github.com/springside/springside4/wiki/redis"&gt;gist&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis资料汇总专题 &lt;a href="http://blog.nosqlfan.com/html/3537.html"&gt;nosqlfan&lt;/a&gt; (这个站有很多文章)&lt;/p&gt;
&lt;p&gt;redis的设计与实现 &lt;a href="http://www.redisbook.com/en/latest/"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis2.6带注释源码 &lt;a href="https://github.com/huangz1990/annotated_redis_source"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis 各种语言clients&lt;a href="http://redis.io/clients"&gt;clients&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python redis cli &lt;a href="https://github.com/andymccurdy/redis-py"&gt;redis-py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;网络文章汇总 &lt;a href="http://www.redis.cn/article.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文章列表：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;十五分钟介绍Redis数据结构  &lt;a href="http://blog.nosqlfan.com/html/3202.html?ref=rediszt"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis的订阅与发布 &lt;a href="http://www.redisbook.com/en/latest/feature/pubsub.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis之七种武器 &lt;a href="http://blog.nosqlfan.com/html/2942.html?ref=rediszt"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用Redis的五个注意事项 &lt;a href="http://blog.nosqlfan.com/html/3705.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis源码分析系列文章 &lt;a href="http://blog.nosqlfan.com/html/2949.html?ref=rediszt"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Largest Redis Clusters Ever &lt;a href="http://www.xdata.me/?p=301"&gt;入口&lt;/a&gt; (使用场景)&lt;/p&gt;
&lt;p&gt;成人网站YouPorn使用Redis之经验谈 &lt;a href="http://blog.jobbole.com/44629/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相关项目&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Redis监控web工具 &lt;a href="https://github.com/steelThread/redmon"&gt;redmon&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="jian-jie"&gt;简介&lt;/h2&gt;
&lt;h3 id="jian-jie_1"&gt;简介&lt;/h3&gt;
&lt;p&gt;Redis(REmote DIctionary Server),远程字典服务器，以字典结构存储数据，允许通过TCP协议读取字典中内容. 高性能键值对数据库&lt;/p&gt;
&lt;p&gt;作用：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.缓存系统： 可以为每个键设置TTL(Time To Live),生存时间到期后键会自动被删除
             可限定数据占用最大内存空间，数据大道空间限制后自动按照一定规则淘汰不需要键
2.任务队列： redis列表类型可以用来实现队列, 支持阻塞式读取，很容易用作高性能队列，还支持“发布/订阅“消息的模式
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.Redis中, 所有数据都存储在内存中, 但提供了持久化支持, 内存中数据可以异步写入硬盘, 不影响现有服务
2.与memcached对比, redis单线程模型, memcached支持多线程. 但redis支持高级数据类型和持久化
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="an-zhuang"&gt;安装&lt;/h3&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.wget http://download.redis.io/releases/redis-2.6.16.tar.gz
2.tar -xzvf redis-2.6.16.tar.gz
3.cd redis-2.6.16
4.make
5.make install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;osx&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install redis
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装后，在/usr/local/bin下面有&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;redis-server     服务器, 重点
redis-cli        命令行客户端, 重点

redis-benchmark  性能测试工具
redis-check-aof  AOF文件修复工具
redis-check-dump RDB文件检查工具
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动&lt;/p&gt;
&lt;p&gt;直接启动&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;redis-server #默认6379
redis-server --port 6380
# 启动命令中配置将覆盖配置文件中同名参数
redis-server /path/to/redis.conf --loglevel warning
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过初始化脚本运行(生产环境)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;在安装包目录redis-2.6.16/utils/redis_init_script

1.将脚本复制到/etc/init.d目录下，文件名为 redis_端口号, 修改文件第六行 REDISPORT为相同端口号
2.建立目录
    /etc/redis           存放配置文件
    /var/redis/端口号    存放持久化文件
3.修改配置文件
    将配置文件redis-2.6.16/redis.conf 复制到/etc/redis目录下，以端口号命名 e.g.  6379.conf
    修改配置文件中部分参数
        daemonize   yes                         使redis以守护进程模式运行
        pidfile     /var/run/redis_端口号.pid   设置redis的PID文件按位置
        port        端口号                      设置监听的端口号
        dir         /var/redis/端口号           设置持久化文件存放位置
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;停止&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;redis-cli SHUTDOWN
//server断开所有客户端连接, 根据配置执行持久化, 最后退出
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Redis命令行客户端&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;发送命令：
    redis-cli -h 127.0.0.1 -p 6379
    redis-cli PING
    redis-cli
命令返回值
    状态回复，e.g.  &amp;gt;PING
    错误恢复, e.g.  &amp;gt;ECMD
    整数回复, e.g.  &amp;gt;INCR foo
    字符串回复，e.g. &amp;gt;GET foo   &amp;gt;GET notexists`
    多行字符串回复，e.g. &amp;gt;KEYS *
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="wu-chong-shu-ju-lei-xing-ji-xiang-ying-ming-ling_1"&gt;五种数据类型及相应命令&lt;/h2&gt;
&lt;p&gt;基础命令(redis-cli)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回符合规则的键名列表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pattern支持通配符, ? * [] 等, 会遍历所有键, 当键的数量较多时影响性能&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;KEYS pattern
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SET bar 1
&amp;gt;KEYS *
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;判断一个键是否存在&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回，0不存在，1存在&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;EXISTS key
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; EXISTS bar
(integer) 1
127.0.0.1:6379&amp;gt; EXISTS foo
(integer) 0
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;删除键&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以删除多个键, 返回删除的个数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;DEL key [key ...]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; DEL bar
(integer) 1
127.0.0.1:6379&amp;gt; DEL bar
(integer) 0
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;获取键值的数据类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回string,hash(散列),list(列表),set(集合),zset(有序集合)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;TYPE key
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; SET bar 1
OK
127.0.0.1:6379&amp;gt; TYPE bar
string
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="1-zi-fu-chuan-lei-xing"&gt;1. 字符串类型&lt;/h3&gt;
&lt;p&gt;最基本类型, 能存储任何形式/编码字符串, 包括二进制. 允许存储最大容量是512M&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;赋值和取值命令&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SET key value
&amp;gt;GET key
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; SET hi "hello world"
OK
127.0.0.1:6379&amp;gt; GET hi
"hello world"
127.0.0.1:6379&amp;gt; GET abc
(nil)
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;递增数字(当存储的字符串是整数形式时)&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;当操作键不存在时，默认值0，第一次递增后结果1，当键值不是整数时，报错
&amp;gt;INCR key
原子操作，可用于类似访问量统计, 自增id

&amp;gt;INCRBY key increment
&amp;gt;INCRBY bar 2
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; INCR abc
(integer) 1
127.0.0.1:6379&amp;gt; GET abc
"1"
127.0.0.1:6379&amp;gt; INCRBY abc 2
(integer) 3
127.0.0.1:6379&amp;gt; GET abc
"3"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;减少数字&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;DECR key
&amp;gt;DECRBY key decrement
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; DECR abc
(integer) 2
127.0.0.1:6379&amp;gt; DECRBY abc 2
(integer) 0
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;浮点数&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;INCRBYFLOAT key increment
&amp;gt;INCRBYFLOAT bar 2.7
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; GET bar
"1"
127.0.0.1:6379&amp;gt; INCRBYFLOAT bar 1.5
"2.5"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;向尾部追加&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;返回追加字符串长度

&amp;gt;APPEND key value
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SET key hello
&amp;gt;APPEND key "world"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;获取字符串长度&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;STRLEN key
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; GET hi
"hello world"
127.0.0.1:6379&amp;gt; STRLEN hi
(integer) 11
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;同时设置，获取多个键值&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;MGET key [key ...]
&amp;gt;MSET key value [key value ...]
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; MSET k1 v1 k2 v2
OK
127.0.0.1:6379&amp;gt; GET k1
"v1"
127.0.0.1:6379&amp;gt; MGET k1 k2
1) "v1"
2) "v2"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;位操作&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;GETBIT key offset
&amp;gt;SETBIT key offset value

&amp;gt;BITCOUNT key [start] [end] #获取值为1的二进制位个数

&amp;gt;BITOP operation destkey key [key ...] #对多个字符串类型键进行位运算, 并将结果存储到destkey
e.g. BITOP OR res fol fo2
    GET res
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a  97 01100001

127.0.0.1:6379&amp;gt; SET k 'a'
OK
127.0.0.1:6379&amp;gt; GET k
"a"

127.0.0.1:6379&amp;gt; GETBIT k 0
(integer) 0
127.0.0.1:6379&amp;gt; GETBIT k 1
(integer) 1

127.0.0.1:6379&amp;gt; BITCOUNT k
(integer) 3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;BP: redis对键的命名，  对象类型:对象id:对象属性&lt;/p&gt;
&lt;h3 id="2-san-lie-lei-xing"&gt;2. 散列类型&lt;/h3&gt;
&lt;p&gt;一种字典结构，其存储了字段(field)和字段值映射，但字段值只能是字符串，不支持其他数据类型(即散列类型不支持数据类型嵌套)&lt;/p&gt;
&lt;p&gt;散列类型适合存储对象&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;对象类型:id - 对象属性 - 对象属性值
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;基本命令&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;HSET key field value
&amp;gt;HGET key field
#HSET不区分插入更新

&amp;gt;HMSET key field value [field value ...]
&amp;gt;HMGET key field [field ...]

&amp;gt;HGETALL key
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; HSET car name bmw
(integer) 1
127.0.0.1:6379&amp;gt; HGET car name
"bmw"

127.0.0.1:6379&amp;gt; HMSET car price 100 score 50
OK
127.0.0.1:6379&amp;gt; HMGET car name price score
1) "bmw"
2) "100"
3) "50"

127.0.0.1:6379&amp;gt; HGETALL car
1) "name"
2) "bmw"
3) "price"
4) "100"
5) "score"
6) "50"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;判断字段是否存在&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#存在返回1，否则返回0
&amp;gt;HEXISTS key field
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; HEXISTS car name
(integer) 1
127.0.0.1:6379&amp;gt; HEXISTS car model
(integer) 0
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;当字段不存在时赋值&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#已存在不进行任何操作, 不存在赋值
&amp;gt;HSETNX key field value
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; HSETNX car name  abc
(integer) 0
127.0.0.1:6379&amp;gt; HGET car name
"bmw"

127.0.0.1:6379&amp;gt; HEXISTS car model
(integer) 0
127.0.0.1:6379&amp;gt; HSETNX car model 1
(integer) 1
127.0.0.1:6379&amp;gt; HGET car model
"1"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;增加数字&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;HINCRBY key field increment
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;HINCRBY person score 60
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;删除字段&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;HDEL key field [field ...]
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;HDEL car price
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;只获取字段名或字段值&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;HKEYS key
&amp;gt;HVALS key
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; HKEYS car
1) "name"
2) "price"
3) "score"
4) "model"
127.0.0.1:6379&amp;gt; HVALS car
1) "bmw"
2) "100"
3) "50"
4) "1"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;获取字段数量&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;HLEN key
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; HLEN car
(integer) 4
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3-lie-biao-lei-xing"&gt;3. 列表类型&lt;/h3&gt;
&lt;p&gt;List, 可以存储一个有序的字符串列表, 列表内元素非唯一性，可以向两端加入元素，或者获得列表的某一个片段&lt;/p&gt;
&lt;p&gt;内部使用双向链表实现,两端添加元素复杂度O(1), 通过索引访问的速度较慢&lt;/p&gt;
&lt;p&gt;可以用在分页, 新鲜事, 记录日志等&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;向列表两端增加元素(可同时增加多个)&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;LPUSH key value [value ...]
&amp;gt;RPUSH key value [value ...]
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; LPUSH num 1 2 3
(integer) 3
127.0.0.1:6379&amp;gt; RPUSH num 0
(integer) 4
# 3 2 1 0
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;从列表两端弹出元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先移除一个元素，然后返回之&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;LPOP key
&amp;gt;RPOP key
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; LPOP num
"3"
127.0.0.1:6379&amp;gt; RPOP num
"0"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;获取元素个数&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;LLEN key
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; LLEN num
(integer) 2
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;获取片段(同python切片，-1表最后一个, stop超出返回最右边元素, start大于stop返回空)&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;LRANGE key start stop
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; LPUSH test a b c d e f g
(integer) 7
127.0.0.1:6379&amp;gt; LRANGE test 0 2
1) "g"
2) "f"
3) "e"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;删除列表中指定值的元素&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;LREM key count value

删除列表中前count个值为value的元素，返回值为实际删除元素的个数
            count = 0 所有
                  &amp;gt; 0 从左边开始删count个
                  &amp;lt; 0 从右边开始删|count|个
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; LRANGE test 0 2
1) "g"
2) "f"
3) "e"
127.0.0.1:6379&amp;gt; LREM test 0 f
(integer) 1
127.0.0.1:6379&amp;gt; LRANGE test 0 2
1) "g"
2) "e"
3) "d"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;设置指定索引元素值&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;LINDEX key index
&amp;gt;LSET key index value
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; LPUSH lt 3 2 1
(integer) 3
127.0.0.1:6379&amp;gt; LINDEX lt 0
"1"

127.0.0.1:6379&amp;gt; LSET lt 0 -1
OK
127.0.0.1:6379&amp;gt; LINDEX lt 0
"-1"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;只保留列表指定片段&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;删除指定索引范围之外的所有元素
&amp;gt;LTRIM key start end
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; LRANGE la 0 99
1) "6"
2) "5"
3) "4"
4) "3"
5) "2"
6) "1"
127.0.0.1:6379&amp;gt; LTRIM la 0 2
OK
127.0.0.1:6379&amp;gt; LRANGE la 0 99
1) "6"
2) "5"
3) "4"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;向列表中插入元素&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;LINSERT key BEFORE|AFTER pivot value
从左到右查找值为pivot的元素，然后根据BEFORE/AFTER决定将value插入该元素前面还是后面
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; LRANGE la 0 99
1) "6"
2) "5"
3) "4"
127.0.0.1:6379&amp;gt; LINSERT la AFTER 5 3
(integer) 4
127.0.0.1:6379&amp;gt; LRANGE la 0 99
1) "6"
2) "5"
3) "3"
4) "4"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将元素从一个列表转到另一个列表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;RPOPLPUSH source destination
#RPOP，然后LPUSH，返回每个元素值，e.g.循环测试网址的可用性
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="4-ji-he-lei-xing"&gt;4. 集合类型&lt;/h3&gt;
&lt;p&gt;无序，无重复(唯一)，可以存储最多2^32 - 1 个字符串&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加删除元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回操作成功的个数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &amp;gt;SADD key member [member ...]
    &amp;gt;SREM key member [member ...]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; SADD letters a
(integer) 1
127.0.0.1:6379&amp;gt; SADD letters a b c
(integer) 2
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;获得集合中的所有元素&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SMEMBERS key
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; SMEMBERS letters
1) "c"
2) "a"
3) "b"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;判断元素是否在集合中(复杂度O(1))&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SISMEMBER key member
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; SISMEMBER letters a
(integer) 1
127.0.0.1:6379&amp;gt; SISMEMBER letters d
(integer) 0
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;集合间运算&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 差集
&amp;gt;SDIFF key [key ...]
# 交集
&amp;gt;SINTER key [key ...]
# 并集
&amp;gt;SUNION key [key ...]
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进行集合运算并将结果存储&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SDIFFSTORE destination_key key [key ...]
&amp;gt;SINTERSTORE destination_key key [key ...]
&amp;gt;SUNIONSTORE destination_key key [key ...]
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获得集合中元素个数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SCARD key
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; SCARD letters
(integer) 3
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;随机获取集合中元素&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SRANDMEMBER key [count]
count，正数，获取count个不重复的元素
count, 负数，获取|count|个，可能重复
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; SRANDMEMBER letters
"b"
127.0.0.1:6379&amp;gt; SRANDMEMBER letters 2
1) "a"
2) "c"

127.0.0.1:6379&amp;gt; SRANDMEMBER letters -2
1) "b"
2) "b"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;弹出一个元素&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SPOP key
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; SPOP letters
"c"
127.0.0.1:6379&amp;gt; SCARD letters
(integer) 2
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="5-you-xu-ji-he"&gt;5. 有序集合&lt;/h3&gt;
&lt;p&gt;sorted set,集合中每个元素都关联一个分数(不同元素分数可以相同)，可以根据分数进行排序(最高/最低N个)，进行有序相关的操作(分数可以相同)&lt;/p&gt;
&lt;p&gt;有序集合使用散列表和跳跃表实现, 读取复杂度更低, 更耗费内存&lt;/p&gt;
&lt;p&gt;按点击量排序，按时间排序等等，时间轴操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加元素&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ZADD&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; ZADD scoreboard 89 tom 67 peter 100 david
(integer) 3
127.0.0.1:6379&amp;gt; ZADD scoreboard 70 peter
(integer) 0
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;获取元素分数&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;ZSCORE key member
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; ZSCORE scoreboard peter
"70"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;获取排名在某个范围内的元素列表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分数相同，按字典序排,中文的话，取决于编码方式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#分数从小到大排，返回索引从 start-stop之间的所有元素，包含两端元素, WITHSCORES同时获得元素分数
&amp;gt;ZRANGE key start stop [WITHSCORES]
&amp;gt;ZREVRANGE key start stop [WITHSCORES]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; ZRANGE scoreboard 0 2
1) "peter"
2) "tom"
3) "david"
127.0.0.1:6379&amp;gt; ZRANGE scoreboard 0 2 WITHSCORES
1) "peter"
2) "70"
3) "tom"
4) "89"
5) "david"
6) "100"

127.0.0.1:6379&amp;gt; ZREVRANGE scoreboard 0 2 WITHSCORES
1) "david"
2) "100"
3) "tom"
4) "89"
5) "peter"
6) "70"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;获取指定分数范围的元素&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; ZRANGEBYSCORE scoreboard 80 100 WITHSCORES
1) "tom"
2) "89"
3) "david"
4) "100"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;希望不包含端点值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;ZRANGEBYSCORE scoreboard 80 (100
正负无穷大 +inf -inf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; ZRANGEBYSCORE scoreboard 80 (100 WITHSCORES
1) "tom"
2) "89"

127.0.0.1:6379&amp;gt; ZRANGEBYSCORE scoreboard 80 +inf WITHSCORES
1) "tom"
2) "89"
3) "david"
4) "100"

127.0.0.1:6379&amp;gt; ZRANGEBYSCORE scoreboard 80 +inf WITHSCORES LIMIT 0 1
1) "tom"
2) "89"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;增加某个元素分数&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;ZINCRBY key increment member
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; ZSCORE scoreboard tom
"89"
127.0.0.1:6379&amp;gt; ZINCRBY scoreboard 2 tom
"91"
127.0.0.1:6379&amp;gt; ZSCORE scoreboard tom
"91"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;获得集合中元素数量&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;ZCARD key
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; ZCARD scoreboard
(integer) 3
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;获得指定分数范围内的元素个数&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;ZCOUNT key min max
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; ZCOUNT scoreboard 80 100
(integer) 2
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;删除一个或多个元素&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;ZREM key member [member ...]
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按照排名范围删除元素&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;ZREMRANGEBYRANK key start stop
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按照分数范围删除&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;ZREMRANGEBYSCORE key min max
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获得元素排名&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;ZRANK key member #从小到大
&amp;gt;ZREVRANK key member #相反
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; ZRANK scoreboard tom
(integer) 1
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;计算有序集合的交集&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]

#返回值为destination中元素个数
#AGGREGATE sum默认值，destination键中元素分数是每个参与计算的集合中该元素分数的和
        min取最小值
        max取最大值
#WEIGHTS 设置每个集合的权重，每个集合在参与计算时分数会被乘以权重
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="qi-ta_1"&gt;其他&lt;/h2&gt;
&lt;h3 id="shi-wu"&gt;事务&lt;/h3&gt;
&lt;p&gt;Redis中事务是一组命令的集合, 一个事务中的命令要么都执行, 要么都不执行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; MULTI
&amp;gt; SADD k1 v1
&amp;gt; SADD k2 v2
&amp;gt; EXEC
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意, 不支持回滚功能&lt;/p&gt;
&lt;h3 id="sort"&gt;SORT&lt;/h3&gt;
&lt;p&gt;可以对列表/集合/有序集合进行排序&lt;/p&gt;
&lt;p&gt;最强大最复杂, 用不好可能成为性能瓶颈 O(n + mlogm) n为排序个数, m为返回个数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SORT key #从小到大
&amp;gt;SORT key DESC #从大到小
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SORTBY&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; LPUSH sortbylist  2 1 3
(integer) 3
127.0.0.1:6379&amp;gt; SET itemscore:1 50
OK
127.0.0.1:6379&amp;gt; SET itemscore:2 100
OK
127.0.0.1:6379&amp;gt; SET itemscore:3 -10
OK
127.0.0.1:6379&amp;gt; SORT sortbylist BY itemscore:* DESC
1) "2"
2) "1"
3) "3"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SORTBY GET&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; SORT sortbylist BY itemscore:* DESC GET POST:*-&amp;gt;title GET POST:*-&amp;gt;time
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SOTRBY GET STORE&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; SORT sortbylist BY itemscore:* DESC GET POST:*-&amp;gt;title GET POST:*-&amp;gt;time STORE new_key
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="sheng-cun-shi-jian"&gt;生存时间&lt;/h3&gt;
&lt;p&gt;TTL, time to live&lt;/p&gt;
&lt;p&gt;时效数据，过一定时间删除这些数据&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#设置
&amp;gt;EXPIRE key seconds
1表示设置成功, 0表键不存在或设置失败

#查询
&amp;gt;TTL key
键不存在返回-1 or 没有设置生存时间

#去除时效
&amp;gt;PERSIST key

#SET/GETSET为键赋值会同时清除键的生存时间
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ren-wu-dui-lie"&gt;任务队列&lt;/h3&gt;
&lt;p&gt;一般队列&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;生产者 LPUSH
消费者 RPOP

BRPOP 和RPOP类似，但是当列表中没有元素时，BRPOP会一直阻塞住链接，直到有新元素加入
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;优先队列&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;BLPOP key [key ...] timeout,同时检测多个键，如果所有键都没有元素则阻塞，如果其中有一个键有元素，则从该键中弹出元素
如果都有，则从左到右的顺序取第一个键中的一个元素

BLPOP queue:1 queue:2 queue:3 0
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="fa-bu-ding-yue-mo-shi"&gt;发布/订阅模式&lt;/h3&gt;
&lt;p&gt;进程间消息传递&lt;/p&gt;
&lt;p&gt;订阅者：订阅者可以订阅一个或多个频道&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SUBSCRIBE channel1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;发布者：可以向指定的频道发送消息，所有订阅此频道的订阅者都会受到此消息&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;PUBLISH channel1 helloworld
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pythonzhong-shi-yong-redis"&gt;Python中使用Redis&lt;/h3&gt;
&lt;p&gt;官方推荐&lt;a href="https://github.com/andymccurdy/redis-py"&gt;redis-py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install redis
sudo easy_install redis
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="err"&gt;提供两个类&lt;/span&gt;&lt;span class="n"&gt;Redis&lt;/span&gt;&lt;span class="err"&gt;和&lt;/span&gt;&lt;span class="n"&gt;StrictRedis&lt;/span&gt;&lt;span class="err"&gt;用于实现&lt;/span&gt;&lt;span class="n"&gt;Redis&lt;/span&gt;&lt;span class="err"&gt;的命令，&lt;/span&gt;
&lt;span class="n"&gt;StrictRedis&lt;/span&gt;&lt;span class="err"&gt;用于实现大部分官方的命令，并使用官方的语法和命令（比如，&lt;/span&gt;&lt;span class="n"&gt;SET&lt;/span&gt;&lt;span class="err"&gt;命令对应与&lt;/span&gt;&lt;span class="n"&gt;StrictRedis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="err"&gt;方法）&lt;/span&gt;
&lt;span class="n"&gt;Redis&lt;/span&gt;&lt;span class="err"&gt;是&lt;/span&gt;&lt;span class="n"&gt;StrictRedis&lt;/span&gt;&lt;span class="err"&gt;的子类，用于向后兼容旧版本的&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;redis&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StrictRedis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6379&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'bar'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;'bar'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;connection pool&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;管理对一个redis server的所有连接，避免每次建立、释放连接的开销。
默认，每个Redis实例都会维护一个自己的连接池。可以直接建立一个连接池，然后作为参数Redis，这样就可以实现多个Redis实例共享一个连接池。

pool = redis.ConnectionPool(host='127.0.0.1', port=6379)
r = redis.Redis(connection_pool=pool)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;pipeline机制&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;可以在一次请求中执行多个命令，这样避免了多次的往返时延
当一组命令中每条命令都不依赖于之前的执行结果, 可以使用

pipe = r.pipeline()
pipe.set('one', 'first')
pipe.set('two', 'second')
pipe.execute()

pipeline中的操作是原子的，要改变这种方式，可以传入transaction=False

pipe = r.pipeline(transaction=False)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shi-ji-shi-li"&gt;实际实例&lt;/h3&gt;
&lt;p&gt;什么应用，都用什么方式处理的&lt;/p&gt;
&lt;p&gt;1.一般的缓存&lt;/p&gt;
&lt;p&gt;用字符串类型足矣,
e.g.注册时得用户名冲突,在线用户&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SET key value
&amp;gt;GET
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一些缓存场景&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;存储会话缓存(Session Cache), 利用持久化, 保存一些信息, 例如购物车
全页缓存(FPC)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.计数,访问量统计，自增id等&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;INCR key
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.存储对象实例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;用散列
&amp;gt;HSET key field value
&amp;gt;HGET key field
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.存列表，队列相关&lt;/p&gt;
&lt;p&gt;作为队列使用&lt;/p&gt;
&lt;p&gt;文章分类列表，评论列表等&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;用列表
&amp;gt;LPUSH key value
&amp;gt;RPUSH key value

&amp;gt;LPOP key
&amp;gt;RPOP key
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.集合相关的&lt;/p&gt;
&lt;p&gt;标签云等&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SADD key member
&amp;gt;SREM key member
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6.排序相关&lt;/p&gt;
&lt;p&gt;排行榜&lt;/p&gt;
&lt;p&gt;访问量排序,点击量等&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;用有序结合
&amp;gt;ZADD key score member
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7.访问频率控制&lt;/p&gt;
&lt;p&gt;设置key的失效时间
用 INCR
访问时检查次数, 若超过阈值, 走限制逻辑&lt;/p&gt;
&lt;p&gt;or 记录次数, 超过阈值, 检查与最早一个相差是不是1分钟, 是, 走限制逻辑, 不是, 现有时间加入列表, 同时删除最早元素&lt;/p&gt;
&lt;p&gt;8.发布/订阅&lt;/p&gt;
&lt;p&gt;会用到的&lt;/p&gt;
&lt;h3 id="guan-li"&gt;管理&lt;/h3&gt;
&lt;p&gt;重启后数据不丢失, 两种方式, 可单独使用或者结合使用&lt;/p&gt;
&lt;p&gt;持久化：&lt;/p&gt;
&lt;p&gt;RDB&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;快照,符合一定条件时，将内存中的所有数据进行快照并存储到硬盘上
快照的条件可以在配置文件中配置, 两个参数: 时间和改动的键的个数
Redis默认采用的持久化方式

过程
1. Redis使用fork函数复制一份当前进程(父进程)的副本(子进程) (存的是fork时刻的数据)
   写时复制copy-on-write 开始时父子共享同一内存数据, 当父进程修改某片数据, 操作系统复制一份以保证子进程数据不受影响
2. 父进程继续接收命令, 子进程开始将内存中数据写入硬盘中临时文件
3. 写入结束后, 替换旧的RDB文件

任意时刻rdb文件都是完整地, 可以用于备份

可以手动发SAVE / BGSAVE 让redis执行快照(前者由主进程进行快照操作,阻塞其他请求, 后者fork子进程)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;AOF&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;每次执行一条会修改Redis中数据的命令，Redis会将该命令写到硬盘中的AOF文件
开启, 设置 appendonly yes
默认文件名 appendonly.aof 可以通过appendfilename设置

纯文本文件, 每当达到一定条件时可以进行重写
auto-aof-rewrite-percentage 100 #超过上一次百分比
auto-aof-rewrite-min-size 64mb #允许重写的最小aof文件大小

默认30s, 执行的命令同步到aof
可以配置
appendfsync everysec # 每秒一次
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Redis可以配置主从数据库&lt;/p&gt;
&lt;p&gt;redis-server --port 6380 --slaveof 127.0.0.1 6379&lt;/p&gt;
&lt;p&gt;复制原理: 从数据库启动, 向主库发SYNC, 主库后台开始保存快照(RDB), 并将保存期间的命令缓存起来. 快照完成后, 将快照文件和缓存的命令发送给从库,
从库收到后载入快照文件并执行命令. 不支持断点续传&lt;/p&gt;
&lt;p&gt;读写分离: 主库禁用持久化, 从库启用. 从库崩溃, 重启自动更新. 主库崩溃, 从库提升为主库再修复&lt;/p&gt;
&lt;p&gt;常用查看命令&lt;/p&gt;
&lt;p&gt;telnet连接&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;telnet 127.0.0.1 6379
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设定最大可用内存&lt;/p&gt;
&lt;p&gt;如果服务器内存有限, 大量使用缓存且生存时间设置过长会导致Redis占满内存. or 为了防止占用内存过大而将生存时间设太短导致命中率过低&lt;/p&gt;
&lt;p&gt;可以限制redis使用的最大内存, 按照一定规则淘汰不需要的键&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;配置文件 
maxmemory 限制最大可用内存大小(单位字节)
maxmemory-policy 超过限制时的删除策略，一直删除直到小于指定内存

volatile-lru  使用LRU算法删除一个键，只对设置了生存时间的
allkeys-lru   使用LRU算法删除一个键
volatile-random 随机，只对设置了生存时间的
allkeys-random
volatile-ttl    删除生存时间最近的
noeviction      不删除键，返回错误
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;耗时命令日志&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; SLOWLOG GET
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="qi-ta_2"&gt;其他&lt;/h3&gt;
&lt;p&gt;批量删除&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#删除 /test/*开始的
./redis-cli -a password -n 0 keys "/test/*" | xargs ./redis-cli -a password -n 0 del
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;精简键名和键值, 最直观的减少内存占用的方式&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;The end! To be continue ....&lt;/p&gt;</content><category term="redis"></category><category term="python"></category></entry></feed>