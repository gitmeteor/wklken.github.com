<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>wklken's blog</title><link>http://www.wklken.me/</link><description></description><atom:link href="http://www.wklken.me/category/books/feed" rel="self"></atom:link><lastBuildDate>Wed, 17 Feb 2016 00:00:00 +0800</lastBuildDate><item><title>摘录&gt;</title><link>http://www.wklken.me/posts/2016/02/17/master-en-in-six-months.html</link><description>&lt;p&gt;在高铁上顺手刷完的一本书, 学习英语的方法论吧, 和学习编程有很多类似的地方, 互相印证.&lt;/p&gt;
&lt;p&gt;还是值得一读的, 建议想掌握英文的同学买一本读一读&lt;/p&gt;
&lt;p&gt;额, 英文这个问题困扰了我很久, 当然, 学习的主要目的是能更快更好的读懂文档以及进行一些基本交流(其实是为了刷电影美剧更方便些ORZ)&lt;/p&gt;
&lt;p&gt;从去年开始就实行&lt;code&gt;泡脑子&lt;/code&gt;的策略, 上下班各半个小时, 反复在听老友记十季的音频(安利app: 喜马拉雅). 然后固定在刷几部美剧, 买了本英文著作一字一句反复读中, 也开始在国外的论坛提问题, 发言, 用kindle开启生词模式在刷书. 当然, 俺的英文还是别别扭扭的.....&lt;/p&gt;
&lt;p&gt;程序员的一大优势是, 文档/搜索, 基本都是英文的, 这个环境还是不错的, 另外, mac/iphone/ipad全部切成英文系统, 取词软件全开, 哈哈哈.....&lt;/p&gt;
&lt;p&gt;然而, 还是不会说啊.....痛定思痛&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;以下读书摘要&lt;/p&gt;
&lt;h4 id="_1"&gt;观点&lt;/h4&gt;
&lt;p&gt;本书的观点&lt;br/&gt;
- 我特别主张自然规律，你越能理解和运用自然规律，你就越能成功&lt;br/&gt;
- 一个大脑健全的成年人完全有能力在6个月内从0掌握任何一种外语！&lt;br/&gt;
- 只要掌握规律，跟随规律去练习，一个人能做到的结果，任何人都能做到！&lt;/p&gt;
&lt;p&gt;长期误解的错误的观点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有语言天赋的人才能学会外语&lt;/li&gt;
&lt;li&gt;到国外待一段时间就能学会外语&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="_2"&gt;掌握一种外语的标准&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;（1）你已经掌握了有关语言的最高频单词和词组，你能听懂，也能自己独立使用。在外语里边，掌握1000个最高频词，完全满足日常生活沟通所需的85%，3000个高频词可以覆盖日常沟通、工作及商务交流的98%以上。&lt;/li&gt;
&lt;li&gt;（2）你完全可以很自然地使用你已经会的词组和单词，来创造你想说的任何句子，沟通你想表达的意思。当然，有时候你会找不到最确切和最巧妙的说法，但是你完全有能力找到能用的词来表达你想说的东西。&lt;/li&gt;
&lt;li&gt;（3）听到陌生单词的时候，你会轻松地邀请别人解释给你听。而在这个过程当中，你完全有能力用外语来了解和接受这个新的概念。同时，你也有能力吸收这个概念带给你的生词。&lt;/li&gt;
&lt;li&gt;（4）你的发音已经接近母语者。可能有的地方不是100%一样，但是这些绝对不会对你的沟通造成阻碍。&lt;/li&gt;
&lt;li&gt;（5）你说外语的节奏、速度、轻重、停顿等，已经完全符合外语母语者的习惯，而且你在说的时候，总是感到很自然。你也会很恰当地用礼节和最普遍的感叹方式来进行日常&amp;ldquo;共鸣&amp;rdquo;，从而达到友好沟通的目的。&lt;/li&gt;
&lt;li&gt;（6）你已经完全掌握了新的肢体语言的表达方式，包括一些面部表情、不同手势等。&lt;/li&gt;
&lt;li&gt;（7）你已经建立了语感，在肚子里能知道哪些说法算是大家都认同的，也会感觉到哪些说法有一点儿偏离大家习惯的规矩。&lt;/li&gt;
&lt;li&gt;（8）同时，为了学得更快，你也要懂得累了就休息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="_3"&gt;学会外语的五项核心原则&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;从和你有密切关联的外语内容学起: 只要信息跟你个人没有重要关联，你就自然会觉得没有重要意义，因此不会给注意力。不给注意力的自然结果是记不得、学得慢甚至学不会。反之，任何对你本人有重要意义的信息，都会引起你的注意，并且当你可以给它足够注意力时，你就会自然而然学得特别快 =&amp;gt; 结论: 为了把外语学好，你要找到这门外语跟你的重要关联。在学习时，你一定要选择跟自己的兴趣、动力有重要关联的外语内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;和学习技术挺类似, 技术深入以及眼界扩展, 从自己工作内容相关的东西开始才能事半功倍, 才能有效率&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把外语当成沟通工具: 1. 把外语当成工具，会让你通过&amp;ldquo;用&amp;rdquo;来学外语，而不是先学后用. 把外语当成沟通工具的第一个必然结果是，只要你会一点，就会马上去用，从而体验这个工具发挥的效力。2. 把外语当成工具，会让你从功能出发，把形式放在后面学通过用外语来学外语的关键，是把自己的注意力先放在单词和词组的功能。这样，你会先用功能最明显的几个单词和词组来沟通，不让形式成为卡住自己学习的节点。3. 把外语当成工具，会让你自然接受多种说法，因此不拘泥于一个&amp;ldquo;标准答案&amp;rdquo; 4. 把外语当成工具，可以获取&amp;ldquo;反馈&amp;rdquo;带来的巨大帮助，因此效果好&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;做技术的这种机会还是比较多的. 从实践中学习, 在实践中验证理论.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;理解了含义，自然能&amp;ldquo;获取&amp;rdquo;外语: 1. 可理解输入就是首先理解含义，然后下意识自动&amp;ldquo;获取&amp;rdquo;外语的过程。为了把你的外语学习速度加快，你需要在学习的过程中，给自己创造可理解输入的条件。2. 相信自己的潜意识学外语的能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生理训练为主: 要学好外语，更重要的是要进行合适的生理训练，也就是说，外语学习的一个非常重要的部分，是训练大脑神经和外语肌肉。与练健美体操一样，练好外语的过程是一个肌肉训练的过程。1. 一定要用足够时间锻炼耳朵里的外语听觉神经！ 2. 发音训练绝对是肌肉训练的一个过程，因此要用体育训练的思路，指导自己找对路，这包括经常练，同时在练习的过程中注意动作的准确度。3. 创造外语条件反射！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;掌握好心理状态: 用深度放松的状态来学习, 保持良好学习状态的另外一个重要因素，就是管理自己的渴望。必须开心忍受听不懂的阶段&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="_4"&gt;学会外语的七个关键行为&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;多听&amp;mdash;&amp;mdash;快速长好&amp;ldquo;外语DNA&amp;rdquo;: &amp;ldquo;泡脑子&amp;rdquo;表面的意思很简单，就是说要把自己的大脑&amp;ldquo;泡&amp;rdquo;在外语的声音里。除此之外，也有一些自我管理的方式和态度方面的问题需要注意，这样才能把&amp;ldquo;泡脑子&amp;rdquo;的作用发挥到极致。&lt;/li&gt;
&lt;li&gt;先认识含义，后明白词: 作为学外语的成年人，也必须运用这个基本原理。不管怎么样，要把注意力先放在明白含义上，在这个基础上，你的大脑就很容易吸收你正在学的语言。换句话说，为了学会外语，要先懂意思，不是为了懂意思要先学会外语！ 肢体语言/整体环境和场景/通过已知&amp;rdquo;获取&amp;rdquo;未知/&lt;/li&gt;
&lt;li&gt;大胆组合，大量去用&lt;/li&gt;
&lt;li&gt;从核心高频内容开始学起: 为了把英语学得透彻，并且达到完全像母语者一样，根本不需要学那么多，更不需要同时什么都学，只需要把注意力放在外语的核心，掌握外语的高频词即可。所谓高频词就是沟通中出现频率高的外语单词，高频词是外语沟通的核心。所以，学到8000个单词以后，你的英文水平已经和普通的英语母语者一样好！外语学习内容贵精不贵多，学习的过程一定要遵守质量第一，数量第二的原则的&lt;/li&gt;
&lt;li&gt;找一个好的外语家长&lt;/li&gt;
&lt;li&gt;掌握发音的绝招: 除了听声音并调整自己面部肌肉之外，练发音的时候，还有一个&amp;ldquo;绝招&amp;rdquo;能用，就是&amp;ldquo;看脸说话&amp;rdquo;，意思是模仿外语母语者的面部和口型来练发音。&lt;/li&gt;
&lt;li&gt;一个盒子两条路（Same Box-Different Path）: 我相信你很清楚，为了真正会外语，迟早必须懂得用外语思考。也就是说，自己的大脑能够直接将头脑中的意义联结到外语的声音。根本不需要经过中文翻译. 只有把外语的声音和内心的画面含义联结到一起，才是下意识高效率的学习，也就是用外语沟通的时候，自己沟通的感觉和效果与说母语一样。其实所谓&amp;ldquo;外语思维&amp;rdquo;就是这个意思&amp;mdash;&amp;mdash;听到外语，在头脑中看到画面，同时注意到自己的感觉，说话时也是直接从画面和感觉联结到外语. &amp;ldquo;同一个盒子，两条路&amp;rdquo;的主要含义，来自于我们对人类大脑处理信息的科学认识。人对世界的认识和记忆，最主要来源不是文字或语言，更基层的，是神经层面的5种感觉，包括：视觉、听觉、触觉、嗅觉和味觉。 方法: 故意创造和运用画面/用比喻找到含义的本质/找到沟通的对象, 用外语交流/&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过已知获取未知, 有点类似&lt;code&gt;如何高效学习&lt;/code&gt;中提到的观点, 建立高速公路, 建立关联, 比喻.&lt;/p&gt;
&lt;p&gt;还有, kindle中生词模式就是类似这样的....&lt;/p&gt;
&lt;p&gt;外语家长, 其实类似mentor的角色, 虽然多年以来....还有, 实际的code review&lt;/p&gt;
&lt;h4 id="_5"&gt;具体的学习计划&lt;/h4&gt;
&lt;p&gt;自己看书吧, 有挺多借鉴的地方&lt;/p&gt;
&lt;p&gt;不过, 对于我这个散漫闲人, 严格按部就班有些困难, 所以, 只能培养所谓的&lt;code&gt;习惯&lt;/code&gt;, 侵占覆盖掉碎片时间, 同时把相关的方法论给&lt;code&gt;践行&lt;/code&gt;了, 至于效果, 额, 过段时间看看......&lt;/p&gt;
&lt;h4 id="_6"&gt;一些书中提到的习惯&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;习惯一：开始用自己的右脑，调整到每天进入英语频道。&lt;/li&gt;
&lt;li&gt;习惯二：想到任何关于英语问题的时候，自动想起如何用英语发问。&lt;/li&gt;
&lt;li&gt;习惯三：把自己的耳朵和嘴巴连接起来，变成一个&amp;ldquo;发音准确度反馈循环&amp;rdquo;。&lt;/li&gt;
&lt;li&gt;习惯四：把英语声音直接连接到脑海中的画面和感觉。&lt;/li&gt;
&lt;li&gt;习惯五：把玩词变成每天的习惯和乐趣。拼凑词，创造含义。&lt;/li&gt;
&lt;li&gt;习惯六：完全建立自言自语的习惯&lt;/li&gt;
&lt;li&gt;习惯七：每天用英语开口说话，进行真实沟通。&lt;/li&gt;
&lt;li&gt;习惯八：随时开口练习发音。&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 17 Feb 2016 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2016-02-17:posts/2016/02/17/master-en-in-six-months.html</guid><category>books</category></item><item><title>读书笔记-调试九法</title><link>http://www.wklken.me/posts/2015/11/29/debugging-9-rules.html</link><description>&lt;p&gt;去年十一月份, 写过一篇blog, 讲了一些自己平时进行代码调试的观点, 列了21条&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.wklken.me/posts/2014/11/23/how-to-debug.html"&gt;关于代码调试de那些事&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上周多看上买了这本书, 花了两小时读完, 做下笔记, 发现很多观点其实是类似的.&lt;/p&gt;
&lt;p&gt;这本书是九条原则, 即方法论, 了解和学习, 在实践中遵守, 有利于提升自己调试的效率:)&lt;/p&gt;
&lt;p&gt;&lt;img alt="debug-rules" src="/imgs/books/debug-rules.jpg"/&gt;&lt;/p&gt;
&lt;h4 id="1"&gt;1. 理解系统&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你必须掌握系统的工作原理以及它是如何设计的。在某些情况下，还要知道为什么这样设计。如果你没有理解系统中的某个部分，那么这通常就是出问题的地方。（这不仅仅是&amp;ldquo;墨菲定律&amp;rdquo;的问题，如果你不能理解你所设计的系统，你的工作可能会变得一团糟。）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;理解是怎么设计的, 机制, 原理, 需求等等, 面对的东西才是一个白盒.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;理解系统的基本方法就是阅读手册&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;手册, 手册, 很多时候, 我们并不能抑制住自己, 去编码, 去调试, 去解决问题, 而忽略了一些重要的东西, 例如: 文档, 我们总以为自己了解一切, 很多时候很诡异的问题查查文档, 才发现, 原来文档有说明:)&lt;/p&gt;
&lt;p&gt;或者, 跳过去看源码也是不错的选择&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;理解了你自己的系统后，还会获得一个额外的好处。当你找到bug时，必须在不破坏其他地方的前提下修复它们。理解系统行为是不破坏系统的第一步。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有个段子, 修了一个, 结果改出了3个bug...只有对系统足够了解, 才能修复而不破坏&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人们在调试的时候，通常都不会彻底地阅读系统手册。他们采取跳读的方式，查看他们认为重要的一些章节，但问题的线索可能就隐藏在被略过的那些章节中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有时是这样的, 但是可能时间有限, 这个没法子, 只能在闲时, 多多阅读, 例如, 隔段时间回去浏览一遍&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;知道什么是正常的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么是正常的, 什么是异常的?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;知道工作流程, 当你尝试寻找bug时，必须知道要查找的路线&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不多说, 捞数据, 追数据, 基本功&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;了解你的工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要修车, 有趁手的工具才能更高效地解决问题&lt;/p&gt;
&lt;h4 id="2"&gt;2. 制造失败&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;关键是在发生失败的时候要看到它&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;日志, 现场, 栈等&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;当你发现一个故障时该怎么办？&amp;rdquo; &amp;ldquo;试着让它再次发生。&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;复现&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;仔细观察你做了什么，然后再做一次，并且记下你做的每个步骤。然后，按照你自己所写的步骤去做，确定这样做确实导致了错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;复现的步骤&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要引发失败, 而不是模拟失败......如果你猜测失败机理，模拟往往不会成功。原因通常有两个，要么你的猜测是错误的；要么测试改变了条件，模拟的系统可以正确工作，或者更糟，发生新的错误，因而分散了你对正在查找的问题的注意力......注意，不要用一个看似完全相同（而实际上不同）的环境来代替并希望看到相同的错误&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关注问题本身, 不要错误的转移到了猜测的东西&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;仔细观察失败&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;仔细观察失败! 仔细观察! 仔细....&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是已修复bug，还是仅仅由于运气好，它不再发生了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你必须确认这一点&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;永远不要丢掉调试工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;调试工具, 不要当成一次性的工具用完即仍, 可能是错误的&lt;/p&gt;
&lt;h4 id="3"&gt;3. 不要想, 而要看&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;亲眼看到底层的失败是非常重要的。如果你猜测失败是如何发生的，那常常会修复一些根本不是bug的问题。这样的修复不仅不会解决问题，而且还会浪费时间和金钱，甚至会破坏其他地方。请记住，不要这样做。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不要猜测&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;观察是很难的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;的确很难&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你必须仔细观察，找到足够多的问题细节，才能调试它......如果你不能留意实际情况发生的全过程，那么你极有可能曲解很多问题。你猜测某个地方出了问题，于是修复它，但实际上错误发生在另一个地方......一定要亲眼看到实际错误是如何发生的。观察往往比猜测能够更快地找到问题。因为猜测虽然看起来是捷径，但这条捷径并不会带你找到问题的根源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;观察而不是猜测&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在停下来思考问题之前，对细节的观察应该到什么程度才合适呢？简单的答案是：&amp;ldquo;一直观察，直到把问题的原因锁定在几种可能性之内。&amp;rdquo;&lt;/p&gt;
&lt;p&gt;海森堡测不准原理: 换言之，测试工具影响了被测系统......。任何插装都可能对系统造成影响，只是程度不同而已&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;插装, 类似于工具的调试模式, 会影响系统, 所以要注意&lt;/p&gt;
&lt;h4 id="4"&gt;4. 分而治之&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;缩小搜索范围......在查找问题时，&amp;ldquo;分而治之&amp;rdquo;实际上是第一条需要使用的原则。事实上，在查找问题时它也是唯一需要应用的规则。所有其他规则都只是帮助你遵循这条规则。分而治之是调试的核心，很多人都知道它，但很多人都没有遵守它，这也正是我写本章的原因。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;二分法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;确定范围...你必须知道搜索范围，而且必须知道在一端一切正常，而在另一端出现了问题.....从有问题的支路开始查找问题......&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原则&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果同时出现了多个问题，当你确实查明了其中的一个问题时，应该立即修复它，然后再查找其他问题......有时修复了一个问题，另一个问题也解决了，两个问题实际上是同一个bug&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是有这种情况&lt;/p&gt;
&lt;h4 id="5"&gt;5. 一次只改一个地方&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;使用步枪，而不要用散弹枪......一次只改一个地方......此外，如果你真的看到了错误，应该只修复这个地方&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这点很重要&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你在两个测试之间更改了很多代码，或者为两个测试设置了不同的环境，那么这两个测试将很难对比。它们之间有很多差别并不是由bug引起的，而你必须不断地解释这些差别。你必须把它们之间的差别减少到只与bug有关。排除其他的干扰因素&lt;/p&gt;
&lt;p&gt;自从上一次能够正常工作以来你更改了什么......有时，正常的系统和错误的系统之间的区别是由于一项更改造成的。做了更改之后，正常的系统开始出现故障。一种非常有效的办法是找出第一个导致系统出错的版本，尽管这可能需要连续测试原来的版本，直到找到没有故障的版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大部分问题都是出现在最近一次修改&lt;/p&gt;
&lt;h4 id="6"&gt;6. 保持审计跟踪&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;有时看起来最不起眼的事情实际上却是导致发生bug的关键......因此，你必须记录下每一件事情，不起眼的事情可能会很重要&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;细节, 步骤&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;记下你的每步操作、顺序和结果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还是步骤&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;魔鬼隐藏在细节中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;细节&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在细节方面，永远都不要相信你的记忆，而要把它写下来。如果你相信你的记忆，将会制造很多麻烦。你会忘掉一些你认为不重要的细节，当然，这些细节将会被证明是非常重要的。你会忘掉一些在你看来不重要的细节，而这些细节对于后来解决另一个不同问题的人可能很重要。除了口头表述以外，你无法将信息传递给别人，而这会浪费所有人的时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="7"&gt;7. 检查插头&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;怀疑自己的假设......当我们看到一个问题时，通常在某个特定位置看到了问题，但导致这个问题的原因却在上游或者是一个基础性的问题。系统不具备正确操作的条件，于是出现了非常奇怪的行为。当你看到完全来自另一个世界的问题时，应该停下来，看看你是不是还在地球上&lt;/p&gt;
&lt;p&gt;从头开始检查&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="8"&gt;8. 获得全新观点&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;寻求帮助: 向别人寻求帮助至少有3个原因（还不算把整个问题甩给别人）：获得全新观点、专业知识和经验。而且，人们通常很愿意帮忙，因为这给了他们一个证明自己很聪明的机会&lt;/p&gt;
&lt;p&gt;事实上，有时向别人解释问题也会使你有全新的认识，之后你自己就解决了问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;小黄鸭调试法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;报告症状, 而不是理论: 让他提出自己的观点。他们的观点可能与你的观点相符，也可能全然不同，而这正是你想要的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="9bug"&gt;9.如果你不修复bug, 它将依然存在&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;检查问题确实已被修复&lt;/p&gt;
&lt;p&gt;bug 从来不会自己消失&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 29 Nov 2015 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2015-11-29:posts/2015/11/29/debugging-9-rules.html</guid><category>books</category></item><item><title>重读&gt;</title><link>http://www.wklken.me/posts/2014/11/30/pomodoro-technique-illustrated.html</link><description>&lt;p&gt;最近在执行重读计划, 为年后搬家做准备, 一些书读完珍藏/出给需要的人, 减少搬家那一柜子书的困扰....&lt;/p&gt;
&lt;p&gt;重新读了下这本书, 写写&lt;/p&gt;
&lt;p&gt;大概去年的这个时候, 写了篇 &lt;a href="http://www.wklken.me/posts/2013/11/17/the-art-of-procrastination.html"&gt;拖拉一点也无妨的读书笔记&lt;/a&gt;, 需要的可以看下&lt;/p&gt;
&lt;p&gt;&lt;img alt="pomodoro" src="/imgs/books/pomodoro.jpg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;番茄时间工作法, 意在让人们驻足/观察/醒悟, 并在此过程中改进自我&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人们往往容易关注未来, 而不是过去, 匆匆忙忙, 只为了尽快达到目标, 却忽视了对整个过程的review, 停留, 观察, 总结, 改进, 然后再前进, 更快更好地前进.&lt;/p&gt;
&lt;p&gt;编程中有一种学习方式叫做&lt;code&gt;刻意练习&lt;/code&gt;, 而在&amp;lt;&amp;lt;一万小时天才理论&amp;gt;&amp;gt;中提到&lt;code&gt;精深练习&lt;/code&gt;, 要&lt;code&gt;慢&lt;/code&gt;, 要去&lt;code&gt;犯错&lt;/code&gt;, 要去实际&lt;code&gt;体悟&lt;/code&gt;, 要&lt;code&gt;总结&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;GTD 里也有review的环节.&lt;/p&gt;
&lt;p&gt;总之, review很重要, 但常常被忽略(例如说我&amp;hellip;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要完成大量工作, 重点不在完成工作上, 而在于能否集中注意力&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很赞同, 打断是效率杀手.&lt;/p&gt;
&lt;p&gt;如果一天打断太多, 加上会太多, 很可能意味着晚上要花时间补回这段时间. That is not cool!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要想做到专注, 你就得坚决抛开各种杂念&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;什么是番茄工作法? 简单来说, 就是列出你当天要做的事, 设置25分钟闹钟, 然后从第一件事开始.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很简单的做法, 但是实践两年多, 感觉行之有效. 而自己的番茄钟, 也根据任务性质长短不一, 从10分钟到1小时不等, 特别是半夜码代码写东西根本停不下来.&lt;/p&gt;
&lt;p&gt;而对于我这种比较懒散的人来说, 最简单的方式才是最好的方式, 例如每个番茄钟的休息时间, 只要自己感觉精力ok, 可以进入下一步, 就开始. 如果感觉一定要继续下去, 那么继续. 灵活运用, 不要僵化了(但是最开始的时候应该对自己严格些).&lt;/p&gt;
&lt;p&gt;同样, 你没有必要买一个番茄钟(我就买了一个&amp;hellip;现在放厨房里落灰, 原因是滴答滴答的声音太干扰了), 手机/网页/软件, 你可以发现各类好用的东西, 主旨: 能在适时通知你, 不干扰你的工作和思路, 能记录. (我用的是&lt;code&gt;Vitamin-R 2&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;每隔一段时间, 回顾下所有步骤, 看看有没有需要简化或干脆去掉的步骤.&lt;/p&gt;
&lt;p&gt;我是&lt;code&gt;伪GTD&lt;/code&gt;爱好者, 从狂热到降温, 使用一个个工具, 最终确定了&lt;code&gt;things&lt;/code&gt;这个工具(足够轻). 而GTD步骤, 也被简化到了适合我工作场景的情况.&lt;/p&gt;
&lt;p&gt;不要僵化于步骤, 不要狂热于工具, 关注自己, 关注做事, 工具神马的, 够轻够用就好, 适合自己的才是最好的.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一次只做一件事&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人是并行动物, 但不意味着你可以同时干几件事.&lt;/p&gt;
&lt;p&gt;同时并行干几件事, 代价太大, 先不说最坏的情况是都干砸了, 最好的都干成了, 但是你也把自己搞得筋疲力尽.&lt;/p&gt;
&lt;p&gt;不断的中断, 上下文切换, 最终导致了&lt;code&gt;cpu&lt;/code&gt;过载......&lt;/p&gt;
&lt;p&gt;一次只做一件事, 集中精力, 高效搞定, 然后下一件.&lt;/p&gt;
&lt;p&gt;或者, 你可以将&lt;code&gt;想法&lt;/code&gt;挂起后台, 到了你真正去做的时候, &lt;code&gt;想法&lt;/code&gt;已经进化并成熟了很多.(亲测有效)&lt;/p&gt;
&lt;p&gt;so, 不要在&lt;code&gt;一边....一边....&lt;/code&gt;, 或许看起来很忙很努力, 就像&amp;lt;&amp;lt;Rewrok&amp;gt;&amp;gt;中提到的&lt;code&gt;工作狂&lt;/code&gt;, 这是很愚蠢的事情.(能多线doing的天才除外啊)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;为什么要用番茄工作法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;面对复杂, 望而却步&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;无聊琐事, 越拖越久&lt;/li&gt;
&lt;li&gt;小事忙活一天, 大事一件没办&lt;/li&gt;
&lt;li&gt;最后期限, 步步紧逼&lt;/li&gt;
&lt;li&gt;从休息回到工作, 心智调整不过来&lt;/li&gt;
&lt;li&gt;一错再错, 不长记性&lt;/li&gt;
&lt;li&gt;没想到一件事要做这么久&lt;/li&gt;
&lt;li&gt;没想到一件事越做越复杂&lt;/li&gt;
&lt;li&gt;头脑被各种想法占据&lt;/li&gt;
&lt;li&gt;时间都用来学习适应复杂的工作方法了&lt;/li&gt;
&lt;li&gt;只顾低头干活, 忘了抬头看路&lt;/li&gt;
&lt;li&gt;把预估当做承诺            &lt;/li&gt;
&lt;li&gt;牵着不走, 打着倒退&lt;/li&gt;
&lt;li&gt;完美主义, 碍手碍脚&lt;/li&gt;
&lt;li&gt;前怕狼后怕虎, 害怕失败和批评&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;通过执行一套相同的动作和准备程序, 可以使大脑自我调整, 进入执行某类事务的最佳状态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有点&lt;code&gt;迷信&lt;/code&gt;的感觉. 但是, 其实目的仅仅是像书里说的, 通知大脑, 我要开始做什么了, 准备好.&lt;/p&gt;
&lt;p&gt;另一个我觉得, 是为了防止中断, 例如开工前去倒好水, 调整好电脑, IM和邮件通知关掉等等,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;短暂的定期休息, 能够促进融会贯通的能力.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It works.&lt;/p&gt;
&lt;p&gt;每隔25分钟, 常规休息, 4个番茄钟后进行15~30分钟阶段休息&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;心流&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一种精神状态, 创造性的状态.&lt;/p&gt;
&lt;p&gt;明确的目标, 集中, 专注, 自我意识消失, 时间感扭曲, 直接和即时反馈, 能力水平与面对挑战的平衡, 个人控制感, 工作本身的内在奖励, 行为与认知的合一.&lt;/p&gt;
&lt;p&gt;在那种状态下, 效率奇高, 你感觉自己无所不能, 集中专注, 自我意识消失(你不会意识到自己在这种状态下)&lt;/p&gt;
&lt;p&gt;虽然书中提到&lt;code&gt;节奏&lt;/code&gt;一说, 要定时从&lt;code&gt;心流&lt;/code&gt;中跳出规划全局再进入, 但我更倾向于多进入这种状态, 尽可能长地维持, 因为要进入&lt;code&gt;心流&lt;/code&gt;状态, 是很困难的. 如何快速进入也是需要逐渐训练的.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在短时间内对工作方法做反复调整&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;小步快跑, 调整得到&lt;code&gt;正确的姿势&lt;/code&gt;&amp;mdash;论如何优雅地工作&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;番茄时间工作法的阶段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;计划: 从inbox里, 得到一张&lt;code&gt;今日待办&lt;/code&gt;的清单(当天的自我承诺)&lt;/li&gt;
&lt;li&gt;跟踪: 开始番茄钟后, 收集一些过程指标, 比如中断次数&lt;/li&gt;
&lt;li&gt;记录: 一天结束时, 将跟踪数据记录归档&lt;/li&gt;
&lt;li&gt;处理: 对跟踪数据进行分析思考, 得到一些特征和规律&lt;/li&gt;
&lt;li&gt;可视化: 将信息组织起来, 找出改进流程的思路&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上是每天要进行的, 个人感觉太重了, 而且重心在改进, 而不再&lt;code&gt;do&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;前期还没有形成自己节奏的时候, 适用, 中后期, 应该将重心放在&lt;code&gt;do&lt;/code&gt;上, 轻化&lt;code&gt;计划&lt;/code&gt;和&lt;code&gt;跟踪&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;处理外部中断&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果是&lt;code&gt;别人的问题&lt;/code&gt;, 进行分派.&lt;/p&gt;
&lt;p&gt;如果是&lt;code&gt;我的问题&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;邮件/IM过来的, 可视为不紧急, 完成番茄钟后处理&lt;/li&gt;
&lt;li&gt;电话, 一两分钟能done的, 做掉. 不能, 确认紧急程度, 不紧急, 给承诺, add to TODO list, back to work. 紧急的, 到4&lt;/li&gt;
&lt;li&gt;当面, 同2, 确认对方最晚可接受的时间, 如果不紧急, 承诺, 结束对话&lt;/li&gt;
&lt;li&gt;紧急, 给当前工作打断点, 注释或纸笔, 写下当前状态思路, 然后去做紧急的事情.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;书中提到的处理策略: &lt;code&gt;告知(dong something)-协商(when)-计划(todo list)-答复(done)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;怎么区分&lt;code&gt;紧急&lt;/code&gt;, 需要慢慢去学习.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;邮件的处理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果答复时间不超过1分钟, 立即答复&lt;/p&gt;
&lt;p&gt;如果需要分派, 分派&lt;/p&gt;
&lt;p&gt;如果可以委托他人, 委托&lt;/p&gt;
&lt;p&gt;如果需要我处理, 不紧急, 回复处理时间, 记todo list&lt;/p&gt;
&lt;p&gt;如果需要我处理, 紧急?(紧急的事情会用邮件? 一般是&lt;code&gt;伪紧急&lt;/code&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;过度学习&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;达到熟练程度后, 继续学习或者练习的行为.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;持续改善&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一种工作方法, 以改进为目标, 对渐进变化的专注.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;事前预估与时间所花工夫之间经常不一致&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;做预估的方法或能力有待改进&lt;/li&gt;
&lt;li&gt;工作开始后, 又出现新情况, 新问题, 使得环境发生改变.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr/&gt;
&lt;p&gt;最后&lt;/p&gt;
&lt;p&gt;很多时候, 我们的工作倾向于&lt;code&gt;无序&lt;/code&gt;的, 如何将有限的时间分配到无限的工作中, 需要一些技巧, 并且辅助以工具, 不要神化&lt;code&gt;技巧&lt;/code&gt;, 也不要狂热于&lt;code&gt;工具&lt;/code&gt;, 最重要的是人本身, 是完成事情本身, 学习一些方法(番茄/GTD), 应用, 思考, 改进, 这就够了:)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 30 Nov 2014 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2014-11-30:posts/2014/11/30/pomodoro-technique-illustrated.html</guid><category>books</category></item><item><title>简约之美 &amp; 编写可读代码的艺术</title><link>http://www.wklken.me/posts/2014/11/16/code-simplicity-and-the-art-of-readable-code.html</link><description>&lt;p&gt;最近陆续收到一些donation, 非常感谢哈, blog的文章说多不多说少不少, 大部分是笔记性质的, 主要目的还是积累以及方便自己查询回顾, 分享出来, 希望有所帮助:)&lt;/p&gt;
&lt;p&gt;ps: 昨天将国内ip切到gitcafe了, 加载速度应该快了很多, 在此特别感谢下&lt;a href="https://gitcafe.com/"&gt;gitcafe&lt;/a&gt;. (关于如何国内国外切分访问, google大法)&lt;/p&gt;
&lt;p&gt;今天要提的是&amp;lt;&amp;lt;简约之美&amp;mdash;软件设计之道&amp;gt;&amp;gt; 以及 &amp;lt;&amp;lt;编写可读代码的艺术&amp;gt;&amp;gt;, 主要原因是, 经典, 更重要的是, 足够薄:), 建议买了珍藏, 也是属于那种不同时期反复读会有不同感受的书&lt;/p&gt;
&lt;p&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;
&lt;h2 id="_1"&gt;简约之美&lt;/h2&gt;
&lt;p&gt;这本书, 用一百页来说明, 软件开发设计中, 一些十分简单的道理.&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/code-simplicity.jpg"/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;好的程序员和差的程序员的区别在于理解能力. 差劲的程序员不理解自己做的事情, 优秀的程序员则相反. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;理解能力&lt;/code&gt;, 看起来蛮虚的一个词, 但是在工作中真正进行沟通时, 你会发现区别非常大, 决定了是&lt;code&gt;一次沟通&lt;/code&gt; 还是 &lt;code&gt;反复沟通&lt;/code&gt;; 是&lt;code&gt;直达目标&lt;/code&gt;, 还是&lt;code&gt;不断曲折&lt;/code&gt;; 是一次&lt;code&gt;搞定&lt;/code&gt;, 还是&lt;code&gt;改改改&lt;/code&gt;; 是&lt;code&gt;反馈有效问题&lt;/code&gt;, 还是&lt;code&gt;反馈不是你的问题的问题空耗你的时间&lt;/code&gt;. 所以花费时间去理解需求, 想明白之后再开始写代码, 这个很重要! (真正团队干活你会有直观感受的)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题的根源通常在于编程......这一切都与复杂性有关......编程就成了把复杂问题化解为简单问题的劳动......&amp;rdquo;好程序员&amp;rdquo;应当竭尽全力, 把程序写得让其他程序员容易理解.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;bug的本质, 归根结底在于编程本身. &lt;/p&gt;
&lt;p&gt;我们往往容易把问题复杂化(大而全, 追求完美, 过早优化, 过早关注细节), 而过度复杂的后果导致后期代码的难以维护.(所谓的到时候再改/重构, 都是虚妄的), 程序员遇到一坨代码(别人写的或者之前写的), 有优化的冲动, 但是迫于需求或者时间或者系统稳定性, 往往惧怕&lt;code&gt;变化&lt;/code&gt;, 这段代码能工作就行.&lt;/p&gt;
&lt;p&gt;但是为什么要复杂化呢? 最简单的, 莫过于在最初就做到最好, 不要给自己&lt;code&gt;到时候再重构&lt;/code&gt;的念头. 写好每行代码.&lt;/p&gt;
&lt;p&gt;这里的&lt;code&gt;其他程序员&lt;/code&gt;, 也可能是&lt;code&gt;一个月&lt;/code&gt;后的自己. 如果经常发现回头看自己的代码都看不懂, 那么说明进步的余地还是很大的:). &lt;/p&gt;
&lt;p&gt;到这里, 我们的目标转向: 寻找提高代码质量的科学方法.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每个写代码的人都是设计师&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;小到一个变量名, 一个判断逻辑, 大到一个函数, 一个类, 一个算法, 从代码里可以感受到很多东西. 拿建筑设计师对比, 写代码, 如同构筑一栋建筑, 不管是小屋/公寓还是摩天大厦, 好的设计永远美好, 而糟糕的设计, 无论大小, 永远丑陋. 很多概念, 意识和技巧在里面.(建议阅读&lt;code&gt;编写可读代码的艺术&lt;/code&gt;, 然后是&lt;code&gt;代码大全&lt;/code&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;全部软件都有一个相同的目标: 帮助其他人......不能理解&lt;code&gt;帮助其他人&lt;/code&gt;的程序员, 只能写出糟糕的程序, 也就是说, 他们的程序提供不了什么帮助&amp;hellip;&amp;hellip;在做与软件有关的决策时, 指导法则就是判断能够提供什么样的帮助&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同样, 这里的&lt;code&gt;其他人&lt;/code&gt;, 可能是你自己. &lt;/p&gt;
&lt;p&gt;需求的优先级, 取决于这个需求对于用户帮助的大小.&lt;/p&gt;
&lt;p&gt;你这样做/这个功能/这么处理, 对于目标, 对于团队, 对于个人, 有何帮助?&lt;br/&gt;
如果没有, 为什么要这么做?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件设计科学的目标: 1.确保软件能够提供尽可能多的帮助. 2.确保软件能够持续提供尽可能多的帮助 3.设计程序员能尽可能简单地开发和维护的软件系统. 才能实现1/2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1代表软件本身的价值, 2代表软件的可维护性可扩展性, 3代表, 好的/简单的设计, 决定了可维护性和可扩展性, 是万丈高楼的地基. 不过1和3, 在有限资源的情况下(资源永远是不够的), 是互相冲突的, 所以要思考如何保持平衡.&lt;/p&gt;
&lt;p&gt;这里提到, 软件的开发和维护都应当简单, 要避免困难和复杂.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件设计方程式 可取程度=价值/成本  =&amp;gt;  可行性=(当前价值+未来价值)/(实现成本+维护成本)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当前价值和实现成本往往是可评估的, 人们会关注于这一点, 带来的问题就是忽略了未来价值和维护成本, 这两个和时间相关, 不易评估, 但是却更为重要. 人很容易只着眼于现在而忽略了未来. 所以写代码时需要注意, &lt;code&gt;存在着未来&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;相比降低实现成本, 降低维护成本更为重要&lt;/code&gt;. 很直观的感觉, 一个设计良好的接口, 在需求变更的时候, 只需要动个参数或者动几行代码或者压根不需要改. 而一个糟糕的设计里, 每次需求变更, 会发现需要改动很多代码, 甚至是重写, 连带测试等时间, 你会发现很多时间耗费在里面. 所以应该一开始就理解, 往未来看一眼(预测短期未来是可行的, 预测长期未来是不靠谱的), 再进行设计, 再进行代码.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;变化定律: 程序存在的时间越久, 它的某个部分需要变化的可能性就越高.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一切都是变化的, 你自己, 还有这个世界.&lt;/p&gt;
&lt;p&gt;所以需求变更是必然的:)&lt;/p&gt;
&lt;p&gt;之前学到一个很重要的观点: &lt;code&gt;拥抱变化&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件设计三大误区: 1.编写不必要的代码 2.代码难以修改 3.过分追求通用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;YAGIN, &lt;code&gt;不要编写不是必须的代码, 并且要删除没有用到的代码&lt;/code&gt;. 版本库干嘛用的? 提交, 然后删除那些没用的, 然后再提交:)&lt;/p&gt;
&lt;p&gt;僵化设计的原因: 1.对未来做了太多假设(......) 2.不仔细设计就编写代码(新手需注意). &lt;code&gt;设计程序时, 应当根据你现在确切知道的需求, 而不是你认为未来会出现的需求&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;避免过度设计: 仅仅根据目前确知的需求来考虑通用.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;缺陷概率定律: 在程序中新增缺陷的可能性与代码修改量成正比&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好的设计, 代码少(很大可能), 代码变更少, 而糟糕的设计, 反之. 从而, bug出现的概率显而易见&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最好的设计, 就是能够适应外界尽可能多的变化. 而软件自身的变化要尽可能少.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不变应万变, 追求之&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;永远不要&lt;code&gt;修正&lt;/code&gt;任何东西, 除非它真的可能有问题, 而且有证据表明问题确实存在.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如: &amp;ldquo;过早优化&amp;rdquo;!&lt;/p&gt;
&lt;p&gt;当问题成为问题的时候, 才是问题, 才需要去处理!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;理想情况下, 任何系统里的任何信息, 都应当只存在一次.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;避免重复. 变更时代价最小.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简洁定律: 软件任何一部分的维护难度, 反比于该部分的简洁程度.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简洁是相对的.&lt;/p&gt;
&lt;p&gt;保持一致/可读性(代码被阅读的次数远远多于编写和修改的次数)/命名/注释(代码的意图通常不应该用注释来说明, 直接阅读代码就应当能够理解)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;复杂性是会叠加的, 而不是简单的线性叠加&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;问题复杂, 解法不一定复杂. &lt;/p&gt;
&lt;p&gt;解决复杂性: 把它分解成独立的小部分, 并进行重新设计.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;测试法则: 你对软件行为的了解程度, 等于你真正测试它的程度......除非亲自测试过, 否则你不知道软件是否能正常运行.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;about test.&lt;/p&gt;
&lt;h2 id="_2"&gt;编写可读代码的艺术&lt;/h2&gt;
&lt;p&gt;关于如何编写高质量可读的代码的方法论:)&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/the-art-of-readable-code.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;&amp;lt;The Art of Readable Code&amp;gt;&amp;gt;, 这本书就不细写了, 因为不到两百页, 几乎每一页都是干货.&lt;/p&gt;
&lt;p&gt;强烈推荐.&lt;/p&gt;
&lt;p&gt;代码大全太厚, &amp;lt;&amp;lt;Clean Code&amp;gt;&amp;gt;太晦涩, 建议来读这本. 本次总能得到一些感悟.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 16 Nov 2014 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2014-11-16:posts/2014/11/16/code-simplicity-and-the-art-of-readable-code.html</guid><category>books</category></item><item><title>重读Rework</title><link>http://www.wklken.me/posts/2014/11/09/rework.html</link><description>&lt;p&gt;忙碌了一段时间, 终于迎来了久违的周末.&lt;/p&gt;
&lt;p&gt;时间过得很快, 入职快三个月了, 很忙但很充实, 带来的影响是, 时间少了, 读书和写 blog 的进度随之放缓, 但是积累了很多笔记.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&amp;lt;Rework&amp;gt;&amp;gt;&lt;/code&gt;这本书, 是&lt;code&gt;37signals&lt;/code&gt;三本本书中的第二本, 读过很多遍了, 短小精悍, 但是每次重读都会有一些不同的收获, 建议买一本珍藏:)&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/rework.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;以下是一些摘录和自己的看法, 仅供参考&lt;/p&gt;
&lt;p&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;做一些自己喜欢的事情并从中获得些回报&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要思考下自己目前的工作, 是否符合这一点? 如果是, 那就继续努力做好, 如果不是, 就需要思考下, 自己喜欢做什么?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一种普遍的错误认知是: 人要从错误中吸取经验教训.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要学会从错误中吸取经验, 这句话是没错的, 不断尝试, fail fast, 然后得到一些东西, 这也是没问题的. 但是, 不要认为, 不断从错误中吸取教训就能获得成功. 就像通关游戏有一千个坑, 你或许可以一个个试, 然后一次学到一些东西, 但是....有没有想过, 失败不是成功的先决条件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你更应该从成功中汲取养分.成功才是真正靠得住的教材.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;优秀是一种习惯, 进化是建立在成功的基础之上的. 每个人, 无时无刻都是在往前走的, 然而, 每个人最终得到的并不一样. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;计划即瞎猜......现在就决定你这周要做什么,不必去管全年的计划, 只要找出下一项最重要的任务, 然后起而行之.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;准确理解应该是: 长期计划即瞎猜......你不需要年度/季度/月度计划, 但是你需要年度/季度/月度目标, 计划总是赶不上变化的, 你总是花费很长一段时间或者很多精力给自己制定一个非常完美的计划, 但是计划永远只是计划而已.不去做, 只是徒费精力.我的做法是, 有目标, 然后拆解成小目标, 小目标更灵活可变, 而在do的时候, 只专注于一两个, 并且根据自己的心情/状态等灵活变动. &lt;br/&gt;
拥抱变化, 只要保证不偏离目标主体就行.&lt;br/&gt;
不过短期计划还是需要的, 例如每天的todo list. 我现在切换成了&lt;code&gt;things&lt;/code&gt;管理, &lt;code&gt;wunderlist&lt;/code&gt;貌似也不错, 不过你需要找一个最适合你自己的工具.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;工作狂的行为不但没有必要, 而是愚蠢至极......真正的英雄早已想出办法, 搞定一切, 然后回家了.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;获取三年前刚毕业那会, 我不会完全赞同这个观点, 经过三年, 三家公司, 三种完全不同的工作风格和模式, 看法已经彻底改变了.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;快乐工作, 认真生活&lt;/code&gt;, 这句话我一年多前才完全认同之. &lt;code&gt;Work Smarter, Not Harder&lt;/code&gt;&amp;mdash;来自zapier的一篇博文&lt;a href="https://zapier.com/blog/best-ways-work-smarter-not-harder/"&gt;16 of the Best Ways to Work Smarter, Not Harder&lt;br/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我之前的博文提过, 恶性循环/良性循环, 所谓的工作狂, 就是处在恶性循环中而不自知, 如果觉得自己有点苗头, 需要自省.&lt;/p&gt;
&lt;p&gt;拼的是效率, 而不是时间.&lt;/p&gt;
&lt;p&gt;首先, 工作永远是干不完的, 你必须明确知道这一点. 其次, 效率是可以提升的, 你也必须认同这一点, 并通过不断完善自己的工作风格/模式, 优化共同方式, 积累经验, 技术栈工具栈补完, 你可以达到一个很好的状态. 再次, 努力成为&lt;code&gt;英雄&lt;/code&gt;而不是&lt;code&gt;工作狂&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用自己的方式, 做自己喜欢做的事情, 并从中获得回报.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这才是工作.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在宇宙中留下你的足迹&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人的一生有限.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;挠自己痒处,......最好还是做自己真正关心的东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;写代码, 有一个&lt;code&gt;吃自己的狗粮&lt;/code&gt;一说. 这里同, 做自己关心的东西, 感兴趣的东西, 优秀到卓越的区别在于此.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在你的人生中真正有意义的是你做了什么, 而不是你想过什么,说过什么, 或者计划过什么&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;计划党/拖延症患者需注意....&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;永远不会有正当其时的时候.....完美的时机永远不会出现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以, 不要找借口了吧骚年? 活在当下, 现在就开始.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Draw a line in the sand.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;信念, 你所坚守的到底是什么?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;坚守某种信念并不仅仅是把它写下来. 不但要相信它, 还要让他成为你的生活方式.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;think about it&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你需要的是承诺策略, 而不是退出策略&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你做事情的第一反应是?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与其做半个成品, 不如做好半个产品&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;以后再重构&lt;/code&gt;, 这句话是很虚无缥缈的, 可以说是遥遥无期, 所以, 经手的每一件事情, 每一行代码, 做到最好. 不要考虑&lt;code&gt;退出策略&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要过早关注细节......你只有在真正开始后, 才能认清到底哪些细节才是最重要的.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同&lt;code&gt;不要过早优化&lt;/code&gt;:)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关注不变因素&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么才是不变的? 才是核心? 才是重要的?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人们把装备当做取胜的法宝, 却不愿花时间去练习......&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;妄图寻找捷径? &lt;/p&gt;
&lt;p&gt;有一段时间是工具控, 沉迷各种工具，编辑器，插件，操作系统，效率，gtd,浏览器等等&lt;/p&gt;
&lt;p&gt;其实，更重要的是事情本身, 是人本身&lt;/p&gt;
&lt;p&gt;Get things done, 就足够了&lt;/p&gt;
&lt;p&gt;花时间找到适合自己的工具, 不太重, 不过轻, 刚刚合适就好. 而不是花时间收集一大堆东西, 徒耗精力.&lt;/p&gt;
&lt;p&gt;现在，已经没那么狂热了，只遵循一个原则，尝试新事物，针对所有工具，使用二八原则，只关心最核心的20%. 足够了.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;立马就上线...为了迅速上线,要砍掉一切不必要的东西&amp;hellip;最有效的成功方法是不断尝试. 不要再臆测到底会发生什么事了, 到现实中去寻找答案吧.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;小步快跑才是王道&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;退出的理由?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么要这么做? 你在解决什么问题?这真的有用么?你加上去的东西有价值么? 这种改变真的会起作用么? 这种方法更简单吗? 有其他更值得做的事情吗? 这样做值吗?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Interruption is the enemy of productivity&amp;hellip;&amp;hellip;你的生活被各种干扰包围着, 只有你自己才能去发起反击.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;干扰不可避免, 只看你如何去解决. 你必须要形成行之有效的工作风格/模式, 以及沟通方式, 并&lt;code&gt;培训&lt;/code&gt;你的战友.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;会议有毒&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如何更高效地开会? 这几个月已经彻底杜绝了&lt;code&gt;被动&lt;/code&gt;的会议, 但是有些必要的会议时间还是太长了.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Good enough is fine.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;没有更好, 只有合适. 简单有效就ok.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t be a hero&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有些时候, 需要考虑适时退出.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该睡觉时睡觉&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作息规律, 高效保证, 熬夜苦撑没有任何好处&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;积累动力的方法就是完成一项任务，然后紧接去完成下一项任务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;重要, 不要给自己设置一个不可能完成的东西, 然后被恐惧压垮&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;预估都是垃圾&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不是不预估, 而是, 你需要聪明地去预估. 分治, 小的任务总是更容易把控些.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要做得比你的对手少, 并以此来击败他们.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;少.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要相信&amp;rdquo;客户永远是正确的&amp;rdquo;这种废话&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不要相信&amp;rdquo;产品/老板永远是正确的&amp;rdquo;这句话, 思辨地看待问题, 提出问题, 解决问题. 学会说&amp;rsquo;no&amp;rsquo;. (处理需求的时候很重要)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;头脑发热不等于当务之急&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;做当前最重要的事情, 而不是最想去做的事情.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要保持低调, 你可以利用这段时间继续调整你的策略, 解决纠结的问题, 测试各种创意, 尝试新事物.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;黑暗森林?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一夜成名只是传说......道路很艰难, 但你必须充满信心.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;生活&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;受不了时再招人......不要提前招人.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你最终会明确你想要招的是什么样的人.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;鸡尾酒会上的陌生人......要营造一个能让人直言不讳并且有安全感的环境.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所处的环境是不是这样的? 你能否感觉到自己是一份子, 能改变些什么? 而不是深深的无力感?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;多年的无关经验......真正的差别来自于个人的努力程度, 性格差异以及智力水平.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人和人的区别和工作年限相关性其实蛮低的, 深有体会.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文化不是由谁创造的......企业文化是行为, 不是语言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;连着实习, 四家公司, 企业文化? 有两家白纸黑字进去新员工培训就有, 大大的标语什么的, 迄今没有记得是什么. 杭州一年多, 是那种潜移默化的, 你从大家的身上可以感受到的东西, 对我影响很大, 受益良多. 现在感受到的, 同样是身体力行, 在一件件事情中. 所以找工作, 如果觉得契合, ok, 如果感觉所谓的&lt;code&gt;文化&lt;/code&gt;很SB, 果断些.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;会写代表会思考&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码/总结/博客&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要一受伤就结疤, 不要因为一个人的一次错误而去指定规章制度.只有当一件事情反复发生时，才需要为之制定规章制度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们做事的时候是不是也这样? 一遭被蛇咬, 十年怕井绳. 这样自己的领域会不断地受限的.&lt;/p&gt;
&lt;p&gt;所以, 事不过三的原则很重要:)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;灵感稍纵即逝......想法是不朽的, 一直都会存在. 最不可能长存的是灵感.&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 09 Nov 2014 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2014-11-09:posts/2014/11/09/rework.html</guid><category>books</category></item><item><title>读书笔记——追随你的心，用思想改变世界</title><link>http://www.wklken.me/posts/2014/01/19/follow-your-heart.html</link><description>&lt;p&gt;乔布斯的十大演讲&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/follow-your-heart.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;很喜欢封面的设计，这本书的纸质也很赞，摸起来蛮有质感的，书买了应该有两年了，一直带着，但是没怎么看&lt;/p&gt;
&lt;p&gt;今天又重新翻出来，书的边缘，已经有了岁月的痕迹，微微泛黄&lt;/p&gt;
&lt;p&gt;封面是乔帮主，还有那句经典的"Follow your heart"&lt;/p&gt;
&lt;p&gt;曾几何时，对帮主不是很了解，即使是帮主走的那年，12年十月，看了乔布斯传，对apple有了基本的认识&lt;/p&gt;
&lt;p&gt;12年后，逐渐的，变成了果粉，没有刻意去追求什么，只是，apple的产品，逐一进入的我的生活&lt;/p&gt;
&lt;p&gt;我曾经说过，买macbook是2013年最正确的决定之一，然后，运气爆表年会中了一个ipad air，变成了今年最幸运的事情之一。用了一天，下了多看,kindle,知乎，网易公开课，还有google浏览器，微博，pocket,evernote。以后不用抱着电脑累了，相信会为我的生活带来些什么&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;整本书，看看第一章第二章即可&lt;/p&gt;
&lt;p&gt;第一章，语录，可以反复读，即使读不懂，随着时间，阅历丰富，有些东西会逐渐懂得。&lt;/p&gt;
&lt;p&gt;第二章，斯坦福的演讲，看看不错, &lt;a href="http://v.163.com/special/opencourse/jobs.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;后面的，大部分是发布会，以及采访，可以直接看视频，看文字没啥特别的感觉，感觉编辑纯粹是凑字数&lt;/p&gt;
&lt;p&gt;另外，还有一个遗失的访谈，蛮长的，一个多小时，但是不得不说，值得一看，&lt;a href="http://v.163.com/movie/2013/5/N/R/M8TBJIK7D_M8TBLIINR.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;以下，是一些感受&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我活着，就是为了改变世界&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我只能说，帮主做到了。&lt;/p&gt;
&lt;p&gt;很多时候，我都在思考，为什么活着，这个是个哲学问题，又不是，很难想明白的&lt;/p&gt;
&lt;p&gt;每个工程师，都有改变世界的梦想&lt;/p&gt;
&lt;p&gt;这么多年，有些端倪了，活着，对我而言，更像是：&amp;ldquo;创造价值&amp;rdquo;，让我，以及我所能影响到的人，生活更加美好些&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;领袖和跟风者的区别就在于创新&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有所感受，不敢妄加评论，起码我所接触到的中国互联网环境还太狭窄&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人要么是天才，要么是笨蛋&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有些偏激，但是蛮有道理的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;热忱是胜利的秘诀&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对所做的事情，需要有热情&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;佛教中有一句话：初学者心态。拥有初学者心态是件了不起的事情&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每隔一段时间，都需要倒掉，空杯心态，去接触新的东西，去重新认识已有的东西&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;求知若渴，虚怀若谷&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前者是现在必须努力达到的目标，后者，是一生需要学习和感悟的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每个人的时间有限，所以你不要为别人活着。不要让自己的内心被别人的意见左右，不要活在他人的观念里，更不要被平庸的教条限制。最重要的是，坚定地寻找和倾听自己心灵发出的声音，那才是你的真实想法。要相信你的直觉和心灵。除此之外，其他的一切都是次要的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我觉得，每个人都有必要自己读一读这段话，从小到大，我们的思想受到了太多束缚和限制，所以导致很多人，终其一生，都为了别人而活，活在别人的观念里&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;互联网创业不在于有多少人开始创办公司，而在于有多少人能坚持到底&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;坚持很重要&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;没有经验，你就永远不可能知道经验的价值，或者永远不可能知道如何正确地保有经验所创造的财富&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;经验很重要，见过多年只有一年经验的人，也见过一年有多年经验的人。刚毕业那会，对所谓的&amp;ldquo;经验&amp;rdquo;很不屑，两年多过来，有了蛮多认识的。经验，很重要，而且通过书本什么的很那学来的，实践出真知。经验，应该可以作为&amp;ldquo;聪明&amp;rdquo;和&amp;ldquo;智慧&amp;rdquo;的分界线吧。and，经验是需要积累的，不断持续的积累，有意识地积累。帮主也提到，过去的一切，点滴，即使再小，在未来的某个时刻，也会起到作用，所有的事情和经历，都是关联的。all connected!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;成为海盗吧，成为海盗比加入海军更有意思&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;海军的优势，或许是&amp;ldquo;纪律&amp;rdquo;，但是劣势，或许也是&amp;ldquo;纪律&amp;rdquo;，向往自由的人，成为&amp;ldquo;海盗&amp;rdquo;更为合适。我的征途是星辰大海&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你若想将未来的点联系在一起，那你就只能先将过去的点联系起来。你得相信你的未来和你的过去是联系着的。你必须要相信直觉、命运、生活等这些东西。这个方法从来没有让我失望过，它反而让我的生活发生了奇妙的变化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很多事情，并非一蹴而就，或许在外人看来是，但是背后，都以一段很长的过去。我们的现在，就是未来的过去，未来想要变成什么得到什么，和现在是相关的。&lt;/p&gt;
&lt;p&gt;另外，我开始相信直觉。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你的工作将会占据你的大部分时间，做你自己认为最了不起的工作时唯一让你真正满意的方法。而做好你最满意的工作的唯一方法就是热爱你所做的事情。因此，继续找你满意的工作，直到找到它，不要气馁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;非常赞同，在懵懂中度过了大学四年，花了接近两年，看是有点懂了。做自己喜欢的事情。决定并不难，难的是，如何真正知道自己喜欢什么。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;记住一点，就是每个人都会死去。这是我遇到的最重要的决策工具，很多重大的人生选择都是在它的帮助下完成的。外部所有的骄傲、期望、对失败或尴尬的恐惧，在死亡面前，都会消失殆尽，只留下真正重要的东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有点感觉，但是还做不到，可能，还是自己太年轻了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;热爱你所做的事是做伟大工作的最佳方法。如果你还没有找到你想要的工作，继续找。不要停下来。只要你全力以赴，你知道你一定会找到它。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;坚持&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人生苦短，你总有一天会离开人世。一个人没有机会去做那么多事，所以每个人都应该极其优秀才行。因为这就是我们的生活。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;做选择的时候，多想想这个问题&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;2014-01-19&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 19 Jan 2014 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2014-01-19:posts/2014/01/19/follow-your-heart.html</guid><category>books</category></item></channel></rss>