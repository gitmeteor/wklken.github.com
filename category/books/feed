<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>wklken's blog - books</title><link>http://www.wklken.me/</link><description></description><lastBuildDate>Sat, 17 Jun 2017 23:39:00 +0800</lastBuildDate><item><title>重构 - 读书笔记(Python示例)</title><link>http://www.wklken.me/posts/2017/06/17/refactoring-07.html</link><description>&lt;p&gt;去年十二月, 重读时, 输出了几篇博文, 主要几章重构技巧梳理 &lt;a href="http://www.wklken.me/posts/2016/12/03/refactoring-01.html"&gt;6&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/03/refactoring-02.html"&gt;7&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/03/refactoring-03.html"&gt;8&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/04/refactoring-04.html"&gt;9&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/04/refactoring-05.html"&gt;10&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/04/refactoring-06.html"&gt;11&lt;/a&gt;, 这周重读时, 从另一个角度总结一下&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;我们总是想着, 找个时间重构, 额, 其实, 重构更应该放在平时, 每一次去变更代码时处理. 毕竟, 所谓的重构契机有时候太过遥远; 而如果不做重构, 痛苦的是每时每刻维护代码的自己&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你发现自己需要为程序添加一个特性, 而代码结构使你无法很方便地达成目的, 那就先重构那个程序, 使特性的添加比较容易进行, 然后再添加特性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外, 如果可能, 尽量加单元测试, 哪怕一次只增加一两个, 一段时间后, 你会发现, 你会感谢过去的自己&lt;/p&gt;
&lt;h2 id="yuan-ze"&gt;原则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;小步前进, 频繁测试&lt;/li&gt;
&lt;li&gt;隔离变化&lt;/li&gt;
&lt;li&gt;控制可见范围, 让变量/常量/函数/类等, 在最小的范围内可见. 例如设为私有变量/私有函数, 移除不必要的设值函数&lt;/li&gt;
&lt;li&gt;重构时, 不要关注性能. 到性能优化阶段 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 17 Jun 2017 23:39:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2017-06-17:/posts/2017/06/17/refactoring-07.html</guid><category>books</category></item><item><title>读书笔记-重构: 章11 处理概括关系</title><link>http://www.wklken.me/posts/2016/12/04/refactoring-06.html</link><description>&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-11-chu-li-gai-gua-guan-xi"&gt;章11 处理概括关系&lt;/h2&gt;
&lt;p&gt;多是类相关, 浅显易懂, 不写示例代码了, 有兴趣可以看看原书的例子&lt;/p&gt;
&lt;h4 id="111-pull-up-field-zi-duan-shang-yi"&gt;11.1 Pull Up Field 字段上移&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;两个子类拥有相同的字段. 将该字段移至超类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="112-pull-up-method-han-shu-shang-yi"&gt;11.2 Pull Up Method 函数上移&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;游戏函数, 在各个子类中产生完全相同的结果. 将该函数移至超类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="113-pull-up-constructor-body-gou-zao-han-shu-ben-ti-shang-yi"&gt;11.3 Pull Up Constructor Body 构造函数本体上移&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你在各个子类中拥有一些构造函数, 他们的本体几乎完全一致. 在超类中新建一个构造函数, 并在子类的构造函数中调用它&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="114-push-down-method-han-shu-xia-yi"&gt;11.4 Push Down Method 函数下移&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;超类中的某个函数只与部分(而非全部)子类有关. 将这个函数移到相关的那些子类中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="115-push-down-field-zi-duan-xia-yi"&gt;11.5 Push …&lt;/h4&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 04 Dec 2016 20:56:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-12-04:/posts/2016/12/04/refactoring-06.html</guid><category>books</category></item><item><title>读书笔记-重构: 章10 简化函数调用</title><link>http://www.wklken.me/posts/2016/12/04/refactoring-05.html</link><description>&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-10-jian-hua-han-shu-diao-yong"&gt;章10: 简化函数调用&lt;/h2&gt;
&lt;h4 id="101-rename-method-han-shu-gai-ming"&gt;10.1 Rename Method 函数改名&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;函数的名称未能揭示函数的用途. 修改函数名称&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;给函数一个好名字&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_number&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_office_telephone_numer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="102-add-parameter-tian-jia-can-shu"&gt;10.2 Add Parameter 添加参数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某个函数需要从调用端得到更多信息. 为此函数添加一个对象参数, 让对象带进函数所需要的信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;动机: 必须修改一个函数, 而修改后的函数需要一些过去没有的信息, 此时需要添加一个参数&lt;/p&gt;
&lt;h4 id="103-remove-parameter-yi-chu-can-shu"&gt;10.3 Remove Parameter 移除参数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;函数本体不再需要某个参数. 将该参数去除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;程序员可能经常添加参数, 却往往不愿意去去除它们.&lt;/p&gt;
&lt;h4 id="104-separate-query-from-modifier-jiang-cha-xun-han-shu-he-xiu-gai-han-shu-fen-chi"&gt;10 …&lt;/h4&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 04 Dec 2016 20:55:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-12-04:/posts/2016/12/04/refactoring-05.html</guid><category>books</category></item><item><title>读书笔记-重构: 章9 简化表达式</title><link>http://www.wklken.me/posts/2016/12/04/refactoring-04.html</link><description>&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-9-jian-hua-biao-da-shi"&gt;章9: 简化表达式&lt;/h2&gt;
&lt;h4 id="91-decompose-conditional-fen-jie-tiao-jian-biao-da-shi"&gt;9.1 Decompose Conditional 分解条件表达式&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个复杂的条件语句(if-then-else). 从if, the, else三个段落中分别提炼出独立函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;SUMMER_START&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;SUMMER_END&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_winter_rate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;_winter_servioce_charge&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_summer_rate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;not_summber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;winter_charge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;summber_charge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="92-consolidate-cnditional-expression-he-bing-tiao-jian-biao-da-shi"&gt;9.2 Consolidate Cnditional Expression 合并条件表达式&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一系列条件测试, 都得到相同结果. 将这些测试合并成一个条件表达式, 并将这个条件表达式提炼成为一个独立函数 …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 04 Dec 2016 20:50:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-12-04:/posts/2016/12/04/refactoring-04.html</guid><category>books</category></item><item><title>读书笔记-重构: 章8 重新组织数据</title><link>http://www.wklken.me/posts/2016/12/03/refactoring-03.html</link><description>&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-8-zhong-xin-zu-zhi-shu-ju"&gt;章8: 重新组织数据&lt;/h2&gt;
&lt;h4 id="81-self-encapsulate-field-zi-feng-zhuang-zi-duan"&gt;8.1 Self Encapsulate Field 自封装字段&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你直接访问一个字段, 但字段间的耦合关系逐渐变额笨拙. 为这个字段建立取值/设置函数, 并且只以这些函数来访问字段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;间接访问的好处是, 可以灵活改变获取数据的途径&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;low&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 03 Dec 2016 11:10:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-12-03:/posts/2016/12/03/refactoring-03.html</guid><category>books</category></item><item><title>读书笔记-重构: 章7 在对象之间搬移特性</title><link>http://www.wklken.me/posts/2016/12/03/refactoring-02.html</link><description>&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-7-zai-dui-xiang-zhi-jian-ban-yi-te-xing"&gt;章7: 在对象之间搬移特性&lt;/h2&gt;
&lt;h4 id="71-move-method-ban-yi-han-shu"&gt;7.1 Move Method 搬移函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你的程序中, 有个函数与其所驻之外的另一个类进行更多交流: 调用后者, 或者被后者调用. 在该函数最常引用的类中建立一个有着类似行为的新函数. 将就函数变成一个单纯的委托函数, 或是将就函数完全移除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;# a lot operations with b&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;count …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 03 Dec 2016 11:05:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-12-03:/posts/2016/12/03/refactoring-02.html</guid><category>books</category></item><item><title>读书笔记-重构: 章6 重新组织函数</title><link>http://www.wklken.me/posts/2016/12/03/refactoring-01.html</link><description>&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-6-zhong-xin-zu-zhi-han-shu"&gt;章6: 重新组织函数&lt;/h2&gt;
&lt;h4 id="61-extract-method-ti-lian-han-shu"&gt;6.1 Extract Method 提炼函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一段代码可以被组织在一起并独立出来, 将这段代码放进一个独立函数中, 并让函数名称解释该函数的用途&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_owing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;print_banner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;details&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"this is the detail: "&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"amnount: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"this is the detail: "&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"amnount: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_owing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;print_banner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;print_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="62-inline-method-nei-lian-han-shu"&gt;6 …&lt;/h4&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 03 Dec 2016 11:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-12-03:/posts/2016/12/03/refactoring-01.html</guid><category>books</category></item><item><title>摘录&gt;</title><link>http://www.wklken.me/posts/2016/02/17/master-en-in-six-months.html</link><description>&lt;p&gt;在高铁上顺手刷完的一本书, 学习英语的方法论吧, 和学习编程有很多类似的地方, 互相印证.&lt;/p&gt;
&lt;p&gt;还是值得一读的, 建议想掌握英文的同学买一本读一读&lt;/p&gt;
&lt;p&gt;额, 英文这个问题困扰了我很久, 当然, 学习的主要目的是能更快更好的读懂文档以及进行一些基本交流(其实是为了刷电影美剧更方便些ORZ)&lt;/p&gt;
&lt;p&gt;从去年开始就实行&lt;code&gt;泡脑子&lt;/code&gt;的策略, 上下班各半个小时, 反复在听老友记十季的音频(安利app: 喜马拉雅). 然后固定在刷几部美剧, 买了本英文著作一字一句反复读中, 也开始在国外的论坛提问题, 发言, 用kindle开启生词模式在刷书. 当然, 俺的英文还是别别扭扭的.....&lt;/p&gt;
&lt;p&gt;程序员的一大优势是, 文档/搜索, 基本都是英文的, 这个环境还是不错的, 另外, mac/iphone/ipad全部切成英文系统, 取词软件全开, 哈哈哈.....&lt;/p&gt;
&lt;p&gt;然而, 还是不会说啊.....痛定思痛&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;以下读书摘要&lt;/p&gt;
&lt;h4 id="guan-dian"&gt;观点&lt;/h4&gt;
&lt;p&gt;本书的观点
- 我特别主张自然规律，你越能理解和运用自然规律，你就越能成功
- 一个大脑健全的成年人完全有能力在6个月内从0掌握任何一种外语！
- 只要掌握规律，跟随规律去练习，一个人能做到的结果，任何人都能做到 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 17 Feb 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-02-17:/posts/2016/02/17/master-en-in-six-months.html</guid><category>books</category></item><item><title>读书笔记-调试九法</title><link>http://www.wklken.me/posts/2015/11/29/debugging-9-rules.html</link><description>&lt;p&gt;去年十一月份, 写过一篇blog, 讲了一些自己平时进行代码调试的观点, 列了21条&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.wklken.me/posts/2014/11/23/how-to-debug.html"&gt;关于代码调试de那些事&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上周多看上买了这本书, 花了两小时读完, 做下笔记, 发现很多观点其实是类似的.&lt;/p&gt;
&lt;p&gt;这本书是九条原则, 即方法论, 了解和学习, 在实践中遵守, 有利于提升自己调试的效率:)&lt;/p&gt;
&lt;p&gt;&lt;img alt="debug-rules" src="/imgs/books/debug-rules.jpg"/&gt;&lt;/p&gt;
&lt;h4 id="1-li-jie-xi-tong"&gt;1. 理解系统&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你必须掌握系统的工作原理以及它是如何设计的。在某些情况下，还要知道为什么这样设计。如果你没有理解系统中的某个部分，那么这通常就是出问题的地方。（这不仅仅是“墨菲定律”的问题，如果你不能理解你所设计的系统，你的工作可能会变得一团糟。）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;理解是怎么设计的, 机制, 原理, 需求等等, 面对的东西才是一个白盒.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;理解系统的基本方法就是阅读手册&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;手册, 手册, 很多时候, 我们并不能抑制住自己, 去编码, 去调试, 去解决问题, 而忽略了一些重要的东西, 例如: 文档, 我们总以为自己了解一切, 很多时候很诡异的问题查查文档, 才发现, 原来文档有说明:)&lt;/p&gt;
&lt;p&gt;或者, 跳过去看源码也是不错的选择&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;理解了你自己的系统后，还会获得一个额外的好处 …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 29 Nov 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-11-29:/posts/2015/11/29/debugging-9-rules.html</guid><category>books</category></item><item><title>重读&gt;</title><link>http://www.wklken.me/posts/2014/12/06/are-your-lights-on.html</link><description>&lt;p&gt;书今年到是读了不少, 50本的目标目测已然超标了:), 发现今年的博客目标还差11篇(50篇), 目测完不成指标了, 随性写写吧, 能写几篇是几篇&lt;/p&gt;
&lt;p&gt;&lt;img alt="are-your-lights-on" src="/imgs/books/are-your-lights-on.jpg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;这本书是原先团队老大推荐的, 看过一遍, 后来自己入了一本, 今天重读(发现我越来越喜欢这类很薄的树)&lt;/p&gt;
&lt;p&gt;做事情本质上就是遇到问题，分析问题，解决问题的过程。而对如何解决问题本身，这本书做了一些讨论
           &lt;/p&gt;
&lt;p&gt;三点：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 问题是什么（期望和体验）
2. 谁的问题（不同人会有不同的解决方式，责任）
3. 问题来源
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到了一些原则性的结论，每一点仔细思考分析.&lt;/p&gt;
&lt;p&gt;记得当时总结过一句话: 当”问题”成为问题时, 才是问题.&lt;/p&gt;
&lt;p&gt;值得反复阅读, 以下更多的是做一些摘录&lt;/p&gt;
&lt;h2 id="di-yi-bu-fen-wen-ti-shi-shi-yao"&gt;第一部分: 问题是什么?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这是什么类型的问题? 谁碰到了问题? 问题是什么? 或者说, 此时此刻, 问题的本质是什么?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;谁碰到了问题? 问题的本质是什么?&lt;/p&gt;
&lt;p&gt;谁的问题? 如果没有负责人, 那将永远得不到解决. 具体到了细节 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 06 Dec 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-12-06:/posts/2014/12/06/are-your-lights-on.html</guid><category>books</category></item><item><title>重读&gt;</title><link>http://www.wklken.me/posts/2014/11/30/pomodoro-technique-illustrated.html</link><description>&lt;p&gt;最近在执行重读计划, 为年后搬家做准备, 一些书读完珍藏/出给需要的人, 减少搬家那一柜子书的困扰....&lt;/p&gt;
&lt;p&gt;重新读了下这本书, 写写&lt;/p&gt;
&lt;p&gt;大概去年的这个时候, 写了篇 &lt;a href="http://www.wklken.me/posts/2013/11/17/the-art-of-procrastination.html"&gt;拖拉一点也无妨的读书笔记&lt;/a&gt;, 需要的可以看下&lt;/p&gt;
&lt;p&gt;&lt;img alt="pomodoro" src="/imgs/books/pomodoro.jpg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;番茄时间工作法, 意在让人们驻足/观察/醒悟, 并在此过程中改进自我&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人们往往容易关注未来, 而不是过去, 匆匆忙忙, 只为了尽快达到目标, 却忽视了对整个过程的review, 停留, 观察, 总结, 改进, 然后再前进, 更快更好地前进.&lt;/p&gt;
&lt;p&gt;编程中有一种学习方式叫做&lt;code&gt;刻意练习&lt;/code&gt;, 而在&amp;lt;&amp;lt;一万小时天才理论&amp;gt;&amp;gt;中提到&lt;code&gt;精深练习&lt;/code&gt;, 要&lt;code&gt;慢&lt;/code&gt;, 要去&lt;code&gt;犯错&lt;/code&gt;, 要去实际&lt;code&gt;体悟&lt;/code&gt;, 要&lt;code&gt;总结&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;GTD 里也有review的环节.&lt;/p&gt;
&lt;p&gt;总之, review很重要, 但常常被忽略(例如说我…)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要完成大量工作, 重点不在完成工作上, 而在于能否集中注意力 …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 30 Nov 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-11-30:/posts/2014/11/30/pomodoro-technique-illustrated.html</guid><category>books</category></item><item><title>简约之美 &amp; 编写可读代码的艺术</title><link>http://www.wklken.me/posts/2014/11/16/code-simplicity-and-the-art-of-readable-code.html</link><description>&lt;p&gt;最近陆续收到一些donation, 非常感谢哈, blog的文章说多不多说少不少, 大部分是笔记性质的, 主要目的还是积累以及方便自己查询回顾, 分享出来, 希望有所帮助:)&lt;/p&gt;
&lt;p&gt;ps: 昨天将国内ip切到gitcafe了, 加载速度应该快了很多, 在此特别感谢下&lt;a href="https://gitcafe.com/"&gt;gitcafe&lt;/a&gt;. (关于如何国内国外切分访问, google大法)&lt;/p&gt;
&lt;p&gt;今天要提的是&amp;lt;&amp;lt;简约之美—软件设计之道&amp;gt;&amp;gt; 以及 &amp;lt;&amp;lt;编写可读代码的艺术&amp;gt;&amp;gt;, 主要原因是, 经典, 更重要的是, 足够薄:), 建议买了珍藏, 也是属于那种不同时期反复读会有不同感受的书&lt;/p&gt;
&lt;p&gt;———————————&lt;/p&gt;
&lt;h2 id="jian-yue-zhi-mei"&gt;简约之美&lt;/h2&gt;
&lt;p&gt;这本书, 用一百页来说明, 软件开发设计中, 一些十分简单的道理.&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/code-simplicity.jpg"/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;好的程序员和差的程序员的区别在于理解能力. 差劲的程序员不理解自己做的事情, 优秀的程序员则相反. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;理解能力&lt;/code&gt;, 看起来蛮虚的一个词, 但是在工作中真正进行沟通时, 你会发现区别非常大, 决定了是&lt;code&gt;一次沟通&lt;/code&gt; 还是 &lt;code&gt;反复沟通&lt;/code&gt;; 是&lt;code&gt;直达目标&lt;/code&gt;, 还是&lt;code&gt;不断曲折&lt;/code&gt;; 是一次&lt;code&gt;搞定&lt;/code&gt;, 还是&lt;code&gt;改改改&lt;/code&gt;; 是 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 16 Nov 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-11-16:/posts/2014/11/16/code-simplicity-and-the-art-of-readable-code.html</guid><category>books</category></item><item><title>重读Rework</title><link>http://www.wklken.me/posts/2014/11/09/rework.html</link><description>&lt;p&gt;忙碌了一段时间, 终于迎来了久违的周末.&lt;/p&gt;
&lt;p&gt;时间过得很快, 入职快三个月了, 很忙但很充实, 带来的影响是, 时间少了, 读书和写 blog 的进度随之放缓, 但是积累了很多笔记.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&amp;lt;Rework&amp;gt;&amp;gt;&lt;/code&gt;这本书, 是&lt;code&gt;37signals&lt;/code&gt;三本本书中的第二本, 读过很多遍了, 短小精悍, 但是每次重读都会有一些不同的收获, 建议买一本珍藏:)&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/rework.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;以下是一些摘录和自己的看法, 仅供参考&lt;/p&gt;
&lt;p&gt;————————&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;做一些自己喜欢的事情并从中获得些回报&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要思考下自己目前的工作, 是否符合这一点? 如果是, 那就继续努力做好, 如果不是, 就需要思考下, 自己喜欢做什么?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一种普遍的错误认知是: 人要从错误中吸取经验教训.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要学会从错误中吸取经验, 这句话是没错的, 不断尝试, fail fast, 然后得到一些东西, 这也是没问题的. 但是, 不要认为, 不断从错误中吸取教训就能获得成功. 就像通关游戏有一千个坑, 你或许可以一个个试, 然后一次学到一些东西, 但是....有没有想过, 失败不是成功的先决条件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你更应该从成功中汲取养分.成功才是真正靠得住的教材 …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 09 Nov 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-11-09:/posts/2014/11/09/rework.html</guid><category>books</category></item><item><title>读书笔记-软件测试的艺术</title><link>http://www.wklken.me/posts/2014/07/26/the-art-of-software-testing.html</link><description>&lt;p&gt;这本书是三年前毕业时读的, 毕业时的职位是"测试开发工程师".&lt;/p&gt;
&lt;p&gt;好吧, 这本书年龄比我还大:), 毕业那会绝版了, 读的是电子版的. 前阵子看到有在卖就买了一本珍藏, 最近重读了一遍.&lt;/p&gt;
&lt;p&gt;可以作为测试入门读本.(测试界的经典书籍), 摘录一些, 一些关键字感兴趣可以自己google.&lt;/p&gt;
&lt;p&gt;&lt;img alt="software-test" src="/imgs/books/the-art-of-software-testing.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;好吧, 在很多人眼里, 测试只是点点鼠标等没技术含量的工作, 干开发干不了才干测试. But, 这个观点是错误的, 测试还是非常博大精深的, 要求还是非常高的(需要懂各类语言, 需要写各种代码, 需要懂各种业务, 需要懂各类场景, 需要项目管理, 需要......).&lt;/p&gt;
&lt;hr/&gt;
&lt;ul&gt;
&lt;li&gt;什么是软件测试&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;所谓软件测试, 就是一个过程或一系列过程, 用来确认计算机代码完成了其应该完成的功能, 不执行其不该有的操作.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意后半段.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试的心理学&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;测试是为了发现错误而执行的过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人的行为总是倾向于具有高度目的性. 所以需要将目标定为: 证明程序中存在错误(某些情况下, 测试人员的态度可能比实际的测试过程本身还重要)&lt;/p&gt;
&lt;p&gt;所以, 要假设测试的程序是存在错误的.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件测试的原则
(直接摘录了, 很多观点值得借鉴)&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;编号&lt;/th&gt;
&lt;th align="left"&gt;原则&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;测试用例中一个必需部分是对预期输出或结果进行定义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;2 …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-07-26:/posts/2014/07/26/the-art-of-software-testing.html</guid><category>books</category></item><item><title>读书笔记--你就是极客!软件开发人员生存指南</title><link>http://www.wklken.me/posts/2014/05/03/BeingGeek.html</link><description>&lt;p&gt;BeingGeek:The Software Developer's Carrer Handbook&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/being-geek.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;五一三天,读完五本书.....这本算是重读&lt;/p&gt;
&lt;p&gt;写作风格类似&amp;lt;黑客与画家&amp;gt;&lt;/p&gt;
&lt;p&gt;10分标准,打个7.5&lt;/p&gt;
&lt;p&gt;个人职业生涯面临的种种境遇和问题:跳槽,面试,管理,招聘,危机处理,沟通,合作,团队建设,演讲,绩效考核等,甚至还有一篇是专门写给我们背后的支持者的(例如女朋友,如果有的话.....).&lt;/p&gt;
&lt;p&gt;书上关于 团队管理,沟通,换工作的几章,可以重点看下&lt;/p&gt;
&lt;p&gt;里面包含了很多观点,隔一段时间来重看认识会有不同,摘录几点.....算是读书摘要吧&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;阅读时,要不断重复3个问题(明确方向)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.我正在做什么?
2.我真正想做的是什么?
3.我在乎的是什么?我关心的是什么?
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zhi-sheng-zhi-dao"&gt;致胜之道&lt;/h3&gt;
&lt;p&gt;系统思维:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;我们寻找 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 03 May 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-05-03:/posts/2014/05/03/BeingGeek.html</guid><category>books</category></item><item><title>读书笔记--高效能人士的七个习惯+执行4原则</title><link>http://www.wklken.me/posts/2014/03/30/highly-effective-and-execution.html</link><description>&lt;p&gt;今天打算写的是，关于两本“成功学”的书&lt;/p&gt;
&lt;p&gt;《高效能人士的七个习惯》和《高效能人士的执行4原则》&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面1" src="/imgs/books/the-7-habits-of-highly-effective-people.jpg"/&gt;
&lt;img alt="封面2" src="/imgs/books/the-4-disciplines-of-execution.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;一直以来对“成功学”都不感冒，“虚”，“扯淡”，“毫无意义”，一直没搞明白为什么那么多人，会专门去花费大量金钱学习和研究这些东西&lt;/p&gt;
&lt;p&gt;以前不感冒，当然，现在也是，一如既往&lt;/p&gt;
&lt;p&gt;以上两本书，一本书是刚毕业那会部门老大推荐的，跳槽之后，新的老大也推了这本书，所以从书堆里翻出来，认认真真地看完了（很惊讶走了那么多地方书还能留着），后面一本是亚马逊kindle上捞到的。&lt;/p&gt;
&lt;p&gt;这两本，算是成功学，也不算，很多东西讲到了点上，有些道理，认同，也会去遵循&lt;/p&gt;
&lt;p&gt;值得一看，能从中能借鉴一些东西&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="gao-xiao-neng-ren-shi-de-qi-ge-xi-guan"&gt;高效能人士的七个习惯&lt;/h2&gt;
&lt;p&gt;&lt;img alt="主要概念图1" src="/imgs/books/the-7-habits-of-highly-effective-people-concepts.jpg"/&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;习惯一：积极主动——个人愿景的原则
习惯二：以终为始——自我领导的原则
习惯三：要事第一——自我管理的原则
习惯四：双赢思维——人际领导的原则
习惯五 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 30 Mar 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-03-30:/posts/2014/03/30/highly-effective-and-execution.html</guid><category>books</category></item><item><title>读书笔记——我编程，我快乐</title><link>http://www.wklken.me/posts/2014/03/08/the-passionate-programmer.html</link><description>&lt;p&gt;这是读到的第四本和37signals有联系的书&lt;/p&gt;
&lt;p&gt;春节在回家的动车上读完的(飞机火车阅读效率加成&amp;gt;_&amp;lt;)，有些收获，今天翻出来重读了一次&lt;/p&gt;
&lt;p&gt;一系列观点和方法论，很多还是值得借鉴和思考的&lt;/p&gt;
&lt;p&gt;记录观点以及自己一两句话的总结整理&lt;/p&gt;
&lt;p&gt;这本书还是值得一读的，建议入手&lt;/p&gt;
&lt;p&gt;PS:年后买纸质书需三思再三思，开始多读电子书吧&lt;/p&gt;
&lt;p&gt;简而言之:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.选好技术和领域: 通才和专家
2.跟上潮流
3.学会更好更高效地工作：目标，计划，沟通，协作，写作，执行力....很多（重点）
4.避免思维僵固
5.写博客
6.维护自己的开源项目
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/passionate-programmer.jpg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;帮你成就更卓越、更有意义的人生，工作只是其中的一部分&lt;/p&gt;
&lt;p&gt;如果生活的大部分时间都被工作占据着，那么热爱工作就是热爱生活&lt;/p&gt;
&lt;p&gt;制定自己的计划&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.选择市场——关注的技术和商业领域
2.投资——知识和技术
3.执行 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 08 Mar 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-03-08:/posts/2014/03/08/the-passionate-programmer.html</guid><category>books</category></item><item><title>读书笔记——写给大家看的设计书</title><link>http://www.wklken.me/posts/2014/03/02/the-non-designers-design-book.html</link><description>&lt;p&gt;&lt;img alt="cover" src="/imgs/books/design-book.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;对设计，知之甚少，战5渣&lt;/p&gt;
&lt;p&gt;读到这本书，感觉蛮有收获的，起码会有一个基本的设计意识和概念，有些作用&lt;/p&gt;
&lt;p&gt;这本书主要围绕设计的四个基本原则展开说明，有详细的说明和对比案例&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="she-ji-yuan-ze"&gt;设计原则&lt;/h3&gt;
&lt;p&gt;得到优秀的设计&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.学习四大基本原则
2.认识到自己没有运用这些原则
3.应用基本原则
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="1qin-mi-xing"&gt;1.亲密性&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;将相关项目组织在一起：移动这些项，使它们的物理位置互相靠近。
相关的项将被看做凝聚为一体的一个组，而不再是一堆彼此无关的片段

亲密性意味着存在关联
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，人们查看时的视觉感受，顺序(视线如何移动的，起点-路径-结束)、停留、重点。将有很近的亲密性的多个项目放一起，成为一个视觉单元&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;如果某些元素在理解上存在关联，或者相互之间存在某种关系，那么这些元素在视觉上也应当有关联
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;亲密性也同时意味着，对非亲密项进行隔离（利用空白、线、图等）,使孤立&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;位置是否靠近可以体现出元素之间是否存在关系
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要对所有元素有一个分类组织的过程&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;亲密性的根本目的是视线组织性(条理性)

条理，意味着更容易被阅读和记住
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要避免的问题 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 02 Mar 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-03-02:/posts/2014/03/02/the-non-designers-design-book.html</guid><category>books</category></item><item><title>读书笔记——追随你的心，用思想改变世界</title><link>http://www.wklken.me/posts/2014/01/19/follow-your-heart.html</link><description>&lt;p&gt;乔布斯的十大演讲&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/follow-your-heart.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;很喜欢封面的设计，这本书的纸质也很赞，摸起来蛮有质感的，书买了应该有两年了，一直带着，但是没怎么看&lt;/p&gt;
&lt;p&gt;今天又重新翻出来，书的边缘，已经有了岁月的痕迹，微微泛黄&lt;/p&gt;
&lt;p&gt;封面是乔帮主，还有那句经典的"Follow your heart"&lt;/p&gt;
&lt;p&gt;曾几何时，对帮主不是很了解，即使是帮主走的那年，12年十月，看了乔布斯传，对apple有了基本的认识&lt;/p&gt;
&lt;p&gt;12年后，逐渐的，变成了果粉，没有刻意去追求什么，只是，apple的产品，逐一进入的我的生活&lt;/p&gt;
&lt;p&gt;我曾经说过，买macbook是2013年最正确的决定之一，然后，运气爆表年会中了一个ipad air，变成了今年最幸运的事情之一。用了一天，下了多看,kindle,知乎，网易公开课，还有google浏览器，微博，pocket,evernote。以后不用抱着电脑累了，相信会为我的生活带来些什么&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;整本书，看看第一章第二章即可&lt;/p&gt;
&lt;p&gt;第一章，语录 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 19 Jan 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-01-19:/posts/2014/01/19/follow-your-heart.html</guid><category>books</category></item><item><title>读书笔记-程序员的思维训练</title><link>http://www.wklken.me/posts/2014/01/05/pragmatic-thinking-and-learning.html</link><description>&lt;p&gt;================&lt;/p&gt;
&lt;p&gt;&amp;lt;&amp;lt;程序员的思维修炼——开发认知潜能的九堂课&amp;gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;不是教你学习如何写代码之类的，而是，如何使用大脑，培养习惯，训练自己的思维&lt;/p&gt;
&lt;p&gt;当然，不仅限于程序员，我觉得对大多数人都有适用性&lt;/p&gt;
&lt;p&gt;方法论，有点类似程序员的成功学的味道，选择性阅读和实践&lt;/p&gt;
&lt;p&gt;以下是摘录&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;诀窍汇总:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;诀窍一：始终关注情境
诀窍二：新手使用规则，专家使用直觉
诀窍三：知道你不知道什么
诀窍四：通过观察和模仿来学习
诀窍五：保持实践以维持专家水平
诀窍六：如果你需要创造力，直觉或者独创技能，避免使用形式方法
诀窍七：学习如何学习的技能
诀窍八：捕获所有的想法以从中获益更多
诀窍九：综合学习与分析学习并重
诀窍十：争取好的设计，它真的很有效
诀窍十一：重新连线大脑，坚信这一点并不断实践
诀窍十二：增加感官体验以促进大脑的使用
诀窍十三：R型开路，L型紧跟
诀窍十四：使用隐喻作为L型和R型相融之处
诀窍十五 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 05 Jan 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-01-05:/posts/2014/01/05/pragmatic-thinking-and-learning.html</guid><category>books</category></item><item><title>读书笔记-程序员的职业素养</title><link>http://www.wklken.me/posts/2013/11/24/the-clean-coder.html</link><description>&lt;p&gt;作者：Robert C. Martin&lt;/p&gt;
&lt;p&gt;一本“方法论”的书，还是可以借鉴很多东西的,做了摘录&lt;/p&gt;
&lt;p&gt;讲了很多东西，涉及这个职业的方方面面&lt;/p&gt;
&lt;p&gt;目标是，成为“专业人士”&lt;/p&gt;
&lt;p&gt;每一节的标题还是有点作用的，摘录之&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="xu"&gt;序&lt;/h3&gt;
&lt;p&gt;需要的不是“经历丰富的人”而是“有职业素养的人”&lt;/p&gt;
&lt;p&gt;相比问题本身，解决问题的方式、步骤以及反思深度都体现出一个人的职业素养&lt;/p&gt;
&lt;p&gt;职业素养: 它体现了能力和素质，又强调了持续的积累和养成&lt;/p&gt;
&lt;p&gt;技术人员需要如何改变才能被视为专业人士呢？&lt;/p&gt;
&lt;h3 id="qian-yan"&gt;前言&lt;/h3&gt;
&lt;p&gt;专业，要变得有影响力，有说服力&lt;/p&gt;
&lt;h3 id="yin-yan"&gt;引言&lt;/h3&gt;
&lt;p&gt;尝试定义专业程序员，成为真正专业的程序员，需要什么样的态度、原则、行动 (本书主旨, note about that)&lt;/p&gt;
&lt;h3 id="di-yi-zhang-zhuan-ye-zhu-yi"&gt;第一章 专业主义&lt;/h3&gt;
&lt;p&gt;1.1 清楚你要什么&lt;/p&gt;
&lt;p&gt;"专业主义"，不但象征着荣誉与骄傲，而且明确意味着责任与义务 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 24 Nov 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-11-24:/posts/2013/11/24/the-clean-coder.html</guid><category>books</category></item><item><title>读书笔记-拖拉一点也无妨</title><link>http://www.wklken.me/posts/2013/11/17/the-art-of-procrastination.html</link><description>&lt;p&gt;mac搞坏了，折腾一宿没搞定，试过N种方法，历时8个小时，结果把硬盘给装没了 &amp;gt;-&amp;lt;&lt;/p&gt;
&lt;p&gt;最后无奈，搞去苹果店修理，中间等了三个小时&lt;/p&gt;
&lt;p&gt;带上了nook，到公园里，坐树下，看了两本书&lt;/p&gt;
&lt;p&gt;&amp;lt;&amp;lt;facebook效应&amp;gt;&amp;gt;和这本 &amp;lt;&amp;lt;拖拉一点也无妨&amp;gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="procrastination" src="/imgs/books/the-art-of-procrastination.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;只有一百来页&lt;/p&gt;
&lt;p&gt;作为一个完美主义者，有轻微强迫症和轻微拖延症&lt;/p&gt;
&lt;p&gt;感觉有些地方还是很有道理&lt;/p&gt;
&lt;p&gt;以下为一些核心的观点&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;后天能做的事情，就别赶着明天做了——马克吐温 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;结构化拖延法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每个拖延人士，都会把必须要做的重要事情往后拖——结构化拖延法则正是一门关于如何利用这一消极特性、让它为你服务的艺术&lt;/p&gt;
&lt;p&gt;观点：爱拖延的任人极少什么都不做,只是逃避去做重要的事情(拖延，并不等于什么都不做)&lt;/p&gt;
&lt;p&gt;结构化拖延法：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;利用这种心态，给必须完成的任务梳理一个结构
将想要做的事情按重要性列个清单，写下来，最紧急最重要的排在前面,将另外一些重要的值得做的事情排在后面

于是，完成这些任务，就会变成避免去做清单最上方任务的一种手段

-&amp;gt; 拖延的人变成有用的人
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你需要的是，一个排序得当的任务结构&lt;/p&gt;
&lt;p&gt;清单最开头几件事：1）它看似有明确的截止日期（但实际上没有 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 17 Nov 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-11-17:/posts/2013/11/17/the-art-of-procrastination.html</guid><category>books</category></item></channel></rss>