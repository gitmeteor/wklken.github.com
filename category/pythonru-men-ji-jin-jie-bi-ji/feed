<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>wklken's blog - python入门及进阶笔记</title><link>http://www.wklken.me/</link><description></description><lastBuildDate>Tue, 01 Mar 2016 00:00:00 +0800</lastBuildDate><item><title>[分享]Python源码剖析-数据结构</title><link>http://www.wklken.me/posts/2016/03/01/python-source-datastructure.html</link><description>&lt;p&gt;&lt;object data="/extra/share/python-source-datastructure.pdf" height="525" type="application/pdf" width="729"&gt;
&lt;embed src="/extra/share/python-source-datastructure.pdf"/&gt;
&lt;/object&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 01 Mar 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-03-01:/posts/2016/03/01/python-source-datastructure.html</guid><category>python</category></item><item><title>Python-基础-数据结构小结</title><link>http://www.wklken.me/posts/2015/08/28/python-base-datastructures.html</link><description>&lt;p&gt;只是一篇笔记, 梳理了下&lt;/p&gt;
&lt;p&gt;====================&lt;/p&gt;
&lt;h3 id="xu-lie"&gt;序列&lt;/h3&gt;
&lt;h4 id="string"&gt;string&lt;/h4&gt;
&lt;p&gt;基本数据结构, 不解释&lt;/p&gt;
&lt;p&gt;可以看下我之前的笔记&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2013/03/10/python-base-string.html"&gt;Python-基础-字符串小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2014/08/08/python-source-string.html"&gt;Python源码阅读-String&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="list"&gt;list&lt;/h4&gt;
&lt;p&gt;基本数据结构, 不解释&lt;/p&gt;
&lt;p&gt;可以看下我之前的笔记&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2012/12/30/python-base-list.html"&gt;Python-基础-列表及列表解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2014/08/10/python-source-list.html"&gt;Python源码阅读-list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tuple"&gt;tuple&lt;/h4&gt;
&lt;p&gt;基本数据结构, 不解释&lt;/p&gt;
&lt;p&gt;可以看下我之前的笔记&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2013/03/09/python-base-tuple.html"&gt;Python-基础-元组小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2014/08/10/python-source-tuple.html"&gt;Python源码阅读-tuple&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="namedtuple"&gt;namedtuple&lt;/h4&gt;
&lt;p&gt;在collections中, 从名字可以看出是命名的tuple&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
collections.namedtuple(typename, field_names[, verbose=False][, rename=False])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;好处, 文档中提到
&lt;code&gt;python
Named tuple instances do not have per-instance dictionaries, so they are lightweight and require …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Fri, 28 Aug 2015 23:59:59 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-08-28:/posts/2015/08/28/python-base-datastructures.html</guid><category>python</category></item><item><title>Python-基础-时间日期处理小结</title><link>http://www.wklken.me/posts/2015/03/03/python-base-datetime.html</link><description>&lt;p&gt;好久没写文了, 继续清理笔记, 都是一些小结之类的, 源码分析以及在做系统中一些细节难点等, 后续逐步发&lt;/p&gt;
&lt;p&gt;另外打个广告, &lt;a href="http://www.itianpin.com/join"&gt;甜品礼物&lt;/a&gt;, 坐标深圳, 有兴趣的同学可以给我发邮件, 非python职位会转到对应同事:)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_       _       _   _
     | |     | |     | | (_)
   __| | __ _| |_ ___| |_ _ _ __ ___   ___
  / _` |/ _` | __/ _ \ __| | '_ ` _ \ / _ \
 | (_| | (_| | ||  __/ |_| | | | | | |  __/
  \__,_|\__,_|\__\___|\__|_|_| |_| |_ …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 03 Mar 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-03-03:/posts/2015/03/03/python-base-datetime.html</guid><category>python</category></item><item><title>Python招聘需求与技能体系</title><link>http://www.wklken.me/posts/2013/12/21/python-jd.html</link><description>&lt;p&gt;目前国内的招聘Python，基本都是偏向web后台开发，偶有高大上的数据挖掘&amp;amp;机器学习&lt;/p&gt;
&lt;p&gt;这是之前(2012年)找工作整理的一些JD，在梳理几年来的笔记，顺带理一理&lt;/p&gt;
&lt;p&gt;可以以此建立自己的技能体系&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="di-yi-bu-fen-yi-xie-yao-qiu"&gt;第一部分: 一些要求&lt;/h3&gt;
&lt;p&gt;1.学历&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;格式： 计算机及相关专业本科及以上学历.....
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不解释，不说明&lt;/p&gt;
&lt;p&gt;毕业后很少再看学历了，更多的是看能力吧（我会告诉你第一年周围都是硕士博士海龟么，俺学历最低，自卑啊）&lt;/p&gt;
&lt;p&gt;见过数学系、物理系、信息自动化系的跑过来当码农，唯一遗憾的是还没有见到中文系的.....&lt;/p&gt;
&lt;p&gt;2.经验&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;格式：拥有X年以上经验，至少独立负责过X个项目
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很蛋疼的东西，见过一年经验用N年的，也见过一年拥有N年经验的&lt;/p&gt;
&lt;p&gt;受环境影响，但更多的是取决于个人&lt;/p&gt;
&lt;p&gt;听过一句话：人和人的唯一区别，就是有木有主观能动性（略有些偏激，但是有道理）&lt;/p&gt;
&lt;p&gt;3.基础素质&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;格式：具有良好的XXXX

编码规范/风格
文档书写习惯
沟通与表达能力 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 21 Dec 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-12-21:/posts/2013/12/21/python-jd.html</guid><category>python</category></item><item><title>Python-进阶-编码处理小结</title><link>http://www.wklken.me/posts/2013/08/31/python-extra-coding-intro.html</link><description>&lt;p&gt;整理下python编码相关的内容&lt;/p&gt;
&lt;p&gt;注意: 以下讨论为Python2.x版本, Py3k的待尝试&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="kai-shi"&gt;开始&lt;/h2&gt;
&lt;p&gt;用python处理中文时，读取文件或消息，http参数等等&lt;/p&gt;
&lt;p&gt;一运行，发现乱码(字符串处理，读写文件，print)&lt;/p&gt;
&lt;p&gt;然后，大多数人的做法是，调用encode/decode进行调试，并没有明确思考为何出现乱码&lt;/p&gt;
&lt;p&gt;所以调试时最常出现的错误&lt;/p&gt;
&lt;p&gt;错误1&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Traceback (most recent call last):
File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xe6 in position 0: ordinal not in range(128)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;错误2&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Traceback (most …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 31 Aug 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-08-31:/posts/2013/08/31/python-extra-coding-intro.html</guid><category>python</category></item><item><title>[翻译整理]stackoverflow python 百问</title><link>http://www.wklken.me/posts/2013/07/20/python-stackoverflow-vote-top.html</link><description>&lt;p&gt;更新到github了，地址：https://github.com/wklken/stackoverflow-py-top-qa &lt;/p&gt;
&lt;p&gt;后续这里不更新了哈&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;进度40%，最近有点犯懒&lt;/p&gt;
&lt;p&gt;刚刚注册，好东西&lt;/p&gt;
&lt;p&gt;查看了下前面(vote前15页,挑了下,vote都是100+的样子,大概120个)的问题，&lt;a href="http://stackoverflow.com/questions/tagged/python?page=1&amp;amp;sort=votes&amp;amp;pagesize=15"&gt;链接&lt;/a&gt;, 大体梳理了下,本来想放一页搞定，奈何排版太乱，按类型分了下&lt;/p&gt;
&lt;p&gt;第一页的前几个比较长，目测都有中文翻译版本，大家可以网上搜下&lt;/p&gt;
&lt;p&gt;其他问题相对比较杂，有些简单，有些复杂，拉过来参考参考也不错&lt;/p&gt;
&lt;p&gt;总结整理，复习印证(注意，合并了每个问题的多个答案，但是时间仓促，疏漏难免，感兴趣问题直接点链接看原文吧)&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="ji-ben-shu-ju-jie-gou-lie-biao-yuan-zu-zi-dian-deng"&gt;基本数据结构(列表，元组，字典等)&lt;/h2&gt;
&lt;h3 id="pan-duan-yi-ge-lie-biao-wei-kong-de-zui-jia-shi-jian"&gt;判断一个列表为空得最佳实践&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/53513/python-what-is-the-best-way-to-check-if-a-list-is-empty"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;答案:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if not a:
    print …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 20 Jul 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-07-20:/posts/2013/07/20/python-stackoverflow-vote-top.html</guid><category>python</category><category>translation</category></item><item><title>[翻译]理解python中的装饰器</title><link>http://www.wklken.me/posts/2013/07/19/python-translate-decorator.html</link><description>&lt;p&gt;有人翻译过了，很多转载，暂时没找到原文，各个地方的排版不一样，排版（代码格式），代码注解等都不怎么好&lt;/p&gt;
&lt;p&gt;练练手，顺手一翻吧，权当加深理解&lt;/p&gt;
&lt;p&gt;来源stackoverflow上的问题  &lt;a href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python/1594484#1594484"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很长哦(应该是巨长...分了三次搞完)，要有耐心看完&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="pythonde-han-shu-shi-dui-xiang"&gt;python的函数是对象&lt;/h2&gt;
&lt;p&gt;要理解装饰器，首先，你必须明白，在python中，函数是对象. 这很重要.&lt;/p&gt;
&lt;p&gt;简单例子来理解为什么&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def shout(word="yes"):
    return word.capitalize()+"!"

print shout()
# outputs : 'Yes!'

# 作为一个对象，你可以讲函数赋值给另一个对象
scream = shout

# 注意到这里我们并没有使用括号：我们不是调用函数，而是将函数'shout'赋给变量'scream'
# 这意味着，你可以通过'scream'调用'shout'

print scream()
# outputs : 'Yes!'

# 不仅如此，你可以删除老的名称'shout' …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Fri, 19 Jul 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-07-19:/posts/2013/07/19/python-translate-decorator.html</guid><category>python</category><category>translation</category></item><item><title>[翻译]Python中yield的解释</title><link>http://www.wklken.me/posts/2013/07/18/python-translate-yield.html</link><description>&lt;p&gt;翻译&lt;/p&gt;
&lt;p&gt;来源于stackoverflow问答，原文链接 &lt;a href="http://stackoverflow.com/questions/231767/the-python-yield-keyword-explained"&gt;Here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SN上面看到的，顺手翻译下，第一次翻译，好多地方翻的不是很好 :)&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;问题:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Python中yield关键字的作用是什么？它做了什么？
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例如，我想理解以下代码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def node._get_child_candidates(self, distance, min_dist, max_dist):
    if self._leftchild and distance - max_dist &amp;lt; self._median:
        yield self._leftchild
    if self._rightchild and distance + max_dist &amp;gt;= self._median:
        yield self._rightchild
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面是调用者&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;result, candidates = list(), [self]
while candidates:
    node …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Thu, 18 Jul 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-07-18:/posts/2013/07/18/python-translate-yield.html</guid><category>python</category><category>translation</category></item><item><title>Python-基础-内置函数小结</title><link>http://www.wklken.me/posts/2013/03/16/python-base-builtins.html</link><description>&lt;h2 id="nei-zhi-han-shu"&gt;内置函数&lt;/h2&gt;
&lt;h3 id="chang-yong-han-shu"&gt;常用函数&lt;/h3&gt;
&lt;h4 id="1shu-xue-xiang-guan"&gt;1.数学相关&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;abs(x)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;abs()返回一个数字的绝对值。如果给出复数，返回值就是该复数的模。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;print abs(-100)
100
&amp;gt;&amp;gt;&amp;gt;print abs(1+2j)
2.2360679775
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;divmod(x,y)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;divmod(x,y)函数完成除法运算，返回商和余数。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; divmod(10,3)
(3, 1)
&amp;gt;&amp;gt;&amp;gt; divmod(9,3) (3, 0)
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;pow(x,y[,z])&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pow()函数返回以x为底，y为指数的幂。如果给出z值，该函数就计算x的y次幂值被z取模的值。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; print pow(2 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 16 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-16:/posts/2013/03/16/python-base-builtins.html</guid><category>python</category></item><item><title>Python-基础-文件处理小结</title><link>http://www.wklken.me/posts/2013/03/16/python-base-file.html</link><description>&lt;h2 id="wen-jian-chu-li"&gt;文件处理&lt;/h2&gt;
&lt;p&gt;python常用，主要是用于文件操作，配合字符串操作，数值计算等，完成数据处理。&lt;/p&gt;
&lt;h3 id="wen-jian-mo-shi"&gt;文件模式&lt;/h3&gt;
&lt;p&gt;打开一个文件，返回一个文件对象。可以用open()或者file()，建议使用前者&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;file_object = open(file_name, access_mode = ‘r’, buffering = -1)
file_name：打开的文件名,若非当前路径，需指出具体路径
mode:可选参数，文件打开模式
bufsize:可选参数，是否使用缓存
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="mode"&gt;mode&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;模式      描述
r       以读方式打开文件，可读取文件信息.文件必须已存在
w       以写方式打开文件，可向文件写入信息。存在则清空，不存在创建
a       以追加方式打开文件，文件指针自动移到文件尾。追加
r+      以读写方式打开文件，可对文件进行读和写操作。
w+      消除文件内容 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 16 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-16:/posts/2013/03/16/python-base-file.html</guid><category>python</category></item><item><title>Python-基础-函数小结</title><link>http://www.wklken.me/posts/2013/03/16/python-base-function.html</link><description>&lt;h3 id="han-shu"&gt;函数&lt;/h3&gt;
&lt;h4 id="jian-jie-ji-ding-yi"&gt;简介及定义&lt;/h4&gt;
&lt;h5 id="jian-jie"&gt;简介&lt;/h5&gt;
&lt;p&gt;函数是可重用的程序段&lt;/p&gt;
&lt;p&gt;它们允许你给一块语句一个名称，然后你可以在你的程序的任何地方使用这个名称任意多次地运行这个语句块。&lt;/p&gt;
&lt;p&gt;函数作用：最大程度重用和最小化代码冗余，流程分解&lt;/p&gt;
&lt;h5 id="ding-yi"&gt;定义&lt;/h5&gt;
&lt;p&gt;使用def可以声明一个函数，完整的函数由函数名，参数以及函数实现语句组成。&lt;/p&gt;
&lt;p&gt;一般形式:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def &amp;lt;函数名&amp;gt; (参数列表):
   &amp;lt;函数语句&amp;gt;
   return &amp;lt;返回值&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中参数和返回值非必须&lt;/p&gt;
&lt;p&gt;注意，没有返回值的return语句等价于return None&lt;/p&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'hello world'&lt;/span&gt;

&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;span class="nb"&gt;sum …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 16 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-16:/posts/2013/03/16/python-base-function.html</guid><category>python</category></item><item><title>Python-基础-简介/入门</title><link>http://www.wklken.me/posts/2013/03/16/python-base-introduction.html</link><description>&lt;h2 id="pythonjian-jie-ji-ru-men"&gt;Python简介及入门&lt;/h2&gt;
&lt;h3 id="python"&gt;python&lt;/h3&gt;
&lt;p&gt;为什么是python&lt;/p&gt;
&lt;p&gt;选择自己喜欢的语言，这往往不容易，更多的是根据需求&lt;/p&gt;
&lt;p&gt;话说，之前是java，大学用了三年+实习半年，后来入职做测试开发后，碰到了python&lt;/p&gt;
&lt;p&gt;到最后，转python开发了&lt;/p&gt;
&lt;p&gt;写起来快，缩进，不用打花括号，省手指，读起来舒服…..&lt;/p&gt;
&lt;p&gt;喜欢，貌似不需要什么太牛的理由，用着顺手舒服就行&lt;/p&gt;
&lt;p&gt;什么语言之争，编辑器之战啥的，能忽略就忽略吧，能无视就无视吧，工具，够用，用这舒服就ok了，浪费口水精力争来争去图个啥呢&lt;/p&gt;
&lt;p&gt;Life is short, I use python!&lt;/p&gt;
&lt;h3 id="jian-jie"&gt;简介&lt;/h3&gt;
&lt;p&gt;python介绍: 到官网自个看&lt;/p&gt;
&lt;p&gt;有兴趣可以看看: 解释性语言+动态类型语言+强类型语言&lt;/p&gt;
&lt;p&gt;优点缺点: 自己google&lt;/p&gt;
&lt;p&gt;国际惯例&lt;/p&gt;
&lt;p&gt;交互模式:(主要拿来试验，可以试试 &lt;a href="http://ipython.org/"&gt;ipython …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 16 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-16:/posts/2013/03/16/python-base-introduction.html</guid><category>python</category></item><item><title>Python-基础-数字处理相关模块</title><link>http://www.wklken.me/posts/2013/03/10/python-base-extra-math.html</link><description>&lt;h2 id="shu-zi-chu-li-xiang-guan-mo-kuai"&gt;数字处理相关模块&lt;/h2&gt;
&lt;h3 id="math"&gt;math&lt;/h3&gt;
&lt;p&gt;1.简介&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;#这句可查看所有函数名列表&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="c1"&gt;#查看具体定义及函数0原型&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.常用函数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ceil(x) 取顶
floor(x) 取底
fabs(x) 取绝对值
factorial (x) 阶乘
hypot(x,y)  sqrt(x*x+y*y)
pow(x,y) x的y次方
sqrt(x) 开平方
log(x)
log10(x)
trunc(x)  截断取整数部分
isnan (x …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 10 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-10:/posts/2013/03/10/python-base-extra-math.html</guid><category>python</category></item><item><title>Python-基础-集合小结</title><link>http://www.wklken.me/posts/2013/03/10/python-base-set.html</link><description>&lt;h2 id="ji-he"&gt;集合&lt;/h2&gt;
&lt;h3 id="jian-jie"&gt;简介&lt;/h3&gt;
&lt;p&gt;python的set和其他语言类似, 是一个无序不重复元素集, 基本功能包括关系测试和消除重复元素.&lt;/p&gt;
&lt;p&gt;sets 支持 x in set, len(set), 和 for x in set。&lt;/p&gt;
&lt;p&gt;集合对象还支持union(联合), intersection(交), difference(差)和sysmmetric difference(对称差集)等数学运算.&lt;/p&gt;
&lt;p&gt;作为一个无序的集合，sets 不记录元素位置或者插入点。因此，sets 不支持 indexing, slicing, 或其它类序列（sequence-like）的操作。&lt;/p&gt;
&lt;p&gt;set为可变集合&lt;/p&gt;
&lt;p&gt;frozenset为固定集合&lt;/p&gt;
&lt;p&gt;可变集合特有的方法: add, remove, discard, pop, clear, 这些接受对象的方法, 参数必须是可哈希的&lt;/p&gt;
&lt;h3 id="sheng-ming"&gt;声明&lt;/h3&gt;
&lt;p&gt;用集合的工厂方法 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 10 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-10:/posts/2013/03/10/python-base-set.html</guid><category>python</category></item><item><title>Python-基础-字符串小结</title><link>http://www.wklken.me/posts/2013/03/10/python-base-string.html</link><description>&lt;h2 id="zi-fu-chuan"&gt;字符串&lt;/h2&gt;
&lt;h3 id="jian-jie"&gt;简介&lt;/h3&gt;
&lt;p&gt;字符串序列
用于表示和存储文本，python中字符串是不可变的，一旦声明，不能改变&lt;/p&gt;
&lt;p&gt;通常由单引号(' )，双引号(" )，三引号('''   """)包围&lt;/p&gt;
&lt;p&gt;其中三引号可以由多行组成，编写多行文本的快捷语法，常用语文档字符串，在文件的特定地点，被当做注释。便捷的多行注释&lt;/p&gt;
&lt;p&gt;Python实际三类字符串：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.通常意义字符串(str)
2.原始字符串，以大写R 或 小写r开始，r''，不对特殊字符进行转义
3.Unicode字符串，u'' basestring子类
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 Python 中，字符串是“不可改变的序列”&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.不可变

2.满足序列基本操作，按位置存取，切片及索引
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="zi-fu-chuan_1"&gt;字符串&lt;/h4&gt;
&lt;p&gt;1.获得帮助:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; help(str)
&amp;gt;&amp;gt;&amp;gt; dir(str …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 10 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-10:/posts/2013/03/10/python-base-string.html</guid><category>python</category></item><item><title>Python-基础-字典小结</title><link>http://www.wklken.me/posts/2013/03/09/python-base-dict.html</link><description>&lt;h2 id="zi-dian"&gt;字典&lt;/h2&gt;
&lt;h3 id="ding-yi"&gt;定义&lt;/h3&gt;
&lt;p&gt;dictionary&lt;/p&gt;
&lt;p&gt;1.键值对的集合(map)&lt;/p&gt;
&lt;p&gt;2.字典是以大括号“{}”包围的数据集合&lt;/p&gt;
&lt;p&gt;3.字典是无序的，在字典中通过键来访问成员。
  可变的，可嵌套，可以原处修改扩展等，不产生新的字典&lt;/p&gt;
&lt;p&gt;4.字典的键，可以是字符串(大小写敏感)，数字常量或元组（不可变类型），同一个字典的键可以混用类型。字典的键必须是可哈希的&lt;/p&gt;
&lt;p&gt;元组作为键的条件是，元组内的值都是不可变类型&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  a = (1,2)  #可以作为键
  b = (1,2,[3,4])  #不可以
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.字典的值可以是任意类型，可以嵌套，可以自由修改&lt;/p&gt;
&lt;h3 id="sheng-ming"&gt;声明&lt;/h3&gt;
&lt;p&gt;创建字典的几种方式:&lt;/p&gt;
&lt;p&gt;1.基本&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;#空字典&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'tom'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'age' …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 09 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-09:/posts/2013/03/09/python-base-dict.html</guid><category>python</category></item><item><title>Python-基础-数字小结</title><link>http://www.wklken.me/posts/2013/03/09/python-base-math.html</link><description>&lt;h2 id="shu-zi"&gt;数字&lt;/h2&gt;
&lt;p&gt;python中的数字类型完整工具：
整数&amp;amp;浮点数，复数，固定精度十进制数，有理分数，集合，布尔类型，无穷的整数精度，各种数字内置函数和模块&lt;/p&gt;
&lt;h3 id="shu-lei-xing"&gt;数类型&lt;/h3&gt;
&lt;p&gt;Python中有四种类型的数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;整数：一般意义上的数，包含十进制(无前缀),八进制(0开头)，十六进制(0x开头),二进制(0b开头)
eg.  2

长整数：无限大小的数,表示范围和内存有关
eg.   2012121200

浮点数：小数或用e/E(10的幂)表示的幂,默认，浮点数学缺乏精确性,可以使用decimal
eg.   3.23      50.2E2

复数：复数的虚部以字母J 或 j结尾
eg.    2+3i …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 09 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-09:/posts/2013/03/09/python-base-math.html</guid><category>python</category></item><item><title>Python-基础-元组小结</title><link>http://www.wklken.me/posts/2013/03/09/python-base-tuple.html</link><description>&lt;h2 id="yuan-zu"&gt;元组&lt;/h2&gt;
&lt;h3 id="jian-jie"&gt;简介&lt;/h3&gt;
&lt;p&gt;tuple&lt;/p&gt;
&lt;p&gt;1.元组是以圆括号“()”包围的数据集合，不同成员以“,”分隔。通过下标进行访问&lt;/p&gt;
&lt;p&gt;2.不可变序列，可以看做不可变的列表，与列表不同：元组中数据一旦确立就不能改变（所以没有类似列表的增删改操作，只有基本序列操作）&lt;/p&gt;
&lt;p&gt;3.支持任意类型，任意嵌套以及常见的序列操作&lt;/p&gt;
&lt;p&gt;4.元组通常用在使语句或用户定义的函数能够安全地采用一组值的时候，即被使用的元组的值不会改变&lt;/p&gt;
&lt;h3 id="sheng-ming-ji-shi-yong"&gt;声明及使用&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;#空元组&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;  &lt;span class="c1"&gt;#单个元素元组，注意逗号必须&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="c1"&gt;#判断&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;

&lt;span class="c1"&gt;#其他同序列基本操作：分片，索引&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 09 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-09:/posts/2013/03/09/python-base-tuple.html</guid><category>python</category></item><item><title>Python-基础-列表及列表解析小结</title><link>http://www.wklken.me/posts/2012/12/30/python-base-list.html</link><description>&lt;h2 id="lie-biao-ji-lie-biao-jie-xi"&gt;列表及列表解析&lt;/h2&gt;
&lt;p&gt;发现要到2013了，这两个月，离职入职，忙七忙八的，博文少了好多，笔记到是一大堆。
最近开始整理书签，微博收藏以及笔记梳理
采用删的方式，就是在evernote中新建一片，然后捞对应的笔记，一点点总结梳理，删除原有的笔记，发现这样效率高些（原来是在原有笔记之上直接修改总结，发现有用的信息其实并不多，效率有点低）&lt;/p&gt;
&lt;p&gt;相对而言比较全和有用，会持续优化。&lt;/p&gt;
&lt;p&gt;2013，发完这个系列的博客之后，将会整个博客迁移到自己的博客（刚开始写...），后续将同步吧，不过csdn可能会慢一些，自己blog会更自由些。后续将会是python&amp;amp;框架,linux后台开发，Go等等其他。&lt;/p&gt;
&lt;p&gt;不扯了，看正题
以下是对列表笔记梳理的第一个版本，仅供参考&lt;/p&gt;
&lt;p&gt;资料来源于书籍，网络，个人练习等等&lt;/p&gt;
&lt;hr/&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#author:wklken
#version: 1.0
#date: 2012-12-30
#history:
  2012-12-30  created
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ding-yi"&gt;定义：&lt;/h3&gt;
&lt;p&gt;列表是Python中使用最频繁的数据类型 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 30 Dec 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-12-30:/posts/2012/12/30/python-base-list.html</guid><category>python</category></item><item><title>Python-进阶-魔术方法小结(方法运算符重载)</title><link>http://www.wklken.me/posts/2012/10/29/python-base-magic.html</link><description>&lt;h2 id="mo-zhu-fang-fa"&gt;魔术方法&lt;/h2&gt;
&lt;p&gt;对定制及重载做了下梳理，还没消化完，后续补全&lt;/p&gt;
&lt;h3 id="ji-ben-ding-zhi"&gt;基本定制&lt;/h3&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C.__init__(self[, arg1, ...]) 构造器（带一些可选的参数）
C.__new__(self[, arg1, ...]) 构造器（带一些可选的参数）；通常用在设置不变数据类型的子类
C.__del__(self) 解构器
C.__str__(self) 可打印的字符输出；内建str()及print 语句
C.__repr__(self) 运行时的字符串输出；内建repr()  ‘‘  和 操作符
C.__unicode__(self)b Unicode 字符串输出；内建unicode()
C.__call__(self, *args) 表示可调用的实例
C …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Mon, 29 Oct 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-10-29:/posts/2012/10/29/python-base-magic.html</guid><category>python</category></item><item><title>Python-进阶-装饰器小结</title><link>http://www.wklken.me/posts/2012/10/27/python-base-decorator.html</link><description>&lt;p&gt;想找个地方快乐的coding，貌似不是一件容易的事情。&lt;/p&gt;
&lt;p&gt;一时冲动，不过后路已断，做自己想做的事情，总要付出一些代价的，坚持吧，只能。&lt;/p&gt;
&lt;p&gt;吐槽下，本周各种事情，搞得如越级打怪般艰难。周六，去三小时，回来三小时，大败而归，但是还是学到不少东西。&lt;/p&gt;
&lt;p&gt;差距还是有的，虽然自信可以在最短时间补上，但是，需要成本。&lt;/p&gt;
&lt;p&gt;总之，貌似时机不对，哎
以上废话，进入正题&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;上周六碰到了，一周忙碌，今天稍微理下，待补全，资料主要来源于书籍，网络&amp;amp;self.coding()。有任何问题，请指正哈&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="zi-yuan"&gt;资源&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://coolshell.cn/articles/11265.html"&gt;Python修饰器的函数式编程&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="ji-ben-gai-nian"&gt;基本概念&lt;/h2&gt;
&lt;p&gt;具体概念自己google&lt;/p&gt;
&lt;p&gt;装饰器是一个很著名的设计模式，经常被用于有切面需求的场景，较为经典的有插入日志、性能测试、事务处理, Web权限校验, Cache等。&lt;/p&gt;
&lt;p&gt;很有名的例子，就是咖啡，加糖的咖啡，加牛奶的咖啡 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 27 Oct 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-10-27:/posts/2012/10/27/python-base-decorator.html</guid><category>python</category></item></channel></rss>