<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>wklken's blog - paas</title><link>http://www.wklken.me/</link><description></description><lastBuildDate>Sat, 23 Sep 2017 15:00:00 +0800</lastBuildDate><item><title>k8s APIServer源码: api注册详细细节</title><link>http://www.wklken.me/posts/2017/09/23/source-apiserver-04.html</link><description>&lt;p&gt;基于版本 1.6.7&lt;/p&gt;
&lt;p&gt;前面介绍了, api注册过程&lt;/p&gt;
&lt;p&gt;问题: &lt;a href="https://github.com/emicklei/go-restful"&gt;go-restful github&lt;/a&gt;的&lt;code&gt;route&lt;/code&gt;中, &lt;code&gt;handler&lt;/code&gt;和&lt;code&gt;path&lt;/code&gt;是如何绑定在一起的? &lt;code&gt;handler&lt;/code&gt;在哪里定义的?&lt;/p&gt;
&lt;p&gt;以&lt;code&gt;/api&lt;/code&gt;为例&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/k8s/apiserver-register-02.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;前面介绍到&lt;code&gt;/api&lt;/code&gt;和&lt;code&gt;/apis&lt;/code&gt;分别注册加入到&lt;code&gt;Container&lt;/code&gt;, 而最终, 二者调用&lt;code&gt;installer.Install(ws)&lt;/code&gt;. 这一步, 我们需要进一步了解细节.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/k8s/apiserver-register-03.jpg"/&gt;&lt;/p&gt;
&lt;h2 id="webserviceaddroute"&gt;webservice.add(route)&lt;/h2&gt;
&lt;p&gt;问题: 构建Route加入到WebService在哪里处理的?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vendor/k8s.io/apiserver/pkg/endpoints/installer.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;APIInstaller …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 23 Sep 2017 15:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2017-09-23:/posts/2017/09/23/source-apiserver-04.html</guid><category>paas</category></item><item><title>k8s APIServer源码: api注册主体流程</title><link>http://www.wklken.me/posts/2017/09/23/source-apiserver-03.html</link><description>&lt;p&gt;基于版本 1.6.7&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/k8s/apiserver-register-01.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;k8s使用了&lt;a href="https://github.com/emicklei/go-restful"&gt;go-restful github&lt;/a&gt;, 在前面, 已经介绍了&lt;code&gt;container&lt;/code&gt;如何初始化的.&lt;/p&gt;
&lt;p&gt;这里, 需要关注, api是如何注册进来的. 即, &lt;code&gt;route -&amp;gt; webservice -&amp;gt; container&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="begin"&gt;begin&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;pkg/master/master.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="nx"&gt;completedConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="c1"&gt;//  register /api&lt;/span&gt;
   &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InstallLegacyAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GenericConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RESTOptionsGetter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;legacyRESTStorageProvider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="c1"&gt;//  register /apis&lt;/span&gt;
   &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InstallAPIs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;APIResourceConfigSource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GenericConfig …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 23 Sep 2017 14:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2017-09-23:/posts/2017/09/23/source-apiserver-03.html</guid><category>paas</category></item><item><title>k8s APIServer源码: 服务启动</title><link>http://www.wklken.me/posts/2017/09/23/source-apiserver-02.html</link><description>&lt;p&gt;基于版本 1.6.7&lt;/p&gt;
&lt;h2 id="qi-dong-liu-cheng"&gt;启动流程&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/k8s/apiserver-start-01.jpg"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cmd/kube-apiserver/apiserver.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;cmd/kube-apiserver/app/server.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ServerRunOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 构建master配置信息&lt;/span&gt;
    &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sharedInformers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;BuildMasterConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// 调用RunServer&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;RunServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sharedInformers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NeverStop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;RunServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;master&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sharedInformers&lt;/span&gt; &lt;span class="nx"&gt;informers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SharedInformerFactory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stopCh&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="kt"&gt;error …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 23 Sep 2017 13:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2017-09-23:/posts/2017/09/23/source-apiserver-02.html</guid><category>paas</category></item><item><title>k8s APIServer源码: go-restful框架</title><link>http://www.wklken.me/posts/2017/09/23/source-apiserver-01.html</link><description>&lt;p&gt;基于版本 1.6.7&lt;/p&gt;
&lt;p&gt;k8s的APIServer, 使用了&lt;a href="https://github.com/emicklei/go-restful"&gt;go-restful&lt;/a&gt;作为其处理框架, 注册资源并接收处理 HTTP 请求.&lt;/p&gt;
&lt;p&gt;在阅读APIServer源码之前, 需先理解go-restful主要概念.&lt;/p&gt;
&lt;h2 id="intro"&gt;intro&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;package for building REST-style Web Services using Google Go&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/emicklei/go-restful"&gt;go-restful github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="go-restfu" src="/imgs/k8s/go-restful.png"/&gt;&lt;/p&gt;
&lt;h2 id="concepts"&gt;concepts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Container: 一组WebService的集合, 目的: &lt;code&gt;Containers for WebServices on different HTTP endpoints.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;WebService: Route的集合; 为一组Route定义统一的 root path / 请求类型 / 响应类型&lt;/li&gt;
&lt;li&gt;Route: 定义method/ULR path/调用函数/文档/参数 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 23 Sep 2017 12:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2017-09-23:/posts/2017/09/23/source-apiserver-01.html</guid><category>paas</category></item></channel></rss>