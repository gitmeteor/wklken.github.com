<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>wklken's blog</title><link>http://www.wklken.me/</link><description></description><atom:link href="http://www.wklken.me/feed.xml" rel="self"></atom:link><lastBuildDate>Sun, 24 Jul 2016 00:00:00 +0800</lastBuildDate><item><title>[分享]关于vim</title><link>http://www.wklken.me/posts/2016/07/24/about-vim.html</link><description>&lt;hr/&gt;
&lt;p&gt;很早之前的小组分享, 整理成pdf&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;object data="/extra/share/about-vim.pdf" height="525" type="application/pdf" width="729"&gt;&lt;br/&gt;
&lt;embed src="/extra/share/about-vim.pdf"&gt;&lt;br/&gt;
&lt;/embed&gt;&lt;br/&gt;
&lt;/object&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 24 Jul 2016 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2016-07-24:posts/2016/07/24/about-vim.html</guid><category>share</category></item><item><title>[分享]关于代码调试DE那些事</title><link>http://www.wklken.me/posts/2016/05/12/how-to-debug.html</link><description>&lt;hr/&gt;
&lt;p&gt;之前写过一篇博文, 做分享, 重新梳理了下&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;object data="/extra/share/how-to-debug.pdf" height="525" type="application/pdf" width="729"&gt;&lt;br/&gt;
&lt;embed src="/extra/share/how-to-debug.pdf"&gt;&lt;br/&gt;
&lt;/embed&gt;&lt;br/&gt;
&lt;/object&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Thu, 12 May 2016 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2016-05-12:posts/2016/05/12/how-to-debug.html</guid><category>share</category></item><item><title>[分享]Python源码剖析-数据结构</title><link>http://www.wklken.me/posts/2016/03/01/python-source-datastructure.html</link><description>&lt;p&gt;&lt;object data="/extra/share/python-source-datastructure.pdf" height="525" type="application/pdf" width="729"&gt;&lt;br/&gt;
&lt;embed src="/extra/share/python-source-datastructure.pdf"&gt;&lt;br/&gt;
&lt;/embed&gt;&lt;br/&gt;
&lt;/object&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 01 Mar 2016 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2016-03-01:posts/2016/03/01/python-source-datastructure.html</guid><category>python</category></item><item><title>一些Centos Python生产环境的部署命令</title><link>http://www.wklken.me/posts/2016/02/18/python-env-in-centos.html</link><description>&lt;p&gt;Just notes&lt;/p&gt;
&lt;p&gt;拿到一台干净的centos之后, 初始化Python环境, 一些命令和问题记录而已&lt;/p&gt;
&lt;p&gt;可以搞成脚本自动初始化, 当然, 用docker更好&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="_1"&gt;基础环境&lt;/h2&gt;
&lt;h4 id="1"&gt;1. 创建用户&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo adduser newuser
sudo passwd newuser

&lt;span class="c1"&gt;# 设置授权不需要输入密码&lt;/span&gt;
sudo /usr/sbin/visudo
newuser       &lt;span class="nv"&gt;ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;NOPASSWD: ALL
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="2-epelfedora-extra-packages-for-enterprise-linux-repository"&gt;2. EPEL(Fedora Extra Packages for Enterprise Linux repository )&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://www.rackspace.com/knowledge_center/article/install-epel-and-additional-repositories-on-centos-and-red-hat"&gt;参考文档&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
sudo rpm -Uvh epel-release-6*.rpm
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="3-ius"&gt;3. 加ius源&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://dl.iuscommunity.org/pub/ius/stable/CentOS/6/x86_64/ius-release-1.0-13.ius.centos6.noarch.rpm"&gt;包地址&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://dl.iuscommunity.org/pub/ius/stable/CentOS/6/x86_64/ius-release-1.0-13.ius.centos6.noarch.rpm
sudo rpm -Uvh ius-release-1.0-13.ius.centos6.noarch.rpm
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="4-python27-python3-pip"&gt;4. 安装python2.7 / python3 / pip&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install python27
sudo yum install python27-devel
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;then&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py &lt;span class="p"&gt;|&lt;/span&gt; sudo /usr/bin/python2.7 -

&lt;span class="c1"&gt;# pip&lt;/span&gt;
curl https://raw.githubusercontent.com/pypa/pip/master/contrib/get-pip.py &lt;span class="p"&gt;|&lt;/span&gt; sudo /usr/bin/python2.7 -
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;extra: install python3&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install python34u python34u-devel
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="5-virtualenv"&gt;5. virtualenv&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="6-gen-ssh-key"&gt;6. gen ssh key&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh-keygen -t rsa

add ~/.ssh/id_rsa.pub to git or github
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="_3"&gt;一些服务&lt;/h2&gt;
&lt;h4 id="1-install-git"&gt;1. install git&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install git
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="2-mysql"&gt;2. mysql&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install mysql
sudo yum install mysql-devel* -y
sudo yum install mysql-server
sudo /sbin/service mysqld start
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="3-redis"&gt;3. redis&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install redis
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="4-rabbitmq"&gt;4. rabbitmq&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install rabbitmq-server
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="_5"&gt;问题&lt;/h2&gt;
&lt;h4 id="errno-14-peer-cert-cannot-be-verified-or-peer-cert-invalid"&gt;[Errno 14] Peer cert cannot be verified or peer cert invalid&lt;/h4&gt;
&lt;p&gt;add "sslverify=false" in /etc/yum.conf&lt;/p&gt;
&lt;h4 id="pip-error-importerror-cannot-import-name-httpshandler"&gt;pip error: ImportError: cannot import name HTTPSHandler&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install openssl openssl-devel -y
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/20688034/importerror-cannot-import-name-httpshandler-using-pip"&gt;see in sof&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="mysql-python"&gt;MySQL-python&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    _mysql.c:2642: error: initializer element is not constant
    _mysql.c:2642: error: &lt;span class="o"&gt;(&lt;/span&gt;near initialization &lt;span class="k"&gt;for&lt;/span&gt; &amp;lsquo;_mysql_ResultObject_memberlist&lt;span class="o"&gt;[&lt;/span&gt;0&lt;span class="o"&gt;]&lt;/span&gt;.offset&amp;rsquo;&lt;span class="o"&gt;)&lt;/span&gt;
    _mysql.c: In &lt;span class="k"&gt;function&lt;/span&gt; &amp;lsquo;_mysql_ConnectionObject_getattr&amp;rsquo;:
    _mysql.c:2666: error: &amp;lsquo;_mysql_ConnectionObject&amp;rsquo; has no member named &amp;lsquo;open&amp;rsquo;
    error: &lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="s1"&gt;'gcc'&lt;/span&gt; failed with &lt;span class="nb"&gt;exit&lt;/span&gt; status 1

    ----------------------------------------
Command &lt;span class="s2"&gt;"/data/home/alarm/env/bin/python -c "&lt;/span&gt;import setuptools, tokenize&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nv"&gt;__file__&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'/tmp/pip-build-HgXAQT/MySQL-python/setup.py'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;exec&lt;span class="o"&gt;(&lt;/span&gt;compile&lt;span class="o"&gt;(&lt;/span&gt;getattr&lt;span class="o"&gt;(&lt;/span&gt;tokenize, &lt;span class="s1"&gt;'open'&lt;/span&gt;, open&lt;span class="o"&gt;)(&lt;/span&gt;__file__&lt;span class="o"&gt;)&lt;/span&gt;.read&lt;span class="o"&gt;()&lt;/span&gt;.replace&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'\r\n'&lt;/span&gt;, &lt;span class="s1"&gt;'\n'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, __file__, &lt;span class="s1"&gt;'exec'&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="s2"&gt;" install --record /tmp/pip-kx2cSu-record/install-record.txt --single-version-externally-managed --compile"&lt;/span&gt; failed with error code &lt;span class="m"&gt;1&lt;/span&gt; in /tmp/pip-build-HgXAQT/MySQL-python
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;处理:  &lt;code&gt;yum install mysql-devel&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Thu, 18 Feb 2016 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2016-02-18:posts/2016/02/18/python-env-in-centos.html</guid><category>python</category></item><item><title>摘录&gt;</title><link>http://www.wklken.me/posts/2016/02/17/master-en-in-six-months.html</link><description>&lt;p&gt;在高铁上顺手刷完的一本书, 学习英语的方法论吧, 和学习编程有很多类似的地方, 互相印证.&lt;/p&gt;
&lt;p&gt;还是值得一读的, 建议想掌握英文的同学买一本读一读&lt;/p&gt;
&lt;p&gt;额, 英文这个问题困扰了我很久, 当然, 学习的主要目的是能更快更好的读懂文档以及进行一些基本交流(其实是为了刷电影美剧更方便些ORZ)&lt;/p&gt;
&lt;p&gt;从去年开始就实行&lt;code&gt;泡脑子&lt;/code&gt;的策略, 上下班各半个小时, 反复在听老友记十季的音频(安利app: 喜马拉雅). 然后固定在刷几部美剧, 买了本英文著作一字一句反复读中, 也开始在国外的论坛提问题, 发言, 用kindle开启生词模式在刷书. 当然, 俺的英文还是别别扭扭的.....&lt;/p&gt;
&lt;p&gt;程序员的一大优势是, 文档/搜索, 基本都是英文的, 这个环境还是不错的, 另外, mac/iphone/ipad全部切成英文系统, 取词软件全开, 哈哈哈.....&lt;/p&gt;
&lt;p&gt;然而, 还是不会说啊.....痛定思痛&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;以下读书摘要&lt;/p&gt;
&lt;h4 id="_1"&gt;观点&lt;/h4&gt;
&lt;p&gt;本书的观点&lt;br/&gt;
- 我特别主张自然规律，你越能理解和运用自然规律，你就越能成功&lt;br/&gt;
- 一个大脑健全的成年人完全有能力在6个月内从0掌握任何一种外语！&lt;br/&gt;
- 只要掌握规律，跟随规律去练习，一个人能做到的结果，任何人都能做到！&lt;/p&gt;
&lt;p&gt;长期误解的错误的观点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有语言天赋的人才能学会外语&lt;/li&gt;
&lt;li&gt;到国外待一段时间就能学会外语&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="_2"&gt;掌握一种外语的标准&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;（1）你已经掌握了有关语言的最高频单词和词组，你能听懂，也能自己独立使用。在外语里边，掌握1000个最高频词，完全满足日常生活沟通所需的85%，3000个高频词可以覆盖日常沟通、工作及商务交流的98%以上。&lt;/li&gt;
&lt;li&gt;（2）你完全可以很自然地使用你已经会的词组和单词，来创造你想说的任何句子，沟通你想表达的意思。当然，有时候你会找不到最确切和最巧妙的说法，但是你完全有能力找到能用的词来表达你想说的东西。&lt;/li&gt;
&lt;li&gt;（3）听到陌生单词的时候，你会轻松地邀请别人解释给你听。而在这个过程当中，你完全有能力用外语来了解和接受这个新的概念。同时，你也有能力吸收这个概念带给你的生词。&lt;/li&gt;
&lt;li&gt;（4）你的发音已经接近母语者。可能有的地方不是100%一样，但是这些绝对不会对你的沟通造成阻碍。&lt;/li&gt;
&lt;li&gt;（5）你说外语的节奏、速度、轻重、停顿等，已经完全符合外语母语者的习惯，而且你在说的时候，总是感到很自然。你也会很恰当地用礼节和最普遍的感叹方式来进行日常&amp;ldquo;共鸣&amp;rdquo;，从而达到友好沟通的目的。&lt;/li&gt;
&lt;li&gt;（6）你已经完全掌握了新的肢体语言的表达方式，包括一些面部表情、不同手势等。&lt;/li&gt;
&lt;li&gt;（7）你已经建立了语感，在肚子里能知道哪些说法算是大家都认同的，也会感觉到哪些说法有一点儿偏离大家习惯的规矩。&lt;/li&gt;
&lt;li&gt;（8）同时，为了学得更快，你也要懂得累了就休息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="_3"&gt;学会外语的五项核心原则&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;从和你有密切关联的外语内容学起: 只要信息跟你个人没有重要关联，你就自然会觉得没有重要意义，因此不会给注意力。不给注意力的自然结果是记不得、学得慢甚至学不会。反之，任何对你本人有重要意义的信息，都会引起你的注意，并且当你可以给它足够注意力时，你就会自然而然学得特别快 =&amp;gt; 结论: 为了把外语学好，你要找到这门外语跟你的重要关联。在学习时，你一定要选择跟自己的兴趣、动力有重要关联的外语内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;和学习技术挺类似, 技术深入以及眼界扩展, 从自己工作内容相关的东西开始才能事半功倍, 才能有效率&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把外语当成沟通工具: 1. 把外语当成工具，会让你通过&amp;ldquo;用&amp;rdquo;来学外语，而不是先学后用. 把外语当成沟通工具的第一个必然结果是，只要你会一点，就会马上去用，从而体验这个工具发挥的效力。2. 把外语当成工具，会让你从功能出发，把形式放在后面学通过用外语来学外语的关键，是把自己的注意力先放在单词和词组的功能。这样，你会先用功能最明显的几个单词和词组来沟通，不让形式成为卡住自己学习的节点。3. 把外语当成工具，会让你自然接受多种说法，因此不拘泥于一个&amp;ldquo;标准答案&amp;rdquo; 4. 把外语当成工具，可以获取&amp;ldquo;反馈&amp;rdquo;带来的巨大帮助，因此效果好&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;做技术的这种机会还是比较多的. 从实践中学习, 在实践中验证理论.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;理解了含义，自然能&amp;ldquo;获取&amp;rdquo;外语: 1. 可理解输入就是首先理解含义，然后下意识自动&amp;ldquo;获取&amp;rdquo;外语的过程。为了把你的外语学习速度加快，你需要在学习的过程中，给自己创造可理解输入的条件。2. 相信自己的潜意识学外语的能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生理训练为主: 要学好外语，更重要的是要进行合适的生理训练，也就是说，外语学习的一个非常重要的部分，是训练大脑神经和外语肌肉。与练健美体操一样，练好外语的过程是一个肌肉训练的过程。1. 一定要用足够时间锻炼耳朵里的外语听觉神经！ 2. 发音训练绝对是肌肉训练的一个过程，因此要用体育训练的思路，指导自己找对路，这包括经常练，同时在练习的过程中注意动作的准确度。3. 创造外语条件反射！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;掌握好心理状态: 用深度放松的状态来学习, 保持良好学习状态的另外一个重要因素，就是管理自己的渴望。必须开心忍受听不懂的阶段&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="_4"&gt;学会外语的七个关键行为&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;多听&amp;mdash;&amp;mdash;快速长好&amp;ldquo;外语DNA&amp;rdquo;: &amp;ldquo;泡脑子&amp;rdquo;表面的意思很简单，就是说要把自己的大脑&amp;ldquo;泡&amp;rdquo;在外语的声音里。除此之外，也有一些自我管理的方式和态度方面的问题需要注意，这样才能把&amp;ldquo;泡脑子&amp;rdquo;的作用发挥到极致。&lt;/li&gt;
&lt;li&gt;先认识含义，后明白词: 作为学外语的成年人，也必须运用这个基本原理。不管怎么样，要把注意力先放在明白含义上，在这个基础上，你的大脑就很容易吸收你正在学的语言。换句话说，为了学会外语，要先懂意思，不是为了懂意思要先学会外语！ 肢体语言/整体环境和场景/通过已知&amp;rdquo;获取&amp;rdquo;未知/&lt;/li&gt;
&lt;li&gt;大胆组合，大量去用&lt;/li&gt;
&lt;li&gt;从核心高频内容开始学起: 为了把英语学得透彻，并且达到完全像母语者一样，根本不需要学那么多，更不需要同时什么都学，只需要把注意力放在外语的核心，掌握外语的高频词即可。所谓高频词就是沟通中出现频率高的外语单词，高频词是外语沟通的核心。所以，学到8000个单词以后，你的英文水平已经和普通的英语母语者一样好！外语学习内容贵精不贵多，学习的过程一定要遵守质量第一，数量第二的原则的&lt;/li&gt;
&lt;li&gt;找一个好的外语家长&lt;/li&gt;
&lt;li&gt;掌握发音的绝招: 除了听声音并调整自己面部肌肉之外，练发音的时候，还有一个&amp;ldquo;绝招&amp;rdquo;能用，就是&amp;ldquo;看脸说话&amp;rdquo;，意思是模仿外语母语者的面部和口型来练发音。&lt;/li&gt;
&lt;li&gt;一个盒子两条路（Same Box-Different Path）: 我相信你很清楚，为了真正会外语，迟早必须懂得用外语思考。也就是说，自己的大脑能够直接将头脑中的意义联结到外语的声音。根本不需要经过中文翻译. 只有把外语的声音和内心的画面含义联结到一起，才是下意识高效率的学习，也就是用外语沟通的时候，自己沟通的感觉和效果与说母语一样。其实所谓&amp;ldquo;外语思维&amp;rdquo;就是这个意思&amp;mdash;&amp;mdash;听到外语，在头脑中看到画面，同时注意到自己的感觉，说话时也是直接从画面和感觉联结到外语. &amp;ldquo;同一个盒子，两条路&amp;rdquo;的主要含义，来自于我们对人类大脑处理信息的科学认识。人对世界的认识和记忆，最主要来源不是文字或语言，更基层的，是神经层面的5种感觉，包括：视觉、听觉、触觉、嗅觉和味觉。 方法: 故意创造和运用画面/用比喻找到含义的本质/找到沟通的对象, 用外语交流/&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过已知获取未知, 有点类似&lt;code&gt;如何高效学习&lt;/code&gt;中提到的观点, 建立高速公路, 建立关联, 比喻.&lt;/p&gt;
&lt;p&gt;还有, kindle中生词模式就是类似这样的....&lt;/p&gt;
&lt;p&gt;外语家长, 其实类似mentor的角色, 虽然多年以来....还有, 实际的code review&lt;/p&gt;
&lt;h4 id="_5"&gt;具体的学习计划&lt;/h4&gt;
&lt;p&gt;自己看书吧, 有挺多借鉴的地方&lt;/p&gt;
&lt;p&gt;不过, 对于我这个散漫闲人, 严格按部就班有些困难, 所以, 只能培养所谓的&lt;code&gt;习惯&lt;/code&gt;, 侵占覆盖掉碎片时间, 同时把相关的方法论给&lt;code&gt;践行&lt;/code&gt;了, 至于效果, 额, 过段时间看看......&lt;/p&gt;
&lt;h4 id="_6"&gt;一些书中提到的习惯&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;习惯一：开始用自己的右脑，调整到每天进入英语频道。&lt;/li&gt;
&lt;li&gt;习惯二：想到任何关于英语问题的时候，自动想起如何用英语发问。&lt;/li&gt;
&lt;li&gt;习惯三：把自己的耳朵和嘴巴连接起来，变成一个&amp;ldquo;发音准确度反馈循环&amp;rdquo;。&lt;/li&gt;
&lt;li&gt;习惯四：把英语声音直接连接到脑海中的画面和感觉。&lt;/li&gt;
&lt;li&gt;习惯五：把玩词变成每天的习惯和乐趣。拼凑词，创造含义。&lt;/li&gt;
&lt;li&gt;习惯六：完全建立自言自语的习惯&lt;/li&gt;
&lt;li&gt;习惯七：每天用英语开口说话，进行真实沟通。&lt;/li&gt;
&lt;li&gt;习惯八：随时开口练习发音。&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 17 Feb 2016 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2016-02-17:posts/2016/02/17/master-en-in-six-months.html</guid><category>books</category></item><item><title>也许是一个新的开始</title><link>http://www.wklken.me/posts/2016/02/16/maybe-a-new-start.html</link><description>&lt;p&gt;也许是一个新的开始吧.&lt;/p&gt;
&lt;p&gt;原先写blog都是深思熟虑, 偶尔发发微博, 以及几乎不发朋友圈.....&lt;/p&gt;
&lt;p&gt;年后, 发现, 其实blog就是个个人吐吐槽, 以及一些积累的地方, 深思熟虑个蛋(好多笔记, 半成品等等蹲在wiki里不见天日, 也不见得有时间完善好)&lt;/p&gt;
&lt;p&gt;所以, 打算开启话唠模式. 至于那些不是很"深思熟虑"的东西, 通过长时间不断迭代来优化吧, 然后会有一些吐槽什么的.&lt;/p&gt;
&lt;p&gt;不大确定有多少人订阅了, 可以取关哈:)&lt;/p&gt;
&lt;p&gt;从此, 不想太多, 看看今年的产出吧. 当然, 尽量保质保量.&lt;/p&gt;
&lt;p&gt;从此文开始(够短吧)&lt;/p&gt;
&lt;p&gt;2016-02-16 于深圳&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 16 Feb 2016 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2016-02-16:posts/2016/02/16/maybe-a-new-start.html</guid><category>blabla</category></item><item><title>读书笔记-调试九法</title><link>http://www.wklken.me/posts/2015/11/29/debugging-9-rules.html</link><description>&lt;p&gt;去年十一月份, 写过一篇blog, 讲了一些自己平时进行代码调试的观点, 列了21条&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.wklken.me/posts/2014/11/23/how-to-debug.html"&gt;关于代码调试de那些事&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上周多看上买了这本书, 花了两小时读完, 做下笔记, 发现很多观点其实是类似的.&lt;/p&gt;
&lt;p&gt;这本书是九条原则, 即方法论, 了解和学习, 在实践中遵守, 有利于提升自己调试的效率:)&lt;/p&gt;
&lt;p&gt;&lt;img alt="debug-rules" src="/imgs/books/debug-rules.jpg"/&gt;&lt;/p&gt;
&lt;h4 id="1"&gt;1. 理解系统&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你必须掌握系统的工作原理以及它是如何设计的。在某些情况下，还要知道为什么这样设计。如果你没有理解系统中的某个部分，那么这通常就是出问题的地方。（这不仅仅是&amp;ldquo;墨菲定律&amp;rdquo;的问题，如果你不能理解你所设计的系统，你的工作可能会变得一团糟。）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;理解是怎么设计的, 机制, 原理, 需求等等, 面对的东西才是一个白盒.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;理解系统的基本方法就是阅读手册&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;手册, 手册, 很多时候, 我们并不能抑制住自己, 去编码, 去调试, 去解决问题, 而忽略了一些重要的东西, 例如: 文档, 我们总以为自己了解一切, 很多时候很诡异的问题查查文档, 才发现, 原来文档有说明:)&lt;/p&gt;
&lt;p&gt;或者, 跳过去看源码也是不错的选择&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;理解了你自己的系统后，还会获得一个额外的好处。当你找到bug时，必须在不破坏其他地方的前提下修复它们。理解系统行为是不破坏系统的第一步。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有个段子, 修了一个, 结果改出了3个bug...只有对系统足够了解, 才能修复而不破坏&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人们在调试的时候，通常都不会彻底地阅读系统手册。他们采取跳读的方式，查看他们认为重要的一些章节，但问题的线索可能就隐藏在被略过的那些章节中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有时是这样的, 但是可能时间有限, 这个没法子, 只能在闲时, 多多阅读, 例如, 隔段时间回去浏览一遍&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;知道什么是正常的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么是正常的, 什么是异常的?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;知道工作流程, 当你尝试寻找bug时，必须知道要查找的路线&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不多说, 捞数据, 追数据, 基本功&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;了解你的工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要修车, 有趁手的工具才能更高效地解决问题&lt;/p&gt;
&lt;h4 id="2"&gt;2. 制造失败&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;关键是在发生失败的时候要看到它&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;日志, 现场, 栈等&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;当你发现一个故障时该怎么办？&amp;rdquo; &amp;ldquo;试着让它再次发生。&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;复现&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;仔细观察你做了什么，然后再做一次，并且记下你做的每个步骤。然后，按照你自己所写的步骤去做，确定这样做确实导致了错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;复现的步骤&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要引发失败, 而不是模拟失败......如果你猜测失败机理，模拟往往不会成功。原因通常有两个，要么你的猜测是错误的；要么测试改变了条件，模拟的系统可以正确工作，或者更糟，发生新的错误，因而分散了你对正在查找的问题的注意力......注意，不要用一个看似完全相同（而实际上不同）的环境来代替并希望看到相同的错误&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关注问题本身, 不要错误的转移到了猜测的东西&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;仔细观察失败&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;仔细观察失败! 仔细观察! 仔细....&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是已修复bug，还是仅仅由于运气好，它不再发生了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你必须确认这一点&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;永远不要丢掉调试工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;调试工具, 不要当成一次性的工具用完即仍, 可能是错误的&lt;/p&gt;
&lt;h4 id="3"&gt;3. 不要想, 而要看&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;亲眼看到底层的失败是非常重要的。如果你猜测失败是如何发生的，那常常会修复一些根本不是bug的问题。这样的修复不仅不会解决问题，而且还会浪费时间和金钱，甚至会破坏其他地方。请记住，不要这样做。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不要猜测&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;观察是很难的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;的确很难&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你必须仔细观察，找到足够多的问题细节，才能调试它......如果你不能留意实际情况发生的全过程，那么你极有可能曲解很多问题。你猜测某个地方出了问题，于是修复它，但实际上错误发生在另一个地方......一定要亲眼看到实际错误是如何发生的。观察往往比猜测能够更快地找到问题。因为猜测虽然看起来是捷径，但这条捷径并不会带你找到问题的根源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;观察而不是猜测&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在停下来思考问题之前，对细节的观察应该到什么程度才合适呢？简单的答案是：&amp;ldquo;一直观察，直到把问题的原因锁定在几种可能性之内。&amp;rdquo;&lt;/p&gt;
&lt;p&gt;海森堡测不准原理: 换言之，测试工具影响了被测系统......。任何插装都可能对系统造成影响，只是程度不同而已&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;插装, 类似于工具的调试模式, 会影响系统, 所以要注意&lt;/p&gt;
&lt;h4 id="4"&gt;4. 分而治之&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;缩小搜索范围......在查找问题时，&amp;ldquo;分而治之&amp;rdquo;实际上是第一条需要使用的原则。事实上，在查找问题时它也是唯一需要应用的规则。所有其他规则都只是帮助你遵循这条规则。分而治之是调试的核心，很多人都知道它，但很多人都没有遵守它，这也正是我写本章的原因。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;二分法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;确定范围...你必须知道搜索范围，而且必须知道在一端一切正常，而在另一端出现了问题.....从有问题的支路开始查找问题......&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原则&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果同时出现了多个问题，当你确实查明了其中的一个问题时，应该立即修复它，然后再查找其他问题......有时修复了一个问题，另一个问题也解决了，两个问题实际上是同一个bug&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是有这种情况&lt;/p&gt;
&lt;h4 id="5"&gt;5. 一次只改一个地方&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;使用步枪，而不要用散弹枪......一次只改一个地方......此外，如果你真的看到了错误，应该只修复这个地方&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这点很重要&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你在两个测试之间更改了很多代码，或者为两个测试设置了不同的环境，那么这两个测试将很难对比。它们之间有很多差别并不是由bug引起的，而你必须不断地解释这些差别。你必须把它们之间的差别减少到只与bug有关。排除其他的干扰因素&lt;/p&gt;
&lt;p&gt;自从上一次能够正常工作以来你更改了什么......有时，正常的系统和错误的系统之间的区别是由于一项更改造成的。做了更改之后，正常的系统开始出现故障。一种非常有效的办法是找出第一个导致系统出错的版本，尽管这可能需要连续测试原来的版本，直到找到没有故障的版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大部分问题都是出现在最近一次修改&lt;/p&gt;
&lt;h4 id="6"&gt;6. 保持审计跟踪&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;有时看起来最不起眼的事情实际上却是导致发生bug的关键......因此，你必须记录下每一件事情，不起眼的事情可能会很重要&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;细节, 步骤&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;记下你的每步操作、顺序和结果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还是步骤&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;魔鬼隐藏在细节中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;细节&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在细节方面，永远都不要相信你的记忆，而要把它写下来。如果你相信你的记忆，将会制造很多麻烦。你会忘掉一些你认为不重要的细节，当然，这些细节将会被证明是非常重要的。你会忘掉一些在你看来不重要的细节，而这些细节对于后来解决另一个不同问题的人可能很重要。除了口头表述以外，你无法将信息传递给别人，而这会浪费所有人的时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="7"&gt;7. 检查插头&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;怀疑自己的假设......当我们看到一个问题时，通常在某个特定位置看到了问题，但导致这个问题的原因却在上游或者是一个基础性的问题。系统不具备正确操作的条件，于是出现了非常奇怪的行为。当你看到完全来自另一个世界的问题时，应该停下来，看看你是不是还在地球上&lt;/p&gt;
&lt;p&gt;从头开始检查&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="8"&gt;8. 获得全新观点&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;寻求帮助: 向别人寻求帮助至少有3个原因（还不算把整个问题甩给别人）：获得全新观点、专业知识和经验。而且，人们通常很愿意帮忙，因为这给了他们一个证明自己很聪明的机会&lt;/p&gt;
&lt;p&gt;事实上，有时向别人解释问题也会使你有全新的认识，之后你自己就解决了问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;小黄鸭调试法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;报告症状, 而不是理论: 让他提出自己的观点。他们的观点可能与你的观点相符，也可能全然不同，而这正是你想要的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="9bug"&gt;9.如果你不修复bug, 它将依然存在&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;检查问题确实已被修复&lt;/p&gt;
&lt;p&gt;bug 从来不会自己消失&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 29 Nov 2015 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2015-11-29:posts/2015/11/29/debugging-9-rules.html</guid><category>books</category></item><item><title>这段时间的一些想法</title><link>http://www.wklken.me/posts/2015/11/08/summary-13-some-points.html</link><description>&lt;p&gt;发现自己有一段时间没更新 blog 了, 写一写吧, 至于技术方面的东西, 后面慢慢发吧:)&lt;/p&gt;
&lt;p&gt;这一年经历了很多事情, 休息了一百天, 然后找工作, 入职.&lt;/p&gt;
&lt;p&gt;入职期间还有些波折, offer那边说发了我这边却一直没收到, 还有确认入职事宜后没有发入职通知, 不过波波折折, 也算入职了, 三周, 到了深圳的加班圣地, 开启新的副本.&lt;/p&gt;
&lt;p&gt;工作四年多了, 这是第四家公司了, 这四年发生了很多事情, 阿里上市了, 快播消失了, 甜品也歇业了, 刚到企鹅,  新生, 归零心态, 逐渐适应中, 算是一个新的开始, 重新审视自己, 审视工作, 审视学习, 审视生活,  以刚入行时的状态, 重新开始这趟征程.&lt;/p&gt;
&lt;p&gt;总之, 这许多年, 是一些经历, 做了很多事情, 结识了很多人. 逐步形成了自己现在的样子.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;尽量写得不像鸡汤, 很多东西还是要自己慢慢去感受体悟, 诸君共勉.&lt;/p&gt;
&lt;p&gt;&lt;img alt="simple" src="/imgs/life/simple.png"/&gt;&lt;/p&gt;
&lt;h3 id="_1"&gt;我只是一个普通人&lt;/h3&gt;
&lt;p&gt;刚毕业那会, 初生牛犊, 总想着去做一些牛逼的事情, 学一些给力的东西, 变得强大, 变成自己想象中的&lt;code&gt;牛人&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;而, 后来这些年, 逐渐对自己, 对生活, 以及对这整个世界, 有了新的认识.&lt;/p&gt;
&lt;p&gt;当然, 也碰到了很多人, 碰到了很多事. 期间感受过智商被碾压,  感受过业务成就技术的喜悦, 也感受过业务夭折的无奈.&lt;/p&gt;
&lt;p&gt;最终, 有了自己的定位.&lt;/p&gt;
&lt;p&gt;我只是个普通人, 智商不高不低, 资质一般, 没有所谓的天赋异禀.&lt;/p&gt;
&lt;p&gt;当然, 有天才的存在, 而对于普通人来说, 只能, 靠着自己的努力一点点慢慢地成长, 变得强大.&lt;/p&gt;
&lt;p&gt;勤能补拙? 答案是否定的, 普通人的天赋和精力有限, 想明白自己感兴趣的, 想做的是什么, 然后投入进去, 坚持下来, 也就是了. 把有限精力浪费在无限的地方上是非常愚蠢的.&lt;/p&gt;
&lt;p&gt;普通人做普通事, 很多时候, 选择更重要, 运气也很重要:) 所以, 思考, 投入, 坚持, 每天朝着目标前进, 这就够了, 你会发现, 你比以前的自己更加强大.&lt;/p&gt;
&lt;h3 id="_2"&gt;战线太长有好有坏, 但大多数时候, 需要关注跟自己工作相关的东西&lt;/h3&gt;
&lt;p&gt;工作四年多, 中间有两年, 走了弯路吧感觉.&lt;/p&gt;
&lt;p&gt;耗费了大量的时间, 每天晚上及周末, 去接触, 所谓的&lt;code&gt;学习&lt;/code&gt;各种技术, 而绝大多数, 在自己工作中并没有用到.&lt;/p&gt;
&lt;p&gt;战线太长, 好处就是, 可能视野广了许多, 对很多事情有了新的看法, 也逐渐能归纳得到一些共性.&lt;/p&gt;
&lt;p&gt;缺点嘛, 很明显, 太耗费时间, 而且中间绝大多数成了沉没成本. 学了忘忘了学, 重复太多.&lt;/p&gt;
&lt;p&gt;其实最佳的策略应该是, 从日常工作入手, 工作中接触的各种事情, 遇到的各种问题, 涉及的各种技术栈, 以点带面, 深挖和发散, 这就会占用掉大部分时间和经历了, 而事实也证明, 目前自己受益最大的,  反而是这些东西.&lt;/p&gt;
&lt;p&gt;至于其他, 自己感兴趣, 去学, 去用.&lt;/p&gt;
&lt;p&gt;不要为了学而学, 学以致用.&lt;/p&gt;
&lt;h3 id="_3"&gt;收集资料没什么用, 善用搜索, 另外, 记得踩过的坑, 以及, 深挖和扩展&lt;/h3&gt;
&lt;p&gt;刚毕业那会, 硬盘上收集了很多java的资料. 后来, 右键删了&amp;gt;_&amp;lt;&lt;/p&gt;
&lt;p&gt;刷了几年微博, 收藏了很多东西, 估计有几千条, 然而, 再也没去看过.&lt;/p&gt;
&lt;p&gt;买了很多书, 最终却发现, 只看了一半多点.&lt;/p&gt;
&lt;p&gt;现在网络那么发达, 资源过载的年代, 其实资源永远触手可及, 并不需要花时间去下载/分类/储存.&lt;/p&gt;
&lt;p&gt;而很多人, 往往会将&lt;code&gt;整理&lt;/code&gt;作为主业, 而不是学习和吸收. 花了大量时间&lt;code&gt;整理&lt;/code&gt;得到一套看似庞大的东西.&lt;/p&gt;
&lt;p&gt;其实我在想, 看大家很多&lt;code&gt;mark&lt;/code&gt;, 不知道有多少人会再去看过.&lt;/p&gt;
&lt;p&gt;知识管理, 分级, 自己积累沉淀得到的东西, 一级, 工作涉及的东西, 二级, 相关领域自己感兴趣的东西, 三级, 杂七杂八八卦等等, 四级.&lt;/p&gt;
&lt;p&gt;完全可以用wiki/evernote/pocket等工具, 自行分级&lt;/p&gt;
&lt;p&gt;重要的是, 搜索, 用到的时候, 可以在最短的时间内汇集, 掌握和使用.&lt;/p&gt;
&lt;p&gt;分级+搜索&lt;/p&gt;
&lt;h3 id="_4"&gt;很遗憾, 看很多技术书或许没什么用&lt;/h3&gt;
&lt;p&gt;这些年, 看了很多书, 刚开始都是买技术的, 后来给自己定了个规矩, 买一本技术要对应买一本非技术.&lt;/p&gt;
&lt;p&gt;后来的后来, 开始用kindle, 然后发现看技术书还是duokan来得舒服, 毕竟用pad看大一些:)&lt;/p&gt;
&lt;p&gt;市面上绝大多数, 90%, 可以算是入门书籍, 剩下7%, 算是进阶, 然后, 3%才是经典.&lt;/p&gt;
&lt;p&gt;然而 ,很多时候, 作为初学者, 看&lt;code&gt;经典&lt;/code&gt;一般是自虐的过程, 大多数需要从一本好的&lt;code&gt;入门&lt;/code&gt;书开始.&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;入门&lt;/code&gt;, 需要自己挑选, 数量庞大, 有点类似&lt;code&gt;快销品&lt;/code&gt;, 读完入门了, 再也不会看第二遍.&lt;/p&gt;
&lt;p&gt;所以后来我的原则变成了, 经典书, 买纸质, 反复读, 而其他的, 通过文档+电子书的形式, 快速学习入门.&lt;/p&gt;
&lt;p&gt;看书, 得到一些东西, 想法, 观点等等, 记录, 便够了.&lt;/p&gt;
&lt;p&gt;虽然很多书没什么用 ,但是, 你总得找到, 并读完那些&lt;code&gt;有用的&lt;/code&gt;书&lt;/p&gt;
&lt;p&gt;数量的多少, 并没有什么用. 例如所谓的成功学的书籍, 一目十行一本书刷完花不了多久&lt;/p&gt;
&lt;p&gt;但是一本书, 只要能学到一点, 那便是好的.&lt;/p&gt;
&lt;p&gt;有人不买书, 说是买了大部分也没读, 我的观点是, 你不买, 一年到头一本书也没读, 但是你买书, 假设买了十本, 只读了两本, 那也比没读好吧.&lt;/p&gt;
&lt;p&gt;另外, 买书要谨慎筛选, 花时间去甄别, 然后, 读书要快, 趁着热情还在秒掉, 最后, 要做笔记, 哪怕只是摘录(后续重读你会感谢自己的摘录和笔记的)&lt;/p&gt;
&lt;h3 id="_5"&gt;学会如何分析问题, 解决问题&lt;/h3&gt;
&lt;p&gt;工作这些年, 其实发现, 很多东西是通的.&lt;/p&gt;
&lt;p&gt;例如, 学一门语言, 深入下去, 再深入下去, 切另一门的时候, 发现其实有很多共性, 比什么都是皮毛好多了.&lt;/p&gt;
&lt;p&gt;所以, 没必要纠结自己什么东西还不会.&lt;/p&gt;
&lt;p&gt;而这些年, 最大的感受是, 写代码, 无非是分析问题, 解决问题.&lt;/p&gt;
&lt;p&gt;而我们要做的, 就是学会这些, 从书本, 从他人, 从自己的经验中去学习, 掌握&lt;/p&gt;
&lt;h3 id="_6"&gt;学会从一点一滴开始,  优化自己的生活&lt;/h3&gt;
&lt;p&gt;不管是工作, 生活&lt;/p&gt;
&lt;p&gt;例如, 学习 GTD, 学习番茄时间工作法, 学习某个工具的使用&lt;/p&gt;
&lt;p&gt;学会怎么快速搜索, 从很多同类 app 中挑选适合自己的&lt;/p&gt;
&lt;p&gt;定制自己的环境, 符合自己操作习惯的东西&lt;/p&gt;
&lt;p&gt;每次, 发现重复或者比较繁琐蛋疼的事情发生了, 记录下来, 如果可以花点时间一劳永逸, 那花这些时间是值得的. 至于解决方案, 会google就能解决绝大多数的问题.&lt;/p&gt;
&lt;h3 id="_7"&gt;极简的生活&lt;/h3&gt;
&lt;p&gt;每个人有自己的选择, 不过我还是倾向于活得简单些.&lt;/p&gt;
&lt;p&gt;天生喜欢逻辑, 不喜欢复杂的不可量化的东西. 所以所谓的&lt;code&gt;情商&lt;/code&gt;方面 , 低了一些.&lt;/p&gt;
&lt;p&gt;生活是自己的, 过成自己想要过的样子便好. 不活在别人的看法里, 不活在别人的嘴里.&lt;/p&gt;
&lt;p&gt;自己快乐, 才是真的快乐不是么?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;极简&lt;/code&gt;主义, 虽然还做不到&lt;code&gt;不以物喜不以己悲&lt;/code&gt;的境界, 但是, 简简单单的生活, 带来的是简简单单的快乐.&lt;/p&gt;
&lt;h3 id="_8"&gt;写日记吧&lt;/h3&gt;
&lt;p&gt;度过了很闲很闲的三个月&lt;/p&gt;
&lt;p&gt;也度过了很忙很忙的三周&lt;/p&gt;
&lt;p&gt;发现, 人的记忆, 并不是很靠谱, 曾几何时我能记得过去一周或者一个月, 每天都怎么过的, 而现在, 却发现, 有时候都想不起来昨天怎么过的&lt;/p&gt;
&lt;p&gt;或许老了吧, 但是主要问题还是, 这个世界熟悉之后, 我们的生活成了"日常", 每天过得模式化了, 太过相似, 以至于很难记录.&lt;/p&gt;
&lt;p&gt;所以, 写日记吧, 电子或者纸笔, 即使是流水账也好, 否则过往的时光, 很容易被压缩成一小段重复的记忆.&lt;/p&gt;
&lt;p&gt;其实, 每天都是新的一天, 善于发现各种细节, 行走得慢些, 多看看, 多想想.&lt;/p&gt;
&lt;p&gt;日记里,写写流水, 吐吐槽, 反思反思, 定期翻一翻.&lt;/p&gt;
&lt;p&gt;现在, 即使回来再累, 也要睡前花点时间写写:), 已坚持快两个月了&lt;/p&gt;
&lt;h3 id="_9"&gt;定期总结&lt;/h3&gt;
&lt;p&gt;这个还是很重要的, 可以暴露很多问题, 例如自己是不是跑偏了......&lt;/p&gt;
&lt;p&gt;按自己的习惯, 写写总结, 算是一种回顾, 也是对未来的一些计划.&lt;/p&gt;
&lt;h3 id="_10"&gt;活在当下&lt;/h3&gt;
&lt;p&gt;不为过去而懊悔, 不为未来而担忧&lt;/p&gt;
&lt;p&gt;昨天已经过去, 时间已经流逝, 懊悔昨天没有什么作用, 想一想, 写写总结, 记录下哪些后面可以避免或者搞定, 然后去睡觉&lt;/p&gt;
&lt;p&gt;未来的事情, 来了再说, 在这之前, 准备好就行, 再多的焦虑也是无用, 担忧得睡不着对明天一点作用都没有&lt;/p&gt;
&lt;p&gt;快乐也是一天, 不快乐也是一天, 那就快快乐乐的呗&lt;/p&gt;
&lt;p&gt;每天过得充实, 每天学到一些东西, 感受到一些东西, 有所进步, 就够了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不乱于心, 不困于情, 不念过去, 不畏将来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果发现自己得了&lt;code&gt;晚睡症&lt;/code&gt;, 那就要反思下了, 自己为什么不能让这一天结束而非要拖到第二天呢?&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;2015-11-08 于深圳&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 08 Nov 2015 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2015-11-08:posts/2015/11/08/summary-13-some-points.html</guid><category>总结</category></item><item><title>我为什么要写博客</title><link>http://www.wklken.me/posts/2015/09/26/why-i-keep-blogging.html</link><description>&lt;p&gt;从七月中旬, 到八月底, 彻彻底底休息了一个半月, 九月初开始找工作, 目测国庆节后才能完成入职开始干活.&lt;/p&gt;
&lt;p&gt;周期略长, 主要节点不好, 哎&lt;/p&gt;
&lt;p&gt;最近在想一个问题, 我为什么要写博客?&lt;/p&gt;
&lt;p&gt;开始写博客, 是在大学期间吧, 当时用的是新浪博客, 写了很多杂七杂八生活的点点滴滴, 临毕业前, 应该是刚从北京实习回学校, 2011年的4月1日(没错是愚人节), 注册了CSDN, 开始了写技术博客&lt;/p&gt;
&lt;p&gt;13年7月从 CSDN 迁移走, 到了独立博客, 主要是那时候CSDN不支持markdown, 而且感觉自己维护一个更为便利些, 便买了主机, 申请了域名, 开始了独立博客的时光.&lt;/p&gt;
&lt;p&gt;到现在, 也有两年了吧.&lt;/p&gt;
&lt;p&gt;现在博客, 每个月UV大概1W的样子. 没有任何推广渠道, 全靠用户回访以及搜索引擎带来的流量.&lt;/p&gt;
&lt;p&gt;&lt;img alt="blog_stats" src="/imgs/blabla/blog_stats.png"/&gt;&lt;/p&gt;
&lt;p&gt;偶尔隔一阵, 便会收到一份donation, 虽不多, 但是每次都会觉得很开心, 就像是隔一阵的惊喜, 也算是给自己的坚持注入了一些动力, 再次感谢各位:)&lt;/p&gt;
&lt;p&gt;回去看了下CSDN, 访问接近90W 次, 排名834......已经放弃维护好久了(两年多了), CSDN 留下了我那一两年青葱的时光.&lt;/p&gt;
&lt;p&gt;很快, 工作四年多了, 时间是把杀猪刀, 改变了很多东西.&lt;/p&gt;
&lt;p&gt;工作四年, 经历了三家公司, 不幸的是后面两家夭折了, 庆幸的是, 做了很多事情, 认识了很多朋友.&lt;/p&gt;
&lt;p&gt;做的事情多, 杂, 也接触了很多东西, 感觉遗憾的是没能完完整整地经历一个公司的发展, 或者一套系统的进化过程.&lt;/p&gt;
&lt;p&gt;四年, 改变了很多, 唯独没变的, 是偶尔会更新下博客, 输出一些东西, 吐吐槽神马的.&lt;/p&gt;
&lt;p&gt;写博客的目的, 对我来说, 不外乎如是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;活得越久, 越发现记忆的不靠谱.&lt;/p&gt;
&lt;p&gt;很难会到过去某一刻, 某个时期的所思所想, 当时的心境, 当时的境遇.&lt;/p&gt;
&lt;p&gt;所以, 记录, 写一写小结, 阶段性看看, 过去&lt;code&gt;无知&lt;/code&gt;/&lt;code&gt;青葱&lt;/code&gt;的自己, 也是必须的.&lt;/p&gt;
&lt;p&gt;当然, 更有效的做法是, 每天坚持写写日记&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分享&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有一些坑, 自己踩过就好......&lt;/p&gt;
&lt;p&gt;而有一些观点, 可以发出来一起看看, 或多或少得到一些感受&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;梳理思路&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我主要的知识管理工具是gollum, 以及evernote作为辅助, 在工作以及学习的过程中, 会碰到某个问题的方方面面, 各种细节, 散而且乱, 分布在不同地方, 而发个博客出来, 主要是可以花一两个小时, 对某块进行汇总, 然后重新梳理, 得到一个较为完整的内容, 顺手从笔记中清掉.&lt;/p&gt;
&lt;p&gt;总之, 类似于一个精粹的过程.&lt;/p&gt;
&lt;p&gt;还有, 例如在读python源码的时候, 读源码, 做笔记, 写注释, 同时还要参考书籍和文档, 往往当时读懂了, 觉得很清晰, 但是过阵子再回去看下, 面对一堆杂乱无从下手, 而出博文的过程, 会顺着思路走, 绘制一些结构图流程图, 再回头看的时候, 往往几分钟就能全盘了然&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搜索&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;gollum和evernote的搜索其实做的都还不错, 但是有时候搜一个点, 得到不止一篇的结果, 往往要点好多次才能找到, 而发博文后, 顺手笔记中清掉, 此时在脑中已经有个印象, 某个点我详细写过什么东西, 那么剩下的只是一键打开博客, 找到那篇文章即可.&lt;/p&gt;
&lt;p&gt;另一个好处是, gollum和evernote是本地的, 在别人电脑上处理问题的时候, 博客反正到哪都能访问到&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;写博的过程, 更多的是自己记录, 思考, 成长的过程, 坚持下来, 感觉还是收获颇多.&lt;/p&gt;
&lt;p&gt;明确目的, 不要把这个写博客的日常变成功利, 其实这次找工作的过程发现, 写博客或许加分了, 但是就是过简历那个环节而已, 太过功利会没必要, 花费大量时间并不值得. 更多的是, 做事情, 把事情做好, 然后得到一些积累和感悟, 而不是反之. &lt;/p&gt;
&lt;p&gt;PS:  其实github开源也是一样, 做自己感兴趣的事情, 而不是去为了开源而开源&lt;/p&gt;
&lt;p&gt;后续, 会主要关注两方面, 一块是偏底层的东西, 构建基础的知识体系, 另一块是做业务/项目过程中的总结.&lt;/p&gt;
&lt;p&gt;编码不易, 且行且珍惜, 共勉&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2015-09-26 于深圳&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 26 Sep 2015 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2015-09-26:posts/2015/09/26/why-i-keep-blogging.html</guid><category>blabla</category></item><item><title>"活动"设计的一些trick</title><link>http://www.wklken.me/posts/2015/08/28/tricks-about-promotion-codes.html</link><description>&lt;p&gt;在梳理过去做过的项目&lt;/p&gt;
&lt;p&gt;之前做项目的时候, 十个月期间做了不少活动, 类型比较多, 有推广/抽奖/小游戏等等.&lt;/p&gt;
&lt;p&gt;有些活动需求明确一气呵成, 也有些活动需求模糊一度推倒重来, 还有的活动被刷了&amp;gt;&lt;em&gt;&amp;lt;#&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;好吧, 来说说活动&lt;/p&gt;
&lt;p&gt;一些想法, 可以是技术, 非技术&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="_1"&gt;目的&lt;/h3&gt;
&lt;p&gt;活动的目的是什么? 有没有存在的意义?&lt;/p&gt;
&lt;p&gt;存在由于没有想清楚, 耗费人力物力搞了结果不尽人意......所以目的应该先想清楚, 并且明学下来&lt;/p&gt;
&lt;h3 id="_2"&gt;活动开发简要流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;需求分析: 整体流程, 用户侧细节, 管理侧需求, 统计需求等等, 对整个流程达成一致, 对每个环节的条件/处理逻辑/后续出口等等明确下来, 对一些资质/数字限制等确定下来&lt;/li&gt;
&lt;li&gt;设计出图/后端建模-逻辑代码-API/前端开发&lt;/li&gt;
&lt;li&gt;测试环境上线&lt;/li&gt;
&lt;li&gt;内部测试, 试玩, 针对活动本身给意见. 测试人员测试, 针对逻辑本身, 同时进行网速测试(2g/3g/wifi) / 浏览器测试 / 不同手机-系统测试&lt;/li&gt;
&lt;li&gt;修正迭代, 测试&lt;/li&gt;
&lt;li&gt;正式上线&lt;/li&gt;
&lt;li&gt;管理侧/统计侧上线&lt;/li&gt;
&lt;li&gt;推广/监控&lt;/li&gt;
&lt;li&gt;活动结束&lt;/li&gt;
&lt;li&gt;奖品派发/数据统计等&lt;/li&gt;
&lt;li&gt;活动下线&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="quick-and-maybe-dirty"&gt;quick and maybe dirty&lt;/h3&gt;
&lt;p&gt;由于&lt;code&gt;活动&lt;/code&gt;本身的性质, 这类代码逻辑属于&lt;code&gt;短平快&lt;/code&gt;一类的.&lt;/p&gt;
&lt;p&gt;简而言之: 怎么快怎么来&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以不要考虑复用&lt;/li&gt;
&lt;li&gt;当然, 有些代码是复用的, 例如CRUD/get some list/check permission/call base service等等&lt;/li&gt;
&lt;li&gt;不要考虑将来/以后, 很多活动上了就下了, 不会有所谓的&lt;code&gt;将来&lt;/code&gt;, 切忌过渡设计, 空耗费许多精力没有必要&lt;/li&gt;
&lt;li&gt;要快&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_3"&gt;注意代码/数据/部署隔离&lt;/h3&gt;
&lt;p&gt;前面说过, 很多活动逻辑没有将来&lt;/p&gt;
&lt;p&gt;所以, 活动的代码尽量独立, 保证随写随测, 随上随下, 尽量隔离于主体代码之外, 这样上下线也方便&lt;/p&gt;
&lt;p&gt;当然, 不可能完全独立, 依赖外部尽量使用独立的服务接口, 被外部依赖提供也尽量通过提供接口解决(情况很少)&lt;/p&gt;
&lt;p&gt;数据独立, 包括, 数据库实例/redis or memcached/文件等, 活动需要记录一些数据, 和主体业务独立开来, 尽量不共用, 有条件的话单独提供实例&lt;/p&gt;
&lt;p&gt;部署隔离, 尽量不要和关键服务在同一台机器或者共用带宽, 由于&lt;code&gt;活动&lt;/code&gt;本身的特质, 可能带来突发的流量, 可能导致带宽/IO/缓存占用/机器负载等变高, 会影响到其他服务.(可以给定独立url, 通过反代定到活动服务)&lt;/p&gt;
&lt;h3 id="_4"&gt;开发注意&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;做好缓存&lt;/li&gt;
&lt;li&gt;每个接口做好资质/权限控制, 这类逻辑放在api代码的前面(判断条件放到最前面), fail fast, 验证通过后才进入主体逻辑代码&lt;/li&gt;
&lt;li&gt;友好的异常处理/用户提示&lt;/li&gt;
&lt;li&gt;后端需要考虑&lt;code&gt;防刷&lt;/code&gt;, 前端需要处理下&lt;code&gt;重复提交&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;做好事务控制(并发), 特别是涉及数字增减的情况, 例如奖品数&lt;/li&gt;
&lt;li&gt;涉及步骤的活动, 做好流程限制, 第一步-第二步-第三步......, 防止用户跳过某一步直接进入下一步.(可以通过签加密token的方式)&lt;/li&gt;
&lt;li&gt;图片, 尽量放到 CDN (血的教训, 前端一张背景图导致带宽被跑满, 后续用户进不来)&lt;/li&gt;
&lt;li&gt;需要有一套成熟的统计系统, 活动数据直接发送到统计系统, 由统计系统统一出数据&lt;/li&gt;
&lt;li&gt;对于关键性的步骤/数据, 可以记日志&lt;/li&gt;
&lt;li&gt;有必要的话, 做成一期一期的, 有开始结束时间, 自动切换(有些复杂的活动)&lt;/li&gt;
&lt;li&gt;有必要的话, (传说中的开关)提供方便的配置或者入口, 可以一键上下线活动/奖品(valid/invalid/shutdown)&lt;/li&gt;
&lt;li&gt;对于关键性的代码, 做好注释, 例如一些限制逻辑/数量等等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_5"&gt;学会打时间差&lt;/h3&gt;
&lt;p&gt;很多活动, 可能是热点? 节日? 等等, 时效性比较强的.&lt;/p&gt;
&lt;p&gt;然而, 当活动逻辑很复杂的时候, 又要在规定时间内上线, 这时候可以仔细切分需求,  分不同时间上线.&lt;/p&gt;
&lt;p&gt;例如, 一个玩游戏/抽奖/兑奖的活动, 可能分为两部分, 用户侧和管理侧, 用户侧逻辑&lt;code&gt;玩游戏/兑奖/查看是否获奖&lt;/code&gt;, 管理侧&lt;code&gt;查看获奖情况/颁奖/新增用户统计/渠道统计/流量统计&lt;/code&gt;等等&lt;/p&gt;
&lt;p&gt;那么, 可以先保证用户侧完成, 同时加入向统计系统发送统计数据的接口, 然后上线, 保证用户侧主体流程. 上线后开始开发管理侧, 管理侧可以按照运营优先级处理, 例如要查看实时统计信息的话, 先做统计, 保证推广效果, 获奖及颁奖可以稍稍押后, 作为第三阶段上线(如果活动兑奖都是在一个周期结束的话)&lt;/p&gt;
&lt;p&gt;例如, 要发奖数据, 如果没有管理后台, 直接库里导一份出来就是了. 其实这时候应该思考, 要不要花力气做管理后台, 大不了活动结束手工操作一下, 十分钟.&lt;/p&gt;
&lt;h3 id="_6"&gt;下线&lt;/h3&gt;
&lt;p&gt;额, 活动做完, 要下线了.&lt;/p&gt;
&lt;p&gt;如果程序是带日期限制的, 到点了自动结束, 提示用户活动结束, 活动流程无法走下去.&lt;/p&gt;
&lt;p&gt;如果需要人肉, 直接将外网入口去掉即可.&lt;/p&gt;
&lt;p&gt;然后, 可以考虑后续了&lt;/p&gt;
&lt;p&gt;首先, 要确认, 该记录的统计数据记录了, 该分析的分析了, 该发奖的也发奖了......&lt;/p&gt;
&lt;p&gt;首先, 备份代码到活动代码仓库(供后续参考/复用, 防止雷同逻辑/代码要重写), 然后从代码库删除.&lt;/p&gt;
&lt;p&gt;线上, 备份数据到备份服务器, 包括数据库数据/日志/文件等等, 如果缓存中有需要dump的, dump出来. 然后下线数据库, 清空缓存, 日志等&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;活动, 很大程度上是一堆&lt;code&gt;临时&lt;/code&gt;而&lt;code&gt;无用&lt;/code&gt;并且&lt;code&gt;没有技术含量&lt;/code&gt;, 而且非常&lt;code&gt;短命&lt;/code&gt;的代码组成的, 做多了容易烦躁, 最好一个项目组里轮流处理, 当然有人认领更好. &lt;/p&gt;
&lt;p&gt;活动成不成功, 决定因素很多, 但无论如何, 下线前做好review, 防止重复犯错&lt;/p&gt;
&lt;p&gt;就这些&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2015-08-28&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Fri, 28 Aug 2015 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2015-08-28:posts/2015/08/28/tricks-about-promotion-codes.html</guid><category>blabla</category></item><item><title>一些简单的Python测试题</title><link>http://www.wklken.me/posts/2015/08/26/python-some-test-questions.html</link><description>&lt;p&gt;一些简单的测试题, 主要来源是网上:)&lt;/p&gt;
&lt;p&gt;某种程度, 可以从代码中看出一些东西&lt;/p&gt;
&lt;hr/&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编写代码, 打印1-1亿之内的偶数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写一个函数, 用正则表达式清除字符串中[]和其中的内容。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"[lol]你好，帮我把这些markup清掉，[smile]。谢谢！"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;请使用python, 对下面的函数进行处理,&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"hello, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在函数被调用时打印耗时详情&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tom&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;timecosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.81469726562e-06&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;写一个函数, 将驼峰命名法字符串转成下划线命名字符串(需考虑各类编码中常见的命名)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;GetItem&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;get_item&lt;/span&gt;
      &lt;span class="n"&gt;getItem&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;get_item&lt;/span&gt;
      &lt;span class="n"&gt;doIT&lt;/span&gt;    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;do_IT&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;有一个列表：[1, 2, 3, 4...n]，n=20；请编写代码打印如下规律的输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;写一个程序模拟银行排队, 只有一个队伍, 一个用户进入时允许插队(进入队伍任意位置), 但要保证每次导致队伍变更, 队伍中受影响的人都收到通知&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Customer&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Customer&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="n"&gt;changed&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
&lt;span class="n"&gt;Customer&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="n"&gt;changed&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;
&lt;span class="n"&gt;Customer&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="n"&gt;changed&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用户系统, 存在相互关注的动作, 当进入某个人的个人主页, 需要展示其粉丝数, 关注数, 粉丝列表以及关注列表. 请简要描述解决方案, 包括db建模/数据层/业务层, 以及应对高并发/关注取关等情况的处理逻辑&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;给定一些NxN的矩阵，对于任意的路线，定义其【和】为其线路上所有节点的数字的和，计算从左上角到右下角的路线和最小值。每条路线只能从某一点到其周围（上下左右）的点，不可斜行。&lt;br/&gt;
例如，&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="err"&gt;的路线和最小值为&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="err"&gt;的路线和最小值为&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;程序只需输出最小和值即可（一个数字）&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 26 Aug 2015 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2015-08-26:posts/2015/08/26/python-some-test-questions.html</guid><category>python</category></item><item><title>Review and Restart</title><link>http://www.wklken.me/posts/2015/07/24/summary-12-review-and-restart.html</link><description>&lt;p&gt;7月4日,  想着正式工作四年了&lt;br/&gt;
7月9日, 公司这边出了点状况, 歇业, 也从公司离职了&lt;br/&gt;
7月10日, 衡山溜达了一圈&lt;br/&gt;
7月19日, 想着正好加入甜品十一个月了&lt;br/&gt;
7月18日, 生日&lt;/p&gt;
&lt;p&gt;去年的七月,  也刚好离职, 正在一路北上的旅途中. 情况似曾相识.&lt;/p&gt;
&lt;p&gt;&lt;img alt="coding-life" src="/imgs/life/road.jpg"/&gt;&lt;/p&gt;
&lt;h2 id="review"&gt;Review&lt;/h2&gt;
&lt;p&gt;一些工作上的review&lt;/p&gt;
&lt;h4 id="1-and-fail-fast"&gt;1.  凡事有结果 and Fail-fast(快速失败)&lt;/h4&gt;
&lt;p&gt;作为工程师, 似乎很容易陷入, 将做项目, 变成完成任务.&lt;/p&gt;
&lt;p&gt;前置是需求, 有产品帮cover, 但是项目的后置, 是结果, 更多的是依赖自己.&lt;/p&gt;
&lt;p&gt;需求分析后, 系统设计之初, 就应该考虑: 日志/统计, 考虑如何去衡量"结果".&lt;/p&gt;
&lt;p&gt;项目上线后, 要跟!!! 分析及反馈数据, 让更多人了解现状, 以便后续决策.&lt;/p&gt;
&lt;p&gt;做事如果没有结果, 会导致可能错误的不断投入精力处理一些不重要的事情, 甚至根本不需要做, 沉没成本&lt;/p&gt;
&lt;p&gt;事情做了, 要有一个结果, 好/不好/不好不坏, 无论如何, 自己都要有所感知. 关乎成就感.&lt;/p&gt;
&lt;p&gt;如果不好, 就快速失败, 砍掉或者修正, 总之, 不要往错误的方向越走越远.&lt;/p&gt;
&lt;p&gt;当然, 这涉及和上下游多沟通交流.&lt;/p&gt;
&lt;p&gt;所以, 建议无论产品或者研发, 做完一个项目, 都要有相应的review, 总结并通报相关人员.&lt;/p&gt;
&lt;h4 id="2"&gt;2. 人&lt;/h4&gt;
&lt;p&gt;人员构成很重要, 要互补,  必要的时候能"千斤顶"&lt;/p&gt;
&lt;p&gt;做事多向前走一步,  不要老是停留在自己的"舒适区"/"自留地", 多走一步, 更高效协作&lt;/p&gt;
&lt;p&gt;找准节奏, 快速度过磨合期&lt;/p&gt;
&lt;p&gt;不要因为一时繁忙, 因为忙不过来而找人, 痛上一痛再做决定&lt;/p&gt;
&lt;p&gt;不要给人找事做!!!!!(一时事太多=&amp;gt; 招人 =&amp;gt; 没事干 =&amp;gt; 找事干......)&lt;/p&gt;
&lt;p&gt;各司其职, 信任伙伴, 不要大跨界或者插手太多, 无谓耗费自己的精力, 你的精力可以在自己擅长的地方发挥更大的作用&lt;/p&gt;
&lt;h4 id="3-scrum"&gt;3. Scrum &amp;amp; 看板 &amp;amp; 项目制&lt;/h4&gt;
&lt;p&gt;没有万能药, 可以实施, 试试, 阵痛, 改进, 最终摸索到适合团队的&lt;/p&gt;
&lt;p&gt;一个Sprint只集中精力处理有限的目标. 不要分散了精力.&lt;/p&gt;
&lt;p&gt;Sprint, 是用来实现需求的, 而不是用来砍需求的!!!&lt;/p&gt;
&lt;p&gt;看板, 从整体一个大看板, 到最终根据业务线逐步拆分, 整个过程用起来感觉很有效.&lt;/p&gt;
&lt;p&gt;项目制, 可以先找小的项目试验, 核心成员参与, 先run起来, 成功了再扩大范围. 很多东西不能操之过急.&lt;/p&gt;
&lt;h4 id="4"&gt;4. 工具&lt;/h4&gt;
&lt;p&gt;用好用的工具, 用好工具&lt;/p&gt;
&lt;p&gt;mac/邮件/jira/stash/confluence等等,  整个团队达成一致, 高效协作&lt;/p&gt;
&lt;p&gt;使用工具的整个过程中, 也势必遇到的各种问题, 例如团队规模的扩大, 业务线增多, 跟上游产品的协作, 配合sprint等等, 这都需要在不同阶段进行调整, 对工作流进行优化, 形成一些约定. 以提高协作效率为第一目标&lt;/p&gt;
&lt;p&gt;工具能买就买, 找个工程师花几个人日搭开源的, 以及后续维护, 还不一定好用(这都是隐性的成本), 还不如花钱搞定, 况且如今各类工具成本已经非常低廉了:)&lt;/p&gt;
&lt;h4 id="5-work"&gt;5. 快 以及 一切从简work就行&lt;/h4&gt;
&lt;p&gt;快速实现, 快速验证.&lt;/p&gt;
&lt;p&gt;不要一开始就妄图设计一个完美的系统: 需求会改/项目会砍&lt;/p&gt;
&lt;p&gt;一开始不要想得太过复杂, 基本流程ok, 上线, 迭代上线完善的功能, 不要一开始就花大力气想直接搞定, 因为这里面很多成本其实是不必要的, 搞不好你花了一周赶完, 上了发现根本毫无用处.&lt;/p&gt;
&lt;p&gt;当人肉顶不住的时候, 再考虑做系统. 理由同上, 费劲搞了系统, 结果要么业务没上来, 没达到"人肉"顶不住的情况, 要么就是业务废弃了/砍掉了. 搞系统耗时耗力不一定有用.&lt;/p&gt;
&lt;h4 id="6"&gt;6. 不忘初心&lt;/h4&gt;
&lt;p&gt;很多时候, 无论是产品, 还是研发, 都会忘了最初出发的目的是什么.&lt;/p&gt;
&lt;p&gt;产品被一大堆细节淹没, 而研发将大目标切碎逐步做的过程中, 很那有整体的概念.&lt;/p&gt;
&lt;p&gt;可以尝试, 可以变换, 但是要明确, 所有人都明确.&lt;/p&gt;
&lt;p&gt;一切, 轻重缓急, 排期, 以目标为导向&lt;/p&gt;
&lt;p&gt;目标导向, 但同一个时刻, 不要有太多的目标, 不要一个目标未完就想在此基础上尝试新的目标.(精力分散/事情没做透)&lt;/p&gt;
&lt;h4 id="7"&gt;7. 理想主义&lt;/h4&gt;
&lt;p&gt;不要太过理想主义&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;这十个月, 经历了很多, 团队由小到大, 项目由1到28, 从0到1, 造了很多轮子, 经历了整个团队协作方式的变更, 经历了磨合的阵痛, 经历了一轮又一轮的sprint, 经历了第一版上线, 到最后第80个安装包, 经历了一次次上线, 一个个活动, 看着后台用户数一点点涨起来, 看着全部api调用一点点涨起来, 然后掉下去&amp;gt;_&amp;lt;#(这似乎是个悲伤的故事......)&lt;/p&gt;
&lt;p&gt;但是, 这十个月, 从第一天到甜品, 感受到"家"的气息, 到最终收拾离开, 关小黑屋, 晨会, 愉快地coding, 聚餐等等, 十月风雨, 过得很充实, 也学到很多东西, 感谢所有糖厂的银, 帮助及包容. &lt;/p&gt;
&lt;h2 id="restart_1"&gt;Restart&lt;/h2&gt;
&lt;p&gt;闲了一周了, 趁这段时间,  打算做做总结, 重写一些代码, 读完CPython源码及APUE, 还有, 就是学车及休息&lt;/p&gt;
&lt;p&gt;整理整理, 想明白一些东西, 再重新启程.&lt;/p&gt;
&lt;p&gt;希望明天会更好吧&lt;/p&gt;
&lt;p&gt;&lt;code&gt;既然选择了远方, 便只顾风雨兼程&lt;/code&gt;, 共勉&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2015-07-24 于深圳&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Fri, 24 Jul 2015 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2015-07-24:posts/2015/07/24/summary-12-review-and-restart.html</guid><category>总结</category></item><item><title>工作四周年小结</title><link>http://www.wklken.me/posts/2015/07/04/summary-11-work-four-years.html</link><description>&lt;p&gt;一晃, 四年过去了&lt;/p&gt;
&lt;p&gt;每年的7月4日, 都会想到刚毕业入职第一天&lt;/p&gt;
&lt;p&gt;惯例, 写一些东西, 记录过去的这些日子&lt;/p&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;既然选择了远方, 便只顾风雨兼程 -- 汪国真&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近遇到了一些事情, 颇为突然, 也颇为无奈.&lt;/p&gt;
&lt;p&gt;似乎, 也是去年的这阵子, 遭遇了公司的变故, 最终离职, 到北边溜达了一阵. 回来后, 宅了一阵, 花了两天找了工作, 迄今十月有余.&lt;/p&gt;
&lt;p&gt;很多事情很突然, 也就在旦夕之间&lt;/p&gt;
&lt;p&gt;原来没有感觉, 但是回顾, 发现却也是必然的&lt;/p&gt;
&lt;p&gt;十月风雨, 一切美好, 仿佛一场梦&lt;/p&gt;
&lt;p&gt;思考, 总结,  前进&lt;/p&gt;
&lt;p&gt;生活, 总是要继续的.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;既然选择了远方, 便只顾风雨兼程&lt;/code&gt;, 这是我给每个新入职小伙伴的纸条,  祝好, 也送给自己, hold on.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;前进, 前进, 不顾一切地前进 -- 三体&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;似乎, 之前一直秉承这个信念在做一些事情&lt;/p&gt;
&lt;p&gt;回头却发现, 似乎错放了重点&lt;/p&gt;
&lt;p&gt;每个人在每个阶段, 都有不同的需求/追求, 而一直坚持一个信念&lt;/p&gt;
&lt;p&gt;愚蠢!&lt;/p&gt;
&lt;p&gt;我将重点错放了, 有些事情总要去做的, 有些责任总是要要承担的, 有些变迁, 总是要去经历的. 而, 这个信念, 成为了我逃避的理由. 规避了太多不该规避的东西, 最终还剩下什么?&lt;/p&gt;
&lt;p&gt;结果是, 似乎折腾许多, 却也没折腾出什么, 步步前行, 却错失了很多生活中的美好.&lt;/p&gt;
&lt;p&gt;anyway, 需要醒醒, 认真生活了.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于造轮子&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;近期思考的问题, 关于造轮子与创业.&lt;/p&gt;
&lt;p&gt;创业过程, 避免不了去造轮子, 如果顺利, 随着业务发展, 不断完善, 优化, 变革, 最终造一个大轮子:)&lt;/p&gt;
&lt;p&gt;而往往, 事情总不尽人意, 如果业务没发展呢? 假设, 到再次创业, 轮子似乎又得造一遍.&lt;/p&gt;
&lt;p&gt;这个过程, 或许可以造一个更好的轮子, 但是, 独轮车总归还是独轮车, 载不动.&lt;/p&gt;
&lt;p&gt;然后, 如果要造第三遍呢? 呵呵&lt;/p&gt;
&lt;p&gt;业务成就了技术, 这也造成了很多无奈:(&lt;/p&gt;
&lt;p&gt;充电, 毕竟有限, side project, 更多的是玩具, 哎.&lt;/p&gt;
&lt;p&gt;所谓的沉没?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当一切已成往事, 谁还记得, 那些岁月&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;去年的8月, 玩久了, 宅久了, 大体有个方向, 花了些时间看了下公司, 两天面了四个, 然后选了一个, 入职.&lt;/p&gt;
&lt;p&gt;一切很快, 选择的原因呢? 两个因素: 1.做的事情符合价值观, 认同且喜欢 2.人&lt;/p&gt;
&lt;p&gt;角色? 后端开发兼运维打杂, 除了业务系统, 底层服务依赖的开发, 还兼职做运维, 负责环境搭建/部署/自动化等等.&lt;/p&gt;
&lt;p&gt;一路过来, 造了很多轮子, 很多轮子造的第二遍, 重构过几个项目, 做对过一些事情, 做错过一些事情, 对靠谱二字重新定义.&lt;/p&gt;
&lt;p&gt;一路过来, 也对自己有更为多的认识. 性格上的缺陷.&lt;/p&gt;
&lt;p&gt;回顾十月, 感谢很多人, 感谢一起奋斗过的小伙伴.&lt;/p&gt;
&lt;p&gt;很遗憾, 我是个记性很好的人, 例如同一个话题, 谁第几遍重复说起都记得, 哎. 这也造成了, 对很多事情, 难以释怀, 记性太好或许对 INTJ 来说, 是件坏事. &lt;/p&gt;
&lt;p&gt;那些一起战斗的岁月, 或许已成往事, 依然记得.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;四年&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;四年是什么感觉呢?&lt;/p&gt;
&lt;p&gt;感觉老了, 一眼过去, 一片都是90后&lt;/p&gt;
&lt;p&gt;感觉时间匆匆, 不经意间, 一小时, 一天, 一礼拜, 一月, 一年, 就这么没了, 更多的压力, 紧迫感, 更加珍惜时间.&lt;/p&gt;
&lt;p&gt;感觉自己还是弱弱的, 读很多书, 做很多事, 也对自己有更多的认识, 愈发觉得自己的渺小, 能做一些事情, 但是却也有很多无能为力的时候, 唯有努力&lt;/p&gt;
&lt;p&gt;感觉生活中充满了各种不确定, 无论如何都得努力面对, 努力锻炼, 学习, 努力变得更好&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;旦夕, 不确定&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上一刻还在愉快地coding, 下一刻回头发现已沧海桑田&lt;/p&gt;
&lt;p&gt;生活总是充满变化, 充满了无奈, 这就是生活, 这就是现实.&lt;/p&gt;
&lt;p&gt;虽然, &lt;code&gt;拥抱变化&lt;/code&gt;, 但是&lt;code&gt;落差好大&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;then?&lt;/p&gt;
&lt;p&gt;坚持, 努力地去做一些事情吧, 让自己变得更好&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;创业的一些感受&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还在review, 等想明白了再写&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;选择很重要&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然! &lt;/p&gt;
&lt;p&gt;但是没有对与错, 选择了就选择了, 仅此而已&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;迷茫, 是能力和理想不匹配&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不久前在知乎上看到的, 深以为然, 也在思考.&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2015-07-04 于深圳&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 04 Jul 2015 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2015-07-04:posts/2015/07/04/summary-11-work-four-years.html</guid><category>总结</category></item><item><title>关于知识管理工具的思考</title><link>http://www.wklken.me/posts/2015/05/02/about-knowledge-manage-tools.html</link><description>&lt;p&gt;毕业快四年了,  测试一年半, 后端开发两年半, 时间如梭.&lt;/p&gt;
&lt;p&gt;回顾这些年, 笔记什么的, 是一部漫长的&lt;code&gt;迁移&lt;/code&gt;史/血泪史, 如果能早些学习git/markdown等, 能早些了解到一些工具, 应该能省下不少时间吧.&lt;/p&gt;
&lt;p&gt;汇总整理下自己所使用过的知识管理工具&lt;/p&gt;
&lt;p&gt;工具的目标: 提升效率&lt;/p&gt;
&lt;p&gt;而我们的目的很简单&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方便快速收集/记录/整理/沉淀&lt;/li&gt;
&lt;li&gt;快速搜索&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="mywiki" src="/imgs/blabla/mywiki.png"/&gt;&lt;/p&gt;
&lt;h1 id="_1"&gt;手抄笔记&lt;/h1&gt;
&lt;p&gt;大学那段时间&lt;/p&gt;
&lt;p&gt;那时候, 学习&lt;code&gt;linux&lt;/code&gt;, 学习&lt;code&gt;vim&lt;/code&gt;,  学习&lt;code&gt;java/jsp/ssh....&lt;/code&gt;, 学习&lt;code&gt;xml&lt;/code&gt;等等, 大多数情况下, 都是看书+手抄笔记大法, 那时候完全没有意识去对知识进行组织和整理, 几年下来, 积累了各类笔记, 一大堆, 过年回家还发现当时学习java的六七本笔记, 还有oracle, 还有不知道什么时候做的c语言学习笔记(完全忘了).&lt;/p&gt;
&lt;p&gt;手抄, 现在回过头来, 费时费力, 效率极低, 但是就当时环境而言, 不失为一种好的做法(相对于啥都没记来说), &lt;code&gt;好记性不如烂笔头&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;而且, 上课/参加培训等等, 都通过笔记来记录&lt;/p&gt;
&lt;p&gt;手抄的做法, 太过古老, 如果是非技术书籍, 抑或个人喜欢纸质书籍, 不失为一种好的做法. 但是技术书籍, 手抄太过低效, 不易整理, 更不易搜索, 看似积累了很多, 实际沉淀不多.&lt;/p&gt;
&lt;h1 id="word"&gt;word&lt;/h1&gt;
&lt;p&gt;到毕业做测试一年多, 那时大多数情况下是windows系统, 毕业那会刚刚把系统转到ubuntu, 但是工作环境主要还是windows, 用终端连接主机工作.&lt;/p&gt;
&lt;p&gt;正式参加工作, 虽然还经常买纸质书, 但是正儿八经系统啃书的机会相当少, 大部分是工作中碎片化学习的东西, 所以&lt;code&gt;手抄笔记&lt;/code&gt;完全从生活中消失了&lt;/p&gt;
&lt;p&gt;这时候, 开始有意识记录使用电脑记录, 以及整理汇总一些东西.&lt;/p&gt;
&lt;p&gt;这段时间, 系统性整理了linux &amp;amp; shell笔记/vim笔记等, 测试理论, python入门等等.  工作中还是svn, 对git完全没有概念,  更别说markdown了.&lt;/p&gt;
&lt;p&gt;这时候笔记以word形式归总在目录下, 通过金山快盘同步, 后来迁到dropbox了&lt;/p&gt;
&lt;p&gt;那时候evernote/有道笔记还刚刚火起, 对云端没有太多需求, 没怎么关注&lt;/p&gt;
&lt;p&gt;word记录, 相对手抄效率略高, 也方便整理复习, 搜索功能有限.&lt;/p&gt;
&lt;h1 id="-"&gt;有道笔记 - 印象笔记&lt;/h1&gt;
&lt;p&gt;学习markdown了, 也开始玩github, 这时候云笔记开始火了, 刚好, 开始玩微博, 对各种人各种关注, 天天刷微博, 这个习惯延续至今.&lt;/p&gt;
&lt;p&gt;其实用得最多的只有一个功能: 网页剪藏&lt;/p&gt;
&lt;p&gt;每个人都会经历这么一个阶段, 碰到各种资源信息, 疯狂收集, 不管有用没用, 先搞下来再说.&lt;/p&gt;
&lt;p&gt;然后, 发现有3000+剪藏, 微博上2000+收藏, 后来觉得有道不足够靠谱, 丢过笔记,  本着&lt;code&gt;折腾&lt;/code&gt;的信念, 开始迁移笔记, 3000+剪藏只能以尽量高效的方式废弃: &lt;code&gt;当前不涉及不会接触短期内也不会关注的不管好不好以后有没有用全部删掉&lt;/code&gt;, 这样, 完成了自己的折腾史.&lt;/p&gt;
&lt;p&gt;除了剪藏, 最大的功能就是云同步了, 公司电脑和家里电脑同步. 那时候还在用android机, 移动端记录的需求倒是不怎么强烈&lt;/p&gt;
&lt;p&gt;这期间, 明白了&lt;code&gt;资源再多, 无用就是无用&lt;/code&gt;, 心态上改变了, 微博停止了点&lt;code&gt;收藏&lt;/code&gt;, 那2000+收藏, 也就废弃了. 另外, 也开始进行&lt;code&gt;关注&lt;/code&gt;的整理, 获取有效而稳定的信息流.&lt;/p&gt;
&lt;p&gt;PS: 云笔记最坑的是同步, 然后你发现丢了.....还有, 同步, 你发现冲突了, 然后在两份文件里面diff......都经历过, 心塞&lt;/p&gt;
&lt;h1 id="-ulysess"&gt;印象笔记 - Ulysess&lt;/h1&gt;
&lt;p&gt;印象笔记, 用了一段时间, 这时候也换了&lt;code&gt;mac&lt;/code&gt;和&lt;code&gt;iphone&lt;/code&gt;, 以及后来&lt;code&gt;ipad&lt;/code&gt;, 开始随时记录.&lt;/p&gt;
&lt;p&gt;但是用了一段时间, 发现一个问题: 不支持markdown&lt;/p&gt;
&lt;p&gt;后来, 又有一个问题: 代码高亮也不支持&lt;/p&gt;
&lt;p&gt;后来的后来, 发现: 这编辑功能也太渣了吧&lt;/p&gt;
&lt;p&gt;这时候, 刚好博客都迁移到自己站点, 全markdown静态.&lt;/p&gt;
&lt;p&gt;想着技术部分的笔记是否有一个更好的编辑/展现方式.&lt;/p&gt;
&lt;p&gt;也正好, 这时候对mac app有着一股狂热, 虽然现在过去了, 但是当时刚刚使用mac, 感受到了好处, 开始折腾&lt;code&gt;各类工具&lt;/code&gt;, 正好碰上了&lt;code&gt;ulysess&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这时候, 感觉技术笔记迁移到上面会更好, 然后逐步迁移.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;no zuo no die&lt;/code&gt;,  展现不错, 支持markdown, 支持高亮, 对于外貌党来说, 很赞的&lt;code&gt;编辑器&lt;/code&gt;, 是的, 迁完之后, 才想起来, 这货是个编辑器, 不是&lt;code&gt;笔记&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;由于搜索太弱, 不支持多端等等情况, 年前有发生了一次全部笔记给我double了一份, 老天, 几百篇笔记都变成双份了. 我花了一整天时间手工删除重复笔记. (目测可能是icloud的锅)&lt;/p&gt;
&lt;p&gt;死心了, 接着迁移&lt;/p&gt;
&lt;h1 id="wiznote"&gt;WizNote&lt;/h1&gt;
&lt;p&gt;为知笔记, 口碑不错, 试用了几天&lt;/p&gt;
&lt;p&gt;支持markdown, 目测是云笔记系列为数不多能支持这个的.&lt;/p&gt;
&lt;p&gt;然后, 为了&lt;code&gt;弃用&lt;/code&gt; ulysess, 花了点时间迁移完(ulysess作为编辑器还是很赞的, 还在用).&lt;/p&gt;
&lt;p&gt;用着用着, 发现这markdown, 这剪藏, 似乎没有那么&lt;code&gt;理想&lt;/code&gt;, 体验不佳, 用得越多越感觉到&lt;/p&gt;
&lt;p&gt;这时候, 搬了一回家, 发现搬书, 完全是一个自虐的活. 而且很多大部头看过后都不在打开, 很多书被我脱水了也没有阅读价值了......开始转向电子书, 多看&lt;/p&gt;
&lt;p&gt;这时候, 开始思考.......然后, 迁移&lt;/p&gt;
&lt;h1 id="_2"&gt;分级的知识管理&lt;/h1&gt;
&lt;p&gt;后来, 到了现在的情况: 分级, 邮件/evernote/gollum&lt;/p&gt;
&lt;h4 id="1"&gt;1. 收集&lt;/h4&gt;
&lt;p&gt;要求: 方便, 阅读格式ok, 不丢&lt;/p&gt;
&lt;p&gt;选择: Evernote国际版, 有条件上个高级版, 别问我为啥不用印象笔记&lt;/p&gt;
&lt;p&gt;专门建立一个笔记本: Inbox, 对于碰到的感兴趣的东西, 一键剪藏, 或者分享到evernote, 简单直接有效, 这点是所有云笔记中做的最好的&lt;/p&gt;
&lt;p&gt;另外, 支持多看读书笔记同步, 感受到这个世界深深地温暖&lt;/p&gt;
&lt;p&gt;PS: 对于微博的处理, 额, 我现在是这么干的: "分享到-邮件", 给自己发邮件, 然后定期处理:), 很有效.(使用unibox, 同一个发件人的邮件都在一个对话窗口里面, 很好处理 )&lt;/p&gt;
&lt;h4 id="2"&gt;2. 整理&lt;/h4&gt;
&lt;p&gt;要求: 易用, 高效&lt;/p&gt;
&lt;p&gt;选择: evernote, mindnode pro, gollum&lt;/p&gt;
&lt;p&gt;主要是一些点, 标注, 做思维导图&lt;/p&gt;
&lt;p&gt;对于观点/经验等等东西, 可以阅读梳理后, 放置到evernote&lt;/p&gt;
&lt;p&gt;对于技术类/干货类东西, 放evernote&lt;/p&gt;
&lt;h4 id="3"&gt;3. 沉淀&lt;/h4&gt;
&lt;p&gt;要求: 高效&lt;/p&gt;
&lt;p&gt;选择: evernote, gollum&lt;/p&gt;
&lt;p&gt;沉淀是再次提取思考的过程, 还是evernote&lt;/p&gt;
&lt;p&gt;不过, 对于技术类东西, 其实对云同步要求不需要那么高, 所以选择了自建wiki, 写完markdown往目录一扔, 就可以在本地web server上看到, 搜索等等, 是对技术/代码沉淀的最佳工具&lt;/p&gt;
&lt;h4 id="4"&gt;4. 搜索&lt;/h4&gt;
&lt;p&gt;要求: 精准高效&lt;/p&gt;
&lt;p&gt;选择: evernote, gollum&lt;/p&gt;
&lt;p&gt;用一下就知道了&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;这完全是一部&lt;code&gt;折腾&lt;/code&gt;的血泪史, 只有不断经历, 才能进步, 进化, 最终找到适合自己的方式.&lt;/p&gt;
&lt;p&gt;没有最好的方法, 只有最合适的方法, 对工具同理, 所以在整个过程中, 还是建议, 明确自己的需求, 要解决的问题等, 多关注一些东西, 多尝试.&lt;/p&gt;
&lt;p&gt;好了, 就这些:)&lt;/p&gt;
&lt;p&gt;2015-05-02&lt;/p&gt;
&lt;p&gt;wklken 于深圳&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 02 May 2015 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2015-05-02:posts/2015/05/02/about-knowledge-manage-tools.html</guid><category>blabla</category></item><item><title>Linux及Bash笔记</title><link>http://www.wklken.me/posts/2015/01/17/linux-notes.html</link><description>&lt;p&gt;第一次接触, 在大学时期, 但是真正去学习和了解, 大概是在刚毕业那年&lt;/p&gt;
&lt;p&gt;到现在, 三年多, 主后端开发, 工具也就是一个command line加vim, 每天开个终端就开始噼里啪啦干活, 兼职一些简单的部署运维工作&lt;/p&gt;
&lt;p&gt;去年, 是变化和积累的一年, 今年, 希望有些产出&lt;/p&gt;
&lt;p&gt;Linux和bash, 记了很多笔记, 逐一梳理出来&lt;/p&gt;
&lt;p&gt;之前的两篇文章 &lt;a href="http://www.wklken.me/posts/2013/07/04/note-of-linux-shell-scripting-cookbook.html"&gt;LINUX SHELL脚本攻略笔记&lt;/a&gt; 以及 &lt;a href="http://www.wklken.me/posts/2014/01/12/shell-script-base.html"&gt;如何书写SHELL脚本&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;也会一并汇总, 这可能是今年唯一产出的一本笔记了, python源码阅读和python基础笔记, 这两个在本地的gitbook上, 工程量太浩大, 后面以博文的形式慢慢发吧:)&lt;/p&gt;
&lt;p&gt;好了, 放到&lt;code&gt;github&lt;/code&gt;上了, 当前10%的样子, 欢迎 &lt;code&gt;star&lt;/code&gt;以及提&lt;code&gt;pr&lt;/code&gt;, 纠正以及丰富之&lt;/p&gt;
&lt;p&gt;地址: &lt;a href="https://github.com/wklken/linux-notes"&gt;https://github.com/wklken/linux-notes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先这样......后面开始专注码业余项目去了, 博文产出估计会少点, 当然也不会太少&lt;/p&gt;
&lt;p&gt;2015-01-17&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 17 Jan 2015 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2015-01-17:posts/2015/01/17/linux-notes.html</guid><category>linux</category></item><item><title>重读&gt;</title><link>http://www.wklken.me/posts/2014/11/30/pomodoro-technique-illustrated.html</link><description>&lt;p&gt;最近在执行重读计划, 为年后搬家做准备, 一些书读完珍藏/出给需要的人, 减少搬家那一柜子书的困扰....&lt;/p&gt;
&lt;p&gt;重新读了下这本书, 写写&lt;/p&gt;
&lt;p&gt;大概去年的这个时候, 写了篇 &lt;a href="http://www.wklken.me/posts/2013/11/17/the-art-of-procrastination.html"&gt;拖拉一点也无妨的读书笔记&lt;/a&gt;, 需要的可以看下&lt;/p&gt;
&lt;p&gt;&lt;img alt="pomodoro" src="/imgs/books/pomodoro.jpg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;番茄时间工作法, 意在让人们驻足/观察/醒悟, 并在此过程中改进自我&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人们往往容易关注未来, 而不是过去, 匆匆忙忙, 只为了尽快达到目标, 却忽视了对整个过程的review, 停留, 观察, 总结, 改进, 然后再前进, 更快更好地前进.&lt;/p&gt;
&lt;p&gt;编程中有一种学习方式叫做&lt;code&gt;刻意练习&lt;/code&gt;, 而在&amp;lt;&amp;lt;一万小时天才理论&amp;gt;&amp;gt;中提到&lt;code&gt;精深练习&lt;/code&gt;, 要&lt;code&gt;慢&lt;/code&gt;, 要去&lt;code&gt;犯错&lt;/code&gt;, 要去实际&lt;code&gt;体悟&lt;/code&gt;, 要&lt;code&gt;总结&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;GTD 里也有review的环节.&lt;/p&gt;
&lt;p&gt;总之, review很重要, 但常常被忽略(例如说我&amp;hellip;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要完成大量工作, 重点不在完成工作上, 而在于能否集中注意力&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很赞同, 打断是效率杀手.&lt;/p&gt;
&lt;p&gt;如果一天打断太多, 加上会太多, 很可能意味着晚上要花时间补回这段时间. That is not cool!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要想做到专注, 你就得坚决抛开各种杂念&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;什么是番茄工作法? 简单来说, 就是列出你当天要做的事, 设置25分钟闹钟, 然后从第一件事开始.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很简单的做法, 但是实践两年多, 感觉行之有效. 而自己的番茄钟, 也根据任务性质长短不一, 从10分钟到1小时不等, 特别是半夜码代码写东西根本停不下来.&lt;/p&gt;
&lt;p&gt;而对于我这种比较懒散的人来说, 最简单的方式才是最好的方式, 例如每个番茄钟的休息时间, 只要自己感觉精力ok, 可以进入下一步, 就开始. 如果感觉一定要继续下去, 那么继续. 灵活运用, 不要僵化了(但是最开始的时候应该对自己严格些).&lt;/p&gt;
&lt;p&gt;同样, 你没有必要买一个番茄钟(我就买了一个&amp;hellip;现在放厨房里落灰, 原因是滴答滴答的声音太干扰了), 手机/网页/软件, 你可以发现各类好用的东西, 主旨: 能在适时通知你, 不干扰你的工作和思路, 能记录. (我用的是&lt;code&gt;Vitamin-R 2&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;每隔一段时间, 回顾下所有步骤, 看看有没有需要简化或干脆去掉的步骤.&lt;/p&gt;
&lt;p&gt;我是&lt;code&gt;伪GTD&lt;/code&gt;爱好者, 从狂热到降温, 使用一个个工具, 最终确定了&lt;code&gt;things&lt;/code&gt;这个工具(足够轻). 而GTD步骤, 也被简化到了适合我工作场景的情况.&lt;/p&gt;
&lt;p&gt;不要僵化于步骤, 不要狂热于工具, 关注自己, 关注做事, 工具神马的, 够轻够用就好, 适合自己的才是最好的.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一次只做一件事&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人是并行动物, 但不意味着你可以同时干几件事.&lt;/p&gt;
&lt;p&gt;同时并行干几件事, 代价太大, 先不说最坏的情况是都干砸了, 最好的都干成了, 但是你也把自己搞得筋疲力尽.&lt;/p&gt;
&lt;p&gt;不断的中断, 上下文切换, 最终导致了&lt;code&gt;cpu&lt;/code&gt;过载......&lt;/p&gt;
&lt;p&gt;一次只做一件事, 集中精力, 高效搞定, 然后下一件.&lt;/p&gt;
&lt;p&gt;或者, 你可以将&lt;code&gt;想法&lt;/code&gt;挂起后台, 到了你真正去做的时候, &lt;code&gt;想法&lt;/code&gt;已经进化并成熟了很多.(亲测有效)&lt;/p&gt;
&lt;p&gt;so, 不要在&lt;code&gt;一边....一边....&lt;/code&gt;, 或许看起来很忙很努力, 就像&amp;lt;&amp;lt;Rewrok&amp;gt;&amp;gt;中提到的&lt;code&gt;工作狂&lt;/code&gt;, 这是很愚蠢的事情.(能多线doing的天才除外啊)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;为什么要用番茄工作法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;面对复杂, 望而却步&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;无聊琐事, 越拖越久&lt;/li&gt;
&lt;li&gt;小事忙活一天, 大事一件没办&lt;/li&gt;
&lt;li&gt;最后期限, 步步紧逼&lt;/li&gt;
&lt;li&gt;从休息回到工作, 心智调整不过来&lt;/li&gt;
&lt;li&gt;一错再错, 不长记性&lt;/li&gt;
&lt;li&gt;没想到一件事要做这么久&lt;/li&gt;
&lt;li&gt;没想到一件事越做越复杂&lt;/li&gt;
&lt;li&gt;头脑被各种想法占据&lt;/li&gt;
&lt;li&gt;时间都用来学习适应复杂的工作方法了&lt;/li&gt;
&lt;li&gt;只顾低头干活, 忘了抬头看路&lt;/li&gt;
&lt;li&gt;把预估当做承诺            &lt;/li&gt;
&lt;li&gt;牵着不走, 打着倒退&lt;/li&gt;
&lt;li&gt;完美主义, 碍手碍脚&lt;/li&gt;
&lt;li&gt;前怕狼后怕虎, 害怕失败和批评&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;通过执行一套相同的动作和准备程序, 可以使大脑自我调整, 进入执行某类事务的最佳状态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有点&lt;code&gt;迷信&lt;/code&gt;的感觉. 但是, 其实目的仅仅是像书里说的, 通知大脑, 我要开始做什么了, 准备好.&lt;/p&gt;
&lt;p&gt;另一个我觉得, 是为了防止中断, 例如开工前去倒好水, 调整好电脑, IM和邮件通知关掉等等,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;短暂的定期休息, 能够促进融会贯通的能力.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It works.&lt;/p&gt;
&lt;p&gt;每隔25分钟, 常规休息, 4个番茄钟后进行15~30分钟阶段休息&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;心流&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一种精神状态, 创造性的状态.&lt;/p&gt;
&lt;p&gt;明确的目标, 集中, 专注, 自我意识消失, 时间感扭曲, 直接和即时反馈, 能力水平与面对挑战的平衡, 个人控制感, 工作本身的内在奖励, 行为与认知的合一.&lt;/p&gt;
&lt;p&gt;在那种状态下, 效率奇高, 你感觉自己无所不能, 集中专注, 自我意识消失(你不会意识到自己在这种状态下)&lt;/p&gt;
&lt;p&gt;虽然书中提到&lt;code&gt;节奏&lt;/code&gt;一说, 要定时从&lt;code&gt;心流&lt;/code&gt;中跳出规划全局再进入, 但我更倾向于多进入这种状态, 尽可能长地维持, 因为要进入&lt;code&gt;心流&lt;/code&gt;状态, 是很困难的. 如何快速进入也是需要逐渐训练的.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在短时间内对工作方法做反复调整&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;小步快跑, 调整得到&lt;code&gt;正确的姿势&lt;/code&gt;&amp;mdash;论如何优雅地工作&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;番茄时间工作法的阶段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;计划: 从inbox里, 得到一张&lt;code&gt;今日待办&lt;/code&gt;的清单(当天的自我承诺)&lt;/li&gt;
&lt;li&gt;跟踪: 开始番茄钟后, 收集一些过程指标, 比如中断次数&lt;/li&gt;
&lt;li&gt;记录: 一天结束时, 将跟踪数据记录归档&lt;/li&gt;
&lt;li&gt;处理: 对跟踪数据进行分析思考, 得到一些特征和规律&lt;/li&gt;
&lt;li&gt;可视化: 将信息组织起来, 找出改进流程的思路&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上是每天要进行的, 个人感觉太重了, 而且重心在改进, 而不再&lt;code&gt;do&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;前期还没有形成自己节奏的时候, 适用, 中后期, 应该将重心放在&lt;code&gt;do&lt;/code&gt;上, 轻化&lt;code&gt;计划&lt;/code&gt;和&lt;code&gt;跟踪&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;处理外部中断&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果是&lt;code&gt;别人的问题&lt;/code&gt;, 进行分派.&lt;/p&gt;
&lt;p&gt;如果是&lt;code&gt;我的问题&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;邮件/IM过来的, 可视为不紧急, 完成番茄钟后处理&lt;/li&gt;
&lt;li&gt;电话, 一两分钟能done的, 做掉. 不能, 确认紧急程度, 不紧急, 给承诺, add to TODO list, back to work. 紧急的, 到4&lt;/li&gt;
&lt;li&gt;当面, 同2, 确认对方最晚可接受的时间, 如果不紧急, 承诺, 结束对话&lt;/li&gt;
&lt;li&gt;紧急, 给当前工作打断点, 注释或纸笔, 写下当前状态思路, 然后去做紧急的事情.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;书中提到的处理策略: &lt;code&gt;告知(dong something)-协商(when)-计划(todo list)-答复(done)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;怎么区分&lt;code&gt;紧急&lt;/code&gt;, 需要慢慢去学习.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;邮件的处理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果答复时间不超过1分钟, 立即答复&lt;/p&gt;
&lt;p&gt;如果需要分派, 分派&lt;/p&gt;
&lt;p&gt;如果可以委托他人, 委托&lt;/p&gt;
&lt;p&gt;如果需要我处理, 不紧急, 回复处理时间, 记todo list&lt;/p&gt;
&lt;p&gt;如果需要我处理, 紧急?(紧急的事情会用邮件? 一般是&lt;code&gt;伪紧急&lt;/code&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;过度学习&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;达到熟练程度后, 继续学习或者练习的行为.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;持续改善&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一种工作方法, 以改进为目标, 对渐进变化的专注.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;事前预估与时间所花工夫之间经常不一致&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;做预估的方法或能力有待改进&lt;/li&gt;
&lt;li&gt;工作开始后, 又出现新情况, 新问题, 使得环境发生改变.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr/&gt;
&lt;p&gt;最后&lt;/p&gt;
&lt;p&gt;很多时候, 我们的工作倾向于&lt;code&gt;无序&lt;/code&gt;的, 如何将有限的时间分配到无限的工作中, 需要一些技巧, 并且辅助以工具, 不要神化&lt;code&gt;技巧&lt;/code&gt;, 也不要狂热于&lt;code&gt;工具&lt;/code&gt;, 最重要的是人本身, 是完成事情本身, 学习一些方法(番茄/GTD), 应用, 思考, 改进, 这就够了:)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 30 Nov 2014 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2014-11-30:posts/2014/11/30/pomodoro-technique-illustrated.html</guid><category>books</category></item><item><title>简约之美 &amp; 编写可读代码的艺术</title><link>http://www.wklken.me/posts/2014/11/16/code-simplicity-and-the-art-of-readable-code.html</link><description>&lt;p&gt;最近陆续收到一些donation, 非常感谢哈, blog的文章说多不多说少不少, 大部分是笔记性质的, 主要目的还是积累以及方便自己查询回顾, 分享出来, 希望有所帮助:)&lt;/p&gt;
&lt;p&gt;ps: 昨天将国内ip切到gitcafe了, 加载速度应该快了很多, 在此特别感谢下&lt;a href="https://gitcafe.com/"&gt;gitcafe&lt;/a&gt;. (关于如何国内国外切分访问, google大法)&lt;/p&gt;
&lt;p&gt;今天要提的是&amp;lt;&amp;lt;简约之美&amp;mdash;软件设计之道&amp;gt;&amp;gt; 以及 &amp;lt;&amp;lt;编写可读代码的艺术&amp;gt;&amp;gt;, 主要原因是, 经典, 更重要的是, 足够薄:), 建议买了珍藏, 也是属于那种不同时期反复读会有不同感受的书&lt;/p&gt;
&lt;p&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;
&lt;h2 id="_1"&gt;简约之美&lt;/h2&gt;
&lt;p&gt;这本书, 用一百页来说明, 软件开发设计中, 一些十分简单的道理.&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/code-simplicity.jpg"/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;好的程序员和差的程序员的区别在于理解能力. 差劲的程序员不理解自己做的事情, 优秀的程序员则相反. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;理解能力&lt;/code&gt;, 看起来蛮虚的一个词, 但是在工作中真正进行沟通时, 你会发现区别非常大, 决定了是&lt;code&gt;一次沟通&lt;/code&gt; 还是 &lt;code&gt;反复沟通&lt;/code&gt;; 是&lt;code&gt;直达目标&lt;/code&gt;, 还是&lt;code&gt;不断曲折&lt;/code&gt;; 是一次&lt;code&gt;搞定&lt;/code&gt;, 还是&lt;code&gt;改改改&lt;/code&gt;; 是&lt;code&gt;反馈有效问题&lt;/code&gt;, 还是&lt;code&gt;反馈不是你的问题的问题空耗你的时间&lt;/code&gt;. 所以花费时间去理解需求, 想明白之后再开始写代码, 这个很重要! (真正团队干活你会有直观感受的)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题的根源通常在于编程......这一切都与复杂性有关......编程就成了把复杂问题化解为简单问题的劳动......&amp;rdquo;好程序员&amp;rdquo;应当竭尽全力, 把程序写得让其他程序员容易理解.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;bug的本质, 归根结底在于编程本身. &lt;/p&gt;
&lt;p&gt;我们往往容易把问题复杂化(大而全, 追求完美, 过早优化, 过早关注细节), 而过度复杂的后果导致后期代码的难以维护.(所谓的到时候再改/重构, 都是虚妄的), 程序员遇到一坨代码(别人写的或者之前写的), 有优化的冲动, 但是迫于需求或者时间或者系统稳定性, 往往惧怕&lt;code&gt;变化&lt;/code&gt;, 这段代码能工作就行.&lt;/p&gt;
&lt;p&gt;但是为什么要复杂化呢? 最简单的, 莫过于在最初就做到最好, 不要给自己&lt;code&gt;到时候再重构&lt;/code&gt;的念头. 写好每行代码.&lt;/p&gt;
&lt;p&gt;这里的&lt;code&gt;其他程序员&lt;/code&gt;, 也可能是&lt;code&gt;一个月&lt;/code&gt;后的自己. 如果经常发现回头看自己的代码都看不懂, 那么说明进步的余地还是很大的:). &lt;/p&gt;
&lt;p&gt;到这里, 我们的目标转向: 寻找提高代码质量的科学方法.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每个写代码的人都是设计师&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;小到一个变量名, 一个判断逻辑, 大到一个函数, 一个类, 一个算法, 从代码里可以感受到很多东西. 拿建筑设计师对比, 写代码, 如同构筑一栋建筑, 不管是小屋/公寓还是摩天大厦, 好的设计永远美好, 而糟糕的设计, 无论大小, 永远丑陋. 很多概念, 意识和技巧在里面.(建议阅读&lt;code&gt;编写可读代码的艺术&lt;/code&gt;, 然后是&lt;code&gt;代码大全&lt;/code&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;全部软件都有一个相同的目标: 帮助其他人......不能理解&lt;code&gt;帮助其他人&lt;/code&gt;的程序员, 只能写出糟糕的程序, 也就是说, 他们的程序提供不了什么帮助&amp;hellip;&amp;hellip;在做与软件有关的决策时, 指导法则就是判断能够提供什么样的帮助&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同样, 这里的&lt;code&gt;其他人&lt;/code&gt;, 可能是你自己. &lt;/p&gt;
&lt;p&gt;需求的优先级, 取决于这个需求对于用户帮助的大小.&lt;/p&gt;
&lt;p&gt;你这样做/这个功能/这么处理, 对于目标, 对于团队, 对于个人, 有何帮助?&lt;br/&gt;
如果没有, 为什么要这么做?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件设计科学的目标: 1.确保软件能够提供尽可能多的帮助. 2.确保软件能够持续提供尽可能多的帮助 3.设计程序员能尽可能简单地开发和维护的软件系统. 才能实现1/2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1代表软件本身的价值, 2代表软件的可维护性可扩展性, 3代表, 好的/简单的设计, 决定了可维护性和可扩展性, 是万丈高楼的地基. 不过1和3, 在有限资源的情况下(资源永远是不够的), 是互相冲突的, 所以要思考如何保持平衡.&lt;/p&gt;
&lt;p&gt;这里提到, 软件的开发和维护都应当简单, 要避免困难和复杂.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件设计方程式 可取程度=价值/成本  =&amp;gt;  可行性=(当前价值+未来价值)/(实现成本+维护成本)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当前价值和实现成本往往是可评估的, 人们会关注于这一点, 带来的问题就是忽略了未来价值和维护成本, 这两个和时间相关, 不易评估, 但是却更为重要. 人很容易只着眼于现在而忽略了未来. 所以写代码时需要注意, &lt;code&gt;存在着未来&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;相比降低实现成本, 降低维护成本更为重要&lt;/code&gt;. 很直观的感觉, 一个设计良好的接口, 在需求变更的时候, 只需要动个参数或者动几行代码或者压根不需要改. 而一个糟糕的设计里, 每次需求变更, 会发现需要改动很多代码, 甚至是重写, 连带测试等时间, 你会发现很多时间耗费在里面. 所以应该一开始就理解, 往未来看一眼(预测短期未来是可行的, 预测长期未来是不靠谱的), 再进行设计, 再进行代码.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;变化定律: 程序存在的时间越久, 它的某个部分需要变化的可能性就越高.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一切都是变化的, 你自己, 还有这个世界.&lt;/p&gt;
&lt;p&gt;所以需求变更是必然的:)&lt;/p&gt;
&lt;p&gt;之前学到一个很重要的观点: &lt;code&gt;拥抱变化&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件设计三大误区: 1.编写不必要的代码 2.代码难以修改 3.过分追求通用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;YAGIN, &lt;code&gt;不要编写不是必须的代码, 并且要删除没有用到的代码&lt;/code&gt;. 版本库干嘛用的? 提交, 然后删除那些没用的, 然后再提交:)&lt;/p&gt;
&lt;p&gt;僵化设计的原因: 1.对未来做了太多假设(......) 2.不仔细设计就编写代码(新手需注意). &lt;code&gt;设计程序时, 应当根据你现在确切知道的需求, 而不是你认为未来会出现的需求&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;避免过度设计: 仅仅根据目前确知的需求来考虑通用.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;缺陷概率定律: 在程序中新增缺陷的可能性与代码修改量成正比&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好的设计, 代码少(很大可能), 代码变更少, 而糟糕的设计, 反之. 从而, bug出现的概率显而易见&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最好的设计, 就是能够适应外界尽可能多的变化. 而软件自身的变化要尽可能少.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不变应万变, 追求之&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;永远不要&lt;code&gt;修正&lt;/code&gt;任何东西, 除非它真的可能有问题, 而且有证据表明问题确实存在.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如: &amp;ldquo;过早优化&amp;rdquo;!&lt;/p&gt;
&lt;p&gt;当问题成为问题的时候, 才是问题, 才需要去处理!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;理想情况下, 任何系统里的任何信息, 都应当只存在一次.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;避免重复. 变更时代价最小.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简洁定律: 软件任何一部分的维护难度, 反比于该部分的简洁程度.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简洁是相对的.&lt;/p&gt;
&lt;p&gt;保持一致/可读性(代码被阅读的次数远远多于编写和修改的次数)/命名/注释(代码的意图通常不应该用注释来说明, 直接阅读代码就应当能够理解)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;复杂性是会叠加的, 而不是简单的线性叠加&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;问题复杂, 解法不一定复杂. &lt;/p&gt;
&lt;p&gt;解决复杂性: 把它分解成独立的小部分, 并进行重新设计.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;测试法则: 你对软件行为的了解程度, 等于你真正测试它的程度......除非亲自测试过, 否则你不知道软件是否能正常运行.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;about test.&lt;/p&gt;
&lt;h2 id="_2"&gt;编写可读代码的艺术&lt;/h2&gt;
&lt;p&gt;关于如何编写高质量可读的代码的方法论:)&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/the-art-of-readable-code.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;&amp;lt;The Art of Readable Code&amp;gt;&amp;gt;, 这本书就不细写了, 因为不到两百页, 几乎每一页都是干货.&lt;/p&gt;
&lt;p&gt;强烈推荐.&lt;/p&gt;
&lt;p&gt;代码大全太厚, &amp;lt;&amp;lt;Clean Code&amp;gt;&amp;gt;太晦涩, 建议来读这本. 本次总能得到一些感悟.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 16 Nov 2014 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2014-11-16:posts/2014/11/16/code-simplicity-and-the-art-of-readable-code.html</guid><category>books</category></item><item><title>重读Rework</title><link>http://www.wklken.me/posts/2014/11/09/rework.html</link><description>&lt;p&gt;忙碌了一段时间, 终于迎来了久违的周末.&lt;/p&gt;
&lt;p&gt;时间过得很快, 入职快三个月了, 很忙但很充实, 带来的影响是, 时间少了, 读书和写 blog 的进度随之放缓, 但是积累了很多笔记.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&amp;lt;Rework&amp;gt;&amp;gt;&lt;/code&gt;这本书, 是&lt;code&gt;37signals&lt;/code&gt;三本本书中的第二本, 读过很多遍了, 短小精悍, 但是每次重读都会有一些不同的收获, 建议买一本珍藏:)&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/rework.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;以下是一些摘录和自己的看法, 仅供参考&lt;/p&gt;
&lt;p&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;做一些自己喜欢的事情并从中获得些回报&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要思考下自己目前的工作, 是否符合这一点? 如果是, 那就继续努力做好, 如果不是, 就需要思考下, 自己喜欢做什么?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一种普遍的错误认知是: 人要从错误中吸取经验教训.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要学会从错误中吸取经验, 这句话是没错的, 不断尝试, fail fast, 然后得到一些东西, 这也是没问题的. 但是, 不要认为, 不断从错误中吸取教训就能获得成功. 就像通关游戏有一千个坑, 你或许可以一个个试, 然后一次学到一些东西, 但是....有没有想过, 失败不是成功的先决条件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你更应该从成功中汲取养分.成功才是真正靠得住的教材.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;优秀是一种习惯, 进化是建立在成功的基础之上的. 每个人, 无时无刻都是在往前走的, 然而, 每个人最终得到的并不一样. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;计划即瞎猜......现在就决定你这周要做什么,不必去管全年的计划, 只要找出下一项最重要的任务, 然后起而行之.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;准确理解应该是: 长期计划即瞎猜......你不需要年度/季度/月度计划, 但是你需要年度/季度/月度目标, 计划总是赶不上变化的, 你总是花费很长一段时间或者很多精力给自己制定一个非常完美的计划, 但是计划永远只是计划而已.不去做, 只是徒费精力.我的做法是, 有目标, 然后拆解成小目标, 小目标更灵活可变, 而在do的时候, 只专注于一两个, 并且根据自己的心情/状态等灵活变动. &lt;br/&gt;
拥抱变化, 只要保证不偏离目标主体就行.&lt;br/&gt;
不过短期计划还是需要的, 例如每天的todo list. 我现在切换成了&lt;code&gt;things&lt;/code&gt;管理, &lt;code&gt;wunderlist&lt;/code&gt;貌似也不错, 不过你需要找一个最适合你自己的工具.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;工作狂的行为不但没有必要, 而是愚蠢至极......真正的英雄早已想出办法, 搞定一切, 然后回家了.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;获取三年前刚毕业那会, 我不会完全赞同这个观点, 经过三年, 三家公司, 三种完全不同的工作风格和模式, 看法已经彻底改变了.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;快乐工作, 认真生活&lt;/code&gt;, 这句话我一年多前才完全认同之. &lt;code&gt;Work Smarter, Not Harder&lt;/code&gt;&amp;mdash;来自zapier的一篇博文&lt;a href="https://zapier.com/blog/best-ways-work-smarter-not-harder/"&gt;16 of the Best Ways to Work Smarter, Not Harder&lt;br/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我之前的博文提过, 恶性循环/良性循环, 所谓的工作狂, 就是处在恶性循环中而不自知, 如果觉得自己有点苗头, 需要自省.&lt;/p&gt;
&lt;p&gt;拼的是效率, 而不是时间.&lt;/p&gt;
&lt;p&gt;首先, 工作永远是干不完的, 你必须明确知道这一点. 其次, 效率是可以提升的, 你也必须认同这一点, 并通过不断完善自己的工作风格/模式, 优化共同方式, 积累经验, 技术栈工具栈补完, 你可以达到一个很好的状态. 再次, 努力成为&lt;code&gt;英雄&lt;/code&gt;而不是&lt;code&gt;工作狂&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用自己的方式, 做自己喜欢做的事情, 并从中获得回报.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这才是工作.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在宇宙中留下你的足迹&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人的一生有限.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;挠自己痒处,......最好还是做自己真正关心的东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;写代码, 有一个&lt;code&gt;吃自己的狗粮&lt;/code&gt;一说. 这里同, 做自己关心的东西, 感兴趣的东西, 优秀到卓越的区别在于此.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在你的人生中真正有意义的是你做了什么, 而不是你想过什么,说过什么, 或者计划过什么&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;计划党/拖延症患者需注意....&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;永远不会有正当其时的时候.....完美的时机永远不会出现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以, 不要找借口了吧骚年? 活在当下, 现在就开始.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Draw a line in the sand.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;信念, 你所坚守的到底是什么?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;坚守某种信念并不仅仅是把它写下来. 不但要相信它, 还要让他成为你的生活方式.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;think about it&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你需要的是承诺策略, 而不是退出策略&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你做事情的第一反应是?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与其做半个成品, 不如做好半个产品&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;以后再重构&lt;/code&gt;, 这句话是很虚无缥缈的, 可以说是遥遥无期, 所以, 经手的每一件事情, 每一行代码, 做到最好. 不要考虑&lt;code&gt;退出策略&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要过早关注细节......你只有在真正开始后, 才能认清到底哪些细节才是最重要的.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同&lt;code&gt;不要过早优化&lt;/code&gt;:)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关注不变因素&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么才是不变的? 才是核心? 才是重要的?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人们把装备当做取胜的法宝, 却不愿花时间去练习......&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;妄图寻找捷径? &lt;/p&gt;
&lt;p&gt;有一段时间是工具控, 沉迷各种工具，编辑器，插件，操作系统，效率，gtd,浏览器等等&lt;/p&gt;
&lt;p&gt;其实，更重要的是事情本身, 是人本身&lt;/p&gt;
&lt;p&gt;Get things done, 就足够了&lt;/p&gt;
&lt;p&gt;花时间找到适合自己的工具, 不太重, 不过轻, 刚刚合适就好. 而不是花时间收集一大堆东西, 徒耗精力.&lt;/p&gt;
&lt;p&gt;现在，已经没那么狂热了，只遵循一个原则，尝试新事物，针对所有工具，使用二八原则，只关心最核心的20%. 足够了.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;立马就上线...为了迅速上线,要砍掉一切不必要的东西&amp;hellip;最有效的成功方法是不断尝试. 不要再臆测到底会发生什么事了, 到现实中去寻找答案吧.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;小步快跑才是王道&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;退出的理由?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么要这么做? 你在解决什么问题?这真的有用么?你加上去的东西有价值么? 这种改变真的会起作用么? 这种方法更简单吗? 有其他更值得做的事情吗? 这样做值吗?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Interruption is the enemy of productivity&amp;hellip;&amp;hellip;你的生活被各种干扰包围着, 只有你自己才能去发起反击.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;干扰不可避免, 只看你如何去解决. 你必须要形成行之有效的工作风格/模式, 以及沟通方式, 并&lt;code&gt;培训&lt;/code&gt;你的战友.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;会议有毒&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如何更高效地开会? 这几个月已经彻底杜绝了&lt;code&gt;被动&lt;/code&gt;的会议, 但是有些必要的会议时间还是太长了.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Good enough is fine.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;没有更好, 只有合适. 简单有效就ok.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t be a hero&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有些时候, 需要考虑适时退出.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该睡觉时睡觉&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作息规律, 高效保证, 熬夜苦撑没有任何好处&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;积累动力的方法就是完成一项任务，然后紧接去完成下一项任务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;重要, 不要给自己设置一个不可能完成的东西, 然后被恐惧压垮&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;预估都是垃圾&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不是不预估, 而是, 你需要聪明地去预估. 分治, 小的任务总是更容易把控些.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要做得比你的对手少, 并以此来击败他们.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;少.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要相信&amp;rdquo;客户永远是正确的&amp;rdquo;这种废话&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不要相信&amp;rdquo;产品/老板永远是正确的&amp;rdquo;这句话, 思辨地看待问题, 提出问题, 解决问题. 学会说&amp;rsquo;no&amp;rsquo;. (处理需求的时候很重要)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;头脑发热不等于当务之急&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;做当前最重要的事情, 而不是最想去做的事情.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要保持低调, 你可以利用这段时间继续调整你的策略, 解决纠结的问题, 测试各种创意, 尝试新事物.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;黑暗森林?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一夜成名只是传说......道路很艰难, 但你必须充满信心.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;生活&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;受不了时再招人......不要提前招人.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你最终会明确你想要招的是什么样的人.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;鸡尾酒会上的陌生人......要营造一个能让人直言不讳并且有安全感的环境.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所处的环境是不是这样的? 你能否感觉到自己是一份子, 能改变些什么? 而不是深深的无力感?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;多年的无关经验......真正的差别来自于个人的努力程度, 性格差异以及智力水平.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人和人的区别和工作年限相关性其实蛮低的, 深有体会.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文化不是由谁创造的......企业文化是行为, 不是语言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;连着实习, 四家公司, 企业文化? 有两家白纸黑字进去新员工培训就有, 大大的标语什么的, 迄今没有记得是什么. 杭州一年多, 是那种潜移默化的, 你从大家的身上可以感受到的东西, 对我影响很大, 受益良多. 现在感受到的, 同样是身体力行, 在一件件事情中. 所以找工作, 如果觉得契合, ok, 如果感觉所谓的&lt;code&gt;文化&lt;/code&gt;很SB, 果断些.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;会写代表会思考&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码/总结/博客&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要一受伤就结疤, 不要因为一个人的一次错误而去指定规章制度.只有当一件事情反复发生时，才需要为之制定规章制度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们做事的时候是不是也这样? 一遭被蛇咬, 十年怕井绳. 这样自己的领域会不断地受限的.&lt;/p&gt;
&lt;p&gt;所以, 事不过三的原则很重要:)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;灵感稍纵即逝......想法是不朽的, 一直都会存在. 最不可能长存的是灵感.&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 09 Nov 2014 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2014-11-09:posts/2014/11/09/rework.html</guid><category>books</category></item><item><title>我的mac app列表</title><link>http://www.wklken.me/posts/2014/05/24/my-mac-app-list.html</link><description>&lt;hr/&gt;
&lt;p&gt;我曾经说过, 买mac是2013年自己做的最正确的决定之一&lt;/p&gt;
&lt;p&gt;转眼一年多过去了, mac为我节省的时间,带来的便捷,以及给自己工作和生活带来的变化是没法估量的&lt;/p&gt;
&lt;p&gt;整理下自己app列表, 瞅了下连带系统自带的一共125个app&lt;/p&gt;
&lt;p&gt;&lt;img alt="myapps" src="/imgs/resources/my-apps.jpeg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="_1"&gt;效率&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Alfred 2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;神器,不解释&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DEVONthink Pro&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;资源素材收集整理分类, 知识管理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OmniFocus Pro&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;GTD&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Vitanmin-R 2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;番茄时间工作法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BetterTouchTool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;触控板/鼠标功能扩展&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Keyboard Maestro&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;键盘大师, 门槛较高&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;aText&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关键字扩展 (准备尝试TextExpander)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Moom&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;窗口管理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ClipMenu&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;剪贴板&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PopClip&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;类iphone选中工具,拥有很多给力的插件,例如打开选中下的链接&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1Password 4&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;密码管理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bartender&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MenuBar管理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HyperSwitch&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最好的切换工具(better than km or manico)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Manico&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;应用切换, 辅助&lt;/p&gt;
&lt;h3 id="_2"&gt;编辑器&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;MacVim&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;编辑器之神,不解释, 配置见 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mou&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;markdown编辑&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;haroopad&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;markdown编辑&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sublime Text&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;源码查看&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Chocolat&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;临时文件编辑&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Day One&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;日记&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;iA Writer&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;写作工具,支持markdown&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Atom&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下一代编辑器,下了尝鲜&lt;/p&gt;
&lt;h3 id="_3"&gt;开发&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;iTerm&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;终端利器&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dash&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;文档速查&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Xcode&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;写app用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CodeBox&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码片段&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OhMyStar&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;github star项目管理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Gas Mask&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;host快速切换&lt;/p&gt;
&lt;h3 id="_4"&gt;浏览器及阅读&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Google Chrome&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一号浏览器&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Firefox&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;二号浏览器&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Safari&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;三号浏览器&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pocket&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;read it later&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ReadKit&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;rss 订阅&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kindle&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;电子书&lt;/p&gt;
&lt;h3 id="_5"&gt;社交&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;QQ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;常年挂机&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RTX&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;内部交流&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WeChat&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;微信,妈蛋这货不保存聊天记录&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AliWangwang&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;淘宝&lt;/p&gt;
&lt;h3 id="_6"&gt;云&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Dropbox&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;重要文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Evernote&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;云笔记&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;百度云同步盘&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;资源文件&lt;/p&gt;
&lt;h3 id="gtd"&gt;GTD&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Wunderlist&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;记录待办事项&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fantastical&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;日历管理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Eggscellent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;番茄钟&lt;/p&gt;
&lt;h3 id="_7"&gt;界面&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Flux&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;色温调整&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;爱壁纸HD&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;壁纸管理&lt;/p&gt;
&lt;h3 id="_8"&gt;影音&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;MPlayerX&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;播放器&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Xiami&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虾米&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;diumoo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;豆瓣&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;iTunes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;自带&lt;/p&gt;
&lt;h3 id="_9"&gt;办公&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Keynote&lt;br/&gt;
Numbers&lt;br/&gt;
Pages&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;三件套&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;XMind&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;脑图&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Airmail&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;邮件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Swift Publisher 3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;pages 增强&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Balsamiq Mockups&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原型图&lt;/p&gt;
&lt;h3 id="_10"&gt;系统工具&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Parallels Desktop&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虚拟机&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Path Finder&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;增强finder&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CleanMyMac 2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;垃圾清理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Snip&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;切图&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Folx 3 / Thunder&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下载&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Caffeine&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;保持屏幕常亮&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lock Screen Plus&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;锁屏&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Keka&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;压缩解压&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GoAgentX&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;科学上网&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LICEcap&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;录屏&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Better Rename 9&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;批量文件重命名&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Gemini&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;重复文件查找&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MacHider&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;文件隐藏&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MagicanRest&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;休息提醒&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;smcFanControl&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;自动控制风扇&lt;/p&gt;
&lt;h3 id="_11"&gt;其他&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;LIMBO&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个很虐的游戏&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 24 May 2014 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2014-05-24:posts/2014/05/24/my-mac-app-list.html</guid><category>mac</category></item><item><title>读书笔记——追随你的心，用思想改变世界</title><link>http://www.wklken.me/posts/2014/01/19/follow-your-heart.html</link><description>&lt;p&gt;乔布斯的十大演讲&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/follow-your-heart.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;很喜欢封面的设计，这本书的纸质也很赞，摸起来蛮有质感的，书买了应该有两年了，一直带着，但是没怎么看&lt;/p&gt;
&lt;p&gt;今天又重新翻出来，书的边缘，已经有了岁月的痕迹，微微泛黄&lt;/p&gt;
&lt;p&gt;封面是乔帮主，还有那句经典的"Follow your heart"&lt;/p&gt;
&lt;p&gt;曾几何时，对帮主不是很了解，即使是帮主走的那年，12年十月，看了乔布斯传，对apple有了基本的认识&lt;/p&gt;
&lt;p&gt;12年后，逐渐的，变成了果粉，没有刻意去追求什么，只是，apple的产品，逐一进入的我的生活&lt;/p&gt;
&lt;p&gt;我曾经说过，买macbook是2013年最正确的决定之一，然后，运气爆表年会中了一个ipad air，变成了今年最幸运的事情之一。用了一天，下了多看,kindle,知乎，网易公开课，还有google浏览器，微博，pocket,evernote。以后不用抱着电脑累了，相信会为我的生活带来些什么&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;整本书，看看第一章第二章即可&lt;/p&gt;
&lt;p&gt;第一章，语录，可以反复读，即使读不懂，随着时间，阅历丰富，有些东西会逐渐懂得。&lt;/p&gt;
&lt;p&gt;第二章，斯坦福的演讲，看看不错, &lt;a href="http://v.163.com/special/opencourse/jobs.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;后面的，大部分是发布会，以及采访，可以直接看视频，看文字没啥特别的感觉，感觉编辑纯粹是凑字数&lt;/p&gt;
&lt;p&gt;另外，还有一个遗失的访谈，蛮长的，一个多小时，但是不得不说，值得一看，&lt;a href="http://v.163.com/movie/2013/5/N/R/M8TBJIK7D_M8TBLIINR.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;以下，是一些感受&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我活着，就是为了改变世界&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我只能说，帮主做到了。&lt;/p&gt;
&lt;p&gt;很多时候，我都在思考，为什么活着，这个是个哲学问题，又不是，很难想明白的&lt;/p&gt;
&lt;p&gt;每个工程师，都有改变世界的梦想&lt;/p&gt;
&lt;p&gt;这么多年，有些端倪了，活着，对我而言，更像是：&amp;ldquo;创造价值&amp;rdquo;，让我，以及我所能影响到的人，生活更加美好些&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;领袖和跟风者的区别就在于创新&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有所感受，不敢妄加评论，起码我所接触到的中国互联网环境还太狭窄&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人要么是天才，要么是笨蛋&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有些偏激，但是蛮有道理的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;热忱是胜利的秘诀&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对所做的事情，需要有热情&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;佛教中有一句话：初学者心态。拥有初学者心态是件了不起的事情&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每隔一段时间，都需要倒掉，空杯心态，去接触新的东西，去重新认识已有的东西&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;求知若渴，虚怀若谷&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前者是现在必须努力达到的目标，后者，是一生需要学习和感悟的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每个人的时间有限，所以你不要为别人活着。不要让自己的内心被别人的意见左右，不要活在他人的观念里，更不要被平庸的教条限制。最重要的是，坚定地寻找和倾听自己心灵发出的声音，那才是你的真实想法。要相信你的直觉和心灵。除此之外，其他的一切都是次要的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我觉得，每个人都有必要自己读一读这段话，从小到大，我们的思想受到了太多束缚和限制，所以导致很多人，终其一生，都为了别人而活，活在别人的观念里&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;互联网创业不在于有多少人开始创办公司，而在于有多少人能坚持到底&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;坚持很重要&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;没有经验，你就永远不可能知道经验的价值，或者永远不可能知道如何正确地保有经验所创造的财富&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;经验很重要，见过多年只有一年经验的人，也见过一年有多年经验的人。刚毕业那会，对所谓的&amp;ldquo;经验&amp;rdquo;很不屑，两年多过来，有了蛮多认识的。经验，很重要，而且通过书本什么的很那学来的，实践出真知。经验，应该可以作为&amp;ldquo;聪明&amp;rdquo;和&amp;ldquo;智慧&amp;rdquo;的分界线吧。and，经验是需要积累的，不断持续的积累，有意识地积累。帮主也提到，过去的一切，点滴，即使再小，在未来的某个时刻，也会起到作用，所有的事情和经历，都是关联的。all connected!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;成为海盗吧，成为海盗比加入海军更有意思&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;海军的优势，或许是&amp;ldquo;纪律&amp;rdquo;，但是劣势，或许也是&amp;ldquo;纪律&amp;rdquo;，向往自由的人，成为&amp;ldquo;海盗&amp;rdquo;更为合适。我的征途是星辰大海&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你若想将未来的点联系在一起，那你就只能先将过去的点联系起来。你得相信你的未来和你的过去是联系着的。你必须要相信直觉、命运、生活等这些东西。这个方法从来没有让我失望过，它反而让我的生活发生了奇妙的变化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很多事情，并非一蹴而就，或许在外人看来是，但是背后，都以一段很长的过去。我们的现在，就是未来的过去，未来想要变成什么得到什么，和现在是相关的。&lt;/p&gt;
&lt;p&gt;另外，我开始相信直觉。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你的工作将会占据你的大部分时间，做你自己认为最了不起的工作时唯一让你真正满意的方法。而做好你最满意的工作的唯一方法就是热爱你所做的事情。因此，继续找你满意的工作，直到找到它，不要气馁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;非常赞同，在懵懂中度过了大学四年，花了接近两年，看是有点懂了。做自己喜欢的事情。决定并不难，难的是，如何真正知道自己喜欢什么。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;记住一点，就是每个人都会死去。这是我遇到的最重要的决策工具，很多重大的人生选择都是在它的帮助下完成的。外部所有的骄傲、期望、对失败或尴尬的恐惧，在死亡面前，都会消失殆尽，只留下真正重要的东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有点感觉，但是还做不到，可能，还是自己太年轻了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;热爱你所做的事是做伟大工作的最佳方法。如果你还没有找到你想要的工作，继续找。不要停下来。只要你全力以赴，你知道你一定会找到它。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;坚持&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人生苦短，你总有一天会离开人世。一个人没有机会去做那么多事，所以每个人都应该极其优秀才行。因为这就是我们的生活。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;做选择的时候，多想想这个问题&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;2014-01-19&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 19 Jan 2014 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2014-01-19:posts/2014/01/19/follow-your-heart.html</guid><category>books</category></item><item><title>电影人生</title><link>http://www.wklken.me/posts/2014/01/01/movies.html</link><description>&lt;blockquote&gt;
&lt;p&gt;每一部电影，都是一种人生，感悟&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每周五是我的电影之夜，以后有了自己小窝之后一定要搞个影院&lt;/p&gt;
&lt;p&gt;会记录一些看过的，个人喜欢的电影&lt;/p&gt;
&lt;p&gt;每部电影，都能看到什么，获得些什么&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;无人区&lt;/p&gt;
&lt;p&gt;饥饿游戏1 饥饿游戏2&lt;/p&gt;
&lt;p&gt;地心引力&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;时空恋旅人&lt;/p&gt;
&lt;p&gt;意外的恋爱时光&lt;/p&gt;
&lt;p&gt;一座城池&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;和summer的500天/好好先生&lt;/p&gt;
&lt;p&gt;黄铜茶壶&lt;/p&gt;
&lt;p&gt;光的棍&lt;/p&gt;
&lt;p&gt;哈利波特4-7(Luna)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 01 Jan 2014 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2014-01-01:posts/2014/01/01/movies.html</guid><category>life</category></item><item><title>2013年终总结</title><link>http://www.wklken.me/posts/2014/01/01/summary-08-2013end-2014begin.html</link><description>&lt;p&gt;每年写总结，总是一拖在拖，早几天就在想，今年做了些什么&lt;/p&gt;
&lt;p&gt;目测这篇总结要从今年写到明年：）&lt;/p&gt;
&lt;p&gt;好了，开始，依旧很杂，仅供看看......&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="_1"&gt;脚步&lt;/h3&gt;
&lt;p&gt;今年，去过两次海南（一次骑行一次公司旅游），一趟厦门（离老家一两小时的地方第一次去竟然是&amp;mdash;&amp;mdash;从深圳杀过去的）.&lt;/p&gt;
&lt;p&gt;去海南，不在计划内的，突然想去，就去了......一路上都是大家在等我，胃出问题了，体能又不行。一路经历蛮多的，行走路上，看到异地，那里的人们是怎么生活的，感受一下。话说看海看到审美疲劳.......&lt;/p&gt;
&lt;p&gt;不记得太多，最深刻，莫过于最后一天到三亚，找青旅的路上，一个人，手机没电了，买了张地图，误打误撞骑到了鹿回头岭上，半山顶的一个平台，骑不动了把车停了躺在台阶上，看日落，对面是大海，有小岛，有轮船，夕阳，阳光透过云朵，照到海上，斑驳，海面，灿烂，摇曳，很美，很宁静.....&lt;/p&gt;
&lt;p&gt;这一趟，不虚此行&lt;/p&gt;
&lt;p&gt;很遗憾，手机没电，各种没电，这幅场景，只能在脑海了&lt;/p&gt;
&lt;p&gt;五一那趟去海南，晒得很黑，一路行来，不记得多少公里，深圳汽车到海口，骑车到三亚，再高铁回海口飞回深圳.一路行来没去什么景点，没看到什么名胜&lt;/p&gt;
&lt;p&gt;想到一些东西，学到一些东西，有些感受，足以，走了多远，并不是很重要吧&lt;/p&gt;
&lt;p&gt;后来去的那一趟，玉带滩，天涯海角，非诚勿扰拍摄地等等，该看的都看回来了，反而没什么感觉，不过大巴走的路线和骑行有一段重复，想着当初爬那坡爬到要挂的心情......感受颇多，对了，有个地方叫做长坡镇，坡真的很长，真的....&lt;/p&gt;
&lt;p&gt;厦门之旅，太赶，权当回家乡了，鼓浪屿什么的，时间有限，满景点都是人，感觉并不如何&lt;/p&gt;
&lt;p&gt;今年虽然没满万里，勉强七八千里还是有的，额，大部分还是交通工具.&lt;/p&gt;
&lt;p&gt;庆幸的是，高铁开了，以后回家4小时，票价150，幸甚，以后回家不愁了&lt;/p&gt;
&lt;p&gt;行走，并不一定为了什么，不是公里数，不是任何数，带着问题或者不带着问题，拍照或者不拍照，到一个地方，有一些经历，有一些感受，最好再想清楚一两件事，也就足够了吧&lt;/p&gt;
&lt;p&gt;2014，继续行走&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="_2"&gt;工作&lt;/h3&gt;
&lt;p&gt;去年从杭州离职到深圳，整整一年又两个月。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么从豆瓣离职：作为一个程序员，不加班我感到很空虚....&lt;br/&gt;
                            -- 知乎&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;刨掉前两个月，2013一整年，好像没加过几次班，单手可以数......一方面公司不提倡，提供了好的氛围，另一方面，更高效更懂得时间管理执行力更高了（自夸嫌疑，^_^，工作两年多了，好歹有点进步）&lt;/p&gt;
&lt;p&gt;当然，一方面今年没有涉及到特别赶的项目&lt;/p&gt;
&lt;p&gt;其实，真心觉得，懂得管理好自己，学会规划，时间的安排，足够强大的执行力，足够强的沟通，那么，每天八小时，足够了。&lt;/p&gt;
&lt;p&gt;足够高效代表足够的产出，不需要额外通过加班弥补产出的不足。时间多，可以投入提升产能，良性循环&lt;/p&gt;
&lt;p&gt;加班可能陷入恶性循环，好吧.&lt;/p&gt;
&lt;p&gt;不扯了，今年工作上算是像个&amp;ldquo;有经验的&amp;rdquo;工程师了，项目各个流程，时间规划，执行，感觉比一年前的我进步许多，原来可能只知道怎么做，现在趋向于，怎么做的更好。&lt;/p&gt;
&lt;p&gt;年中的时候，需要作为类似&amp;ldquo;组长&amp;rdquo;角色的角色，带着大家干活，其实感觉半年多下来，做的并不怎么好，只是做一些日常，提供必要的帮助和协调，跟进和处理。各种不完美，拥抱变化，尝试去学习，去处理。也在慢慢进步吧，虽然挺慢的，逐渐学习很多东西......&lt;/p&gt;
&lt;p&gt;今天还在翻tower，查看今年自己干了什么，发现除了将整体搜索重构，写了个识别程序，其他的项目好像都有打酱油的嫌疑，或许做的不错，感觉不在兴趣点上吧，起码成就感没有爆.今年真没干嘛，更多的是各种需求的支持和处理。&lt;/p&gt;
&lt;p&gt;也要反思一下，自己更喜欢做什么。做的事情如果恰好和兴趣匹配，那么项目绝对可以做到超出期望，匹配度一般的话，满足期望.......不匹配的话，3.25.....&lt;/p&gt;
&lt;p&gt;现在上班，要打卡，虽然是十点上班，但是总觉得打卡对于工程师而言，蛮不对味的，虽然现在习惯了....&lt;br/&gt;
还有一个，要绩效，填那些东西对目标感比较强的人来说，浪费太多时间，年底上了个系统，已经很方便客观了。明白一个道理，好的工具，对不需要的人（或者认为自己不需要），再好也是浪费时间，对需要的人，绝对是提升产出产能的利器.&lt;/p&gt;
&lt;p&gt;今年工作，有亮点，有槽点，一年过来，算是蛮顺利的，给自己勉强80优秀，再接再厉，希望明年正正经经做几件自我认同的事情出来&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="_3"&gt;读书&lt;/h3&gt;
&lt;p&gt;既然不加班，那么多时间怎么花，这是个问题，尤其哥还单身...&amp;gt;_&amp;lt;#&lt;/p&gt;
&lt;p&gt;还是在保持每月买几本书的节奏，然后当当京东偶尔满400-200的活动手贱忍不住会参加，然后，年第一盘算，加上10来本兑换的，一共90+本&lt;/p&gt;
&lt;p&gt;买书如山倒，读书如抽丝，哎&lt;/p&gt;
&lt;p&gt;仔细算下来，读过的有20+本（我指的读过DONE是指，两遍以上，有笔记总结的，技术类的我会给&amp;ldquo;它&amp;rdquo;脱水），看多的应该也有20+本（看过，一遍），总共应该占了50%以上，应该算还行的程度，剩余50%，只能排到2014了&lt;/p&gt;
&lt;p&gt;最近看到码农周刊和知乎的 2013书单，又要下手，不过打算开始电子版了，非技术类的，都电子版，纸质版的搬家绝对是个悲剧......&lt;/p&gt;
&lt;p&gt;没什么事，不知道做什么，就读书吧，总会有收获的，或多或少&lt;/p&gt;
&lt;p&gt;怎么挑书，微博，知乎，别人推荐的，热门的一般都不会差，可以一读（当然，远离大部分成功学的书，只有很少一部分是可读的）&lt;/p&gt;
&lt;p&gt;为什么要读？理由有很多，知识改变命运，这句话很老，但并不可笑.&lt;/p&gt;
&lt;p&gt;怎么读？貌似不需要记住吧？有印象，收获一些观点，一些感悟，对自己有帮助，足够了吧？&lt;/p&gt;
&lt;p&gt;反正，我现在工作中用到的，90%以上，纯属毕业到现在自学.....主要途径还是读书&lt;/p&gt;
&lt;p&gt;知乎上有一个话题，什么东西大大提升你的幸福感，排前有一个:kindle&lt;/p&gt;
&lt;p&gt;总之，今年读书勉强60及格，后续买书走电子版，入手需三思再三思.....&lt;/p&gt;
&lt;p&gt;附，&lt;a href="http://www.wklken.me/pages/books.html"&gt;我的书单&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="_4"&gt;博客&amp;amp;项目&lt;/h3&gt;
&lt;p&gt;写博客，主要为了积累和分享&lt;/p&gt;
&lt;p&gt;博客年初过来深圳后，就不再csdn上更新了，迁移，期间自己去写了一个博客程序（重复造轮），后来又废弃了（囧），后来终于找到满意的，修改了主题，就是现在这个博客，pelican静态化到美帝digitalocean服务器，然后就可以通过vim直接写，不需要考虑格式啊排版乱七八糟的东西，一键维护到github，自动更新到服务器，刷新文章列表.&lt;/p&gt;
&lt;p&gt;博文，40+篇，不算高产，有一段时间迷上翻译，所以有一部分翻译文章，刚开始发了一些笔记总结，还有很多初稿没更新上来，很多东西，只有感觉了可以，才会发（即使这样，质量和深度也就一般，需要继续修炼）&lt;/p&gt;
&lt;p&gt;有几篇类似读书笔记的东西，大部分笔记还在evernote里存着，后续整理发出&lt;/p&gt;
&lt;p&gt;继续坚持写吧，每每回头看，总会有感受&lt;/p&gt;
&lt;p&gt;关于项目&lt;/p&gt;
&lt;p&gt;今年没搞出什么东西来，哎&lt;/p&gt;
&lt;p&gt;现在自己维护的项目列表  &lt;a href="http://www.wklken.me/pages/projects.html"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 这个配置，蛮多人用的，打算2014再更新一个版本，让更多pythonista和vim党用起来.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/stackoverflow-py-top-qa"&gt;stackoverflow-py-top-qa&lt;/a&gt;那一两个月，开始翻译，翻译了一百多个问题，你问我怎么搞出来的，我也不知道，一天翻译几个一天翻译几个，就那么多了，还欠着100+问题，2014春节争取搞完，不能再欠了&lt;/p&gt;
&lt;p&gt;其他，真没什么了，写过三个程序，都夭折了，前几天给自己新建了几个，争取2014完成两个，争取也加入一些自己感兴趣的项目&lt;/p&gt;
&lt;p&gt;博客，80分，项目60，都不是很满意，2014希望有改变吧&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="_5"&gt;生活&lt;/h3&gt;
&lt;p&gt;在地铁站旁边的小区住，现在也一年多了，房间虽小，但是有一个书柜，靠近街道有点吵，但是胜在能晒到太阳。&lt;/p&gt;
&lt;p&gt;上半年把蒸功夫和麦当劳通关N次，终于疲倦了，开始自己DIY，目前会煮面，会煮稀饭，会做个咖喱饭，勉强喂饱自己，不容易啊.......学会做饭使用一个必须的生存技能，饿，没错。成为一个厨子的道路还需要经历一段漫长(并且黑暗)的时间......&lt;/p&gt;
&lt;p&gt;周末，基本睡半天，下午做窗户边晒太阳看书，晚上写代码到深夜，周天早出去溜溜，步行个七八公里，到海边或者绿道公园走走，权当锻炼身体了......没车也就远离骑行了&lt;/p&gt;
&lt;p&gt;蛮充实的，也蛮单调的，真的很单调&lt;/p&gt;
&lt;p&gt;发现我正在从一般宅迈向终极宅的道路上大步踏去，o(╯□╰)o&lt;/p&gt;
&lt;p&gt;生活，40分，哎，这次真的不及格&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="_6"&gt;其他&lt;/h3&gt;
&lt;p&gt;去年还在想，更快的从windows转到ubuntu，今年年初果断皈依mac了......计划赶不上变化&lt;/p&gt;
&lt;p&gt;macbook给我带来的是最最最根本的，提升？额，可以用这个词，直接废弃公司的电脑了，每天上下班背着电脑，虽然不怎么方便，但是一整年下来mac为我节约的时间不是按几个小时算的......今年做的最正确的事之一&lt;/p&gt;
&lt;p&gt;今年的唯一变化是不上网易了，负能量太多，只能刷刷知乎了.....依旧刷微博，只是频率低了很多&lt;/p&gt;
&lt;p&gt;不再读小说，自从上次读完平凡的世界，现在唯一只追一本小说了，现在的小说带来的快乐和花费的时间完全不成比例，干脆戒了&lt;/p&gt;
&lt;p&gt;今年也错过了很多事情，哎&lt;/p&gt;
&lt;p&gt;很多目标没有达到，很多事情没有做成&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="_7"&gt;扯点其他的&lt;/h3&gt;
&lt;p&gt;几点&lt;/p&gt;
&lt;p&gt;Live your life&amp;mdash;&amp;mdash;过自己真正想要的生活，不是别人的，家人的或者别人眼里的，别人想要的，别人要求的生活，不管世俗不世俗，起码要想清楚，我想要的是什么，我想要过的生活又是什么。我也还没怎么明白，在思考，很容易知道自己不喜欢什么，但是很难搞明白自己想要什么&lt;/p&gt;
&lt;p&gt;做喜欢的事情&amp;mdash;&amp;mdash;很重要，或许要花很长一段时间才能明白.我大体想明白了&lt;/p&gt;
&lt;p&gt;做点事情&amp;mdash;&amp;mdash;要做事情，不管喜不喜欢，不可能所有的事情都是自己喜欢的，生活没有那么完美，不喜欢的，一样要做好，有句话叫做：做好当下你认为正确的事情。我一直在坚守的原则之一&lt;/p&gt;
&lt;p&gt;创造价值&amp;mdash;&amp;mdash;总是要创造一些东西的，生活的意义&lt;/p&gt;
&lt;p&gt;每天进步一点点&amp;mdash;&amp;mdash;哪怕真的只有一点点.例如背单词.....&lt;/p&gt;
&lt;p&gt;有一些事情注定我当下想不明白，性格的缺陷导致容易优柔寡断，哎，奈何，奈何。只能尽力克服了&lt;/p&gt;
&lt;p&gt;好了，鸡汤完了&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;2013已远去，写到一般（好多错字有木有....）的时候，不知不觉，已经迈入2014了&lt;/p&gt;
&lt;p&gt;从今天开始的很长一段时间，要去纠正时间签名老是签成2013......&lt;/p&gt;
&lt;p&gt;2014，新的开始和起点，也意味着新的计划(去年的计划貌似有一些没实现，具体是什么我也忘了....)&lt;/p&gt;
&lt;p&gt;计划永远赶不上变化的，但是我们依旧要计划，总比没有强:)&lt;/p&gt;
&lt;p&gt;干嘛去？&lt;/p&gt;
&lt;p&gt;做几个自己满意的项目(工作相关)&lt;/p&gt;
&lt;p&gt;继续读书(先清库存，再入新书)&lt;/p&gt;
&lt;p&gt;继续搞一些自己想写的代码(路漫漫)&lt;/p&gt;
&lt;p&gt;到某个地方去旅行（不是旅游）&lt;/p&gt;
&lt;p&gt;回学校一趟&lt;/p&gt;
&lt;p&gt;.........&lt;/p&gt;
&lt;p&gt;暂时没想好,想好了就去做，这就够了吧&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;all right!&lt;/p&gt;
&lt;p&gt;再见，2013&lt;/p&gt;
&lt;p&gt;你好，2014&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2014-01-01(刚才又签成2013了.....(╯‵□&amp;prime;)╯︵┻━┻)&lt;/p&gt;
&lt;p&gt;于深圳&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 01 Jan 2014 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2014-01-01:posts/2014/01/01/summary-08-2013end-2014begin.html</guid><category>总结</category></item><item><title>小记-搭建discourse</title><link>http://www.wklken.me/posts/2013/09/14/discourse.html</link><description>&lt;p&gt;早上，花了点时间，在刚买的digital ocean vps上尝试搭建了下&lt;a href="http://www.discourse.org/"&gt;discourse&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;网上的教程N多，最终决定使用官方的搭建 &lt;a href="https://github.com/discourse/discourse/blob/master/docs/INSTALL-ubuntu.md"&gt;教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对我这个ruby盲来说，第一次接触ruby环境，第一个感觉，这安装流程也太TM多了吧，要配的东西老多了，但另一方面，&lt;br/&gt;
也发现，python的环境配置相关的东西，体验上和ruby比起来还是有差距的,&lt;/p&gt;
&lt;p&gt;一个半小时，轻轻松松，也有点莫名其妙，搭建完了&lt;/p&gt;
&lt;p&gt;后端ruby resultful API，我在思考，貌似用Python也可以实现，就是不知道迁移这玩意儿耗时几何，&lt;/p&gt;
&lt;p&gt;研究研究，可以的话用python+flask实现一把&lt;/p&gt;
&lt;p&gt;好了，哥的博客有了discourse，地址 &lt;a href="http://bbs.wklken.me/"&gt;http://bbs.wklken.me&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;后续捣鼓下，研究下ruby&lt;/p&gt;
&lt;p&gt;2013-09-14&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 14 Sep 2013 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2013-09-14:posts/2013/09/14/discourse.html</guid><category>discourse</category></item><item><title>工作两周年小结</title><link>http://www.wklken.me/posts/2013/07/04/summary-07-worktwoyear.html</link><description>&lt;p&gt;两年了，又到了总结的时候，都成习惯了&lt;/p&gt;
&lt;p&gt;从哪说起呢，有点散，有点乱，还有错别字，囧&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;2011年的7月4号，是毕业后工作的第一天&lt;/p&gt;
&lt;p&gt;2012年的7月4号，满一年，记得那天太阳很大，坐在靠窗的位置，外面的天空很蓝，偶尔战斗机飞过，划出一道白，现在偶尔发呆，望着高楼外墙反射的阳光，想着身后是那片橙，那些人&lt;/p&gt;
&lt;p&gt;感谢那些可爱的人:)&lt;/p&gt;
&lt;p&gt;那时候的日子，简单快乐，周一到周五，工作，加加班，晚上回去看看书什么的，周六，有一段时间常来公司，写一些东西，学一些东西&lt;/p&gt;
&lt;p&gt;周日骑车出去溜溜，山里转一圈，然后绕西湖一圈，在湖边静静坐着，回公司蹭蹭水，上上网&lt;/p&gt;
&lt;p&gt;周末的公司，很安静，让人很是怀念，如今，已经没有了那种环境&lt;/p&gt;
&lt;p&gt;那时候的节奏，像在冬天里晒太阳，很幸福，家的感觉&lt;/p&gt;
&lt;p&gt;现在的节奏，像大夏天太阳底下登山，天热山陡，还好风景不错，副本没完，得接着打&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;人，总是在成长，在变化，在思考&lt;/p&gt;
&lt;p&gt;刚入职那会，想着，好好干活，三年后再说，那时候，没想过变化，没想过最终会离职，换了个城市，换了份工作&lt;/p&gt;
&lt;p&gt;美好的日子，总是过得很快，七月，八月，九月，然后到了十月&lt;/p&gt;
&lt;p&gt;十月注定不平静&lt;/p&gt;
&lt;p&gt;参了个会，投了几个，面了几个，拿到offer,交接，离职，离开&lt;/p&gt;
&lt;p&gt;时间，终究没有跨过2到达3&lt;/p&gt;
&lt;p&gt;那段时间，一直在思考一个问题，自己想做的，擅长做的到底是什么&lt;/p&gt;
&lt;p&gt;最终，还是没有想明白，只是摸到点头绪，想到了，便要做决定&lt;/p&gt;
&lt;p&gt;以前认为帮主的follow your heart是很虚的东西，现在想来，有点道理&lt;/p&gt;
&lt;p&gt;花了很长时间，想明白一件事情，也算值得&lt;/p&gt;
&lt;p&gt;I just need to move on.&lt;/p&gt;
&lt;p&gt;很多时候在想，或许不变也不错，熟悉的环境，熟悉的人，熟悉的事&lt;/p&gt;
&lt;p&gt;但是，随着时间的推移，对待问题，事物的看法，总是在变化的，环境虽然不错，但是可能和自身的节奏已经不匹配，或许，需要换个环境了&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;切换，从测试开发，转成了开发，用着喜欢的python，到现在，八个月了&lt;/p&gt;
&lt;p&gt;这八个月，很是漫长，又很是短暂&lt;/p&gt;
&lt;p&gt;身边的人，认识，熟悉，也有离开的&lt;/p&gt;
&lt;p&gt;相识用了很长，离开却只要短短几天&lt;/p&gt;
&lt;p&gt;离职，几天后，飞到另一个城市，入职&lt;/p&gt;
&lt;p&gt;刚开始一周，住在同学那，每天挤公交，哎，记得，装了三天系统，坑爹的联想机器&lt;/p&gt;
&lt;p&gt;后来，花了一天，找了房子，开始了每天地铁的生活&lt;/p&gt;
&lt;p&gt;熟悉环境，重构东西，写新的东西，上线，开始了这里的工作&lt;/p&gt;
&lt;p&gt;过年，回家，你妹的没年假，颇为无奈&lt;/p&gt;
&lt;p&gt;五月份，请了两天假，去海南溜了半圈，想清楚了一些问题&lt;/p&gt;
&lt;p&gt;六月底，公司outing，回厦门逛了两天，当做回家了&lt;/p&gt;
&lt;p&gt;好像流水账，实际上就是，这么，过了八个月&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;这一年变化很多&lt;/p&gt;
&lt;p&gt;开始每天十点上班七点下班的节奏，早睡，然后七点多起来，看书看到八点半，起床然后晃悠悠去上班，地铁三站，十一分钟，加走路，十八分钟&lt;/p&gt;
&lt;p&gt;疯狂买书，书桌上一堆，书架上两层，都是战利品，这几个月啃了一部分，目测这是一年的量，读书是最好的投资，实践中也印证，坚信不疑&lt;/p&gt;
&lt;p&gt;足够强大的执行力和足够高的效率，空出了好多时间，看书，玩，发呆，做一些想做的事情&lt;/p&gt;
&lt;p&gt;开始，逐渐不上csdn了(感觉俩字：浮躁，勿喷，不喜欢负能量，另一个原因是，开始用markdown了)，转小道消息和hacknews（有效信息），qq越用越少，也逐渐习惯上线隐身&amp;hellip;依然每天刷微博，慢慢在翻墙&lt;/p&gt;
&lt;p&gt;再也没没事去公司了&lt;/p&gt;
&lt;p&gt;小黑换mac了，继续倒腾，的确好用&lt;/p&gt;
&lt;p&gt;倒腾了个&lt;a href="https://github.com/wklken/k-vim"&gt;vim&lt;/a&gt;，写了几个东西，开始迁移&lt;a href="http://wklken.github.io/"&gt;博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;写了几天代码，把摩托换iphone了，前两天换的，用着还成，铁杆moto粉变成伪果粉的节奏，想再搞个pad&lt;/p&gt;
&lt;p&gt;也渐渐熟悉了，自己搞定从设计到上线运维这一整套，修复bug，分分钟上线的节奏&amp;hellip;..当然，形成一些好的习惯，开发或者去挖掘了一些好用的东西，提高效率&lt;/p&gt;
&lt;p&gt;相对一年前，算上跳槽的话，工资小提了两次，不算多，每个月依旧很穷的感觉，争取过两月再来一次&lt;/p&gt;
&lt;p&gt;越来越懒了，在这车况太复杂，没有再出去骑过车，只是偶尔徒步到海边逛逛&lt;/p&gt;
&lt;p&gt;看是啃一些原来认为很难很高深的东西，虽然过程有些艰难，但是目测能吃掉，没有什么东西，是轻而易举能得到的&lt;/p&gt;
&lt;p&gt;还有7月第一天，由于所在位置，或者其他原因，反正我不是很明白，很突然的，开始要带人了，五个人的小组，角色变化有点快，顿感压力山大，以前惬意的日子或许不再，需要一段时间好好过渡，发现写代码的时间被压缩了，经常打断处理些其他事情，意味着加会班搞定一些事情，需要再次提升下效率&amp;hellip;..&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;很多东西没有变，或许也改变不了，譬如性格，譬如习惯，譬如外婆红烧肉，很怀念西湖，还有茶馆&lt;/p&gt;
&lt;p&gt;依然会对一些事情有莫名的坚持，这或许是一个码农的固执&lt;/p&gt;
&lt;p&gt;偏执地认为需要去做一些事情&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;两年了，感谢这一路遇到的人，都很nice&lt;/p&gt;
&lt;p&gt;性格内向的我，经常会带来一些困扰吧&lt;/p&gt;
&lt;p&gt;感谢你们，对我的包容，教会了我很多，留下了很多美好的回忆&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;其实有时想想，坚持做一件事情，没有错，但是需要偶尔抬头，看看天空，思考下&lt;/p&gt;
&lt;p&gt;做选择，没有对错，没有后悔的选项，很多时候，只是单选题&lt;/p&gt;
&lt;p&gt;现在想来，一个适合自己的节奏&lt;/p&gt;
&lt;p&gt;无非，一个良性循环&lt;/p&gt;
&lt;p&gt;思考成长，能力效率提升，时间越多，看书生活发呆，思考成长，循环&lt;/p&gt;
&lt;p&gt;无论工作，生活，都需要进入这个状态&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;总感觉自己还很弱，也的确很弱，要变得强力，还需要努力，还需要时间&lt;/p&gt;
&lt;p&gt;需要磨砺自己做事的方法，风格，对待问题的观点，以及同外界交流沟通的能力&lt;/p&gt;
&lt;p&gt;保持简单，保持高效，看很多书，做很多事，把事情做得漂亮，依然是这个目标&lt;/p&gt;
&lt;p&gt;什么时候，才能战斗力爆表呢&lt;/p&gt;
&lt;p&gt;继续思考，继续行走&lt;/p&gt;
&lt;p&gt;吴昆亮&lt;/p&gt;
&lt;p&gt;2013-07-04 00：08&lt;/p&gt;
&lt;p&gt;于深圳&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2013-07-04:posts/2013/07/04/summary-07-worktwoyear.html</guid><category>总结，程序人生</category></item><item><title>shell下小抄速查工具cmdcheatsheet[python实现]</title><link>http://www.wklken.me/posts/2013/05/17/shell-cheat-sheet.html</link><description>&lt;h3 id="github"&gt;github地址&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/cmdcheatsheet"&gt;打开&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_1"&gt;需求&lt;/h3&gt;
&lt;p&gt;最近老是要翻配置文档/wiki/history/笔记/google等等，为的仅仅是拿个服务器地址，或者一个密码，异或一条复杂点常用但懒得打的命令，次数多了自己也烦了，低效耗时，伤不起&lt;/p&gt;
&lt;h3 id="_2"&gt;优化&lt;/h3&gt;
&lt;p&gt;把常用的东西，记不住的东西，写到文本配置里，在shell下通过一个命令+关键字，秒杀获取想要的内容&lt;/p&gt;
&lt;h3 id="_3"&gt;效果&lt;/h3&gt;
&lt;p&gt;&lt;img alt="use_img" src="https://github.com/wklken/gallery/blob/master/tools/cmdcheatsheet.png?raw=true"/&gt;&lt;/p&gt;
&lt;h3 id="_4"&gt;实现方法&lt;/h3&gt;
&lt;p&gt;1.配置文件格式：yaml&lt;/p&gt;
&lt;p&gt;配置关键字，多行内容，读取，用python非常方便&lt;/p&gt;
&lt;p&gt;2.建索引文件cheatsheet.py&lt;/p&gt;
&lt;p&gt;很简单的处理&lt;/p&gt;
&lt;p&gt;3.一键安装文件install.sh&lt;/p&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;h3 id="_5"&gt;后续改进&lt;/h3&gt;
&lt;p&gt;1.模糊匹配&lt;/p&gt;
&lt;p&gt;2.读索引而非每次建索引&lt;/p&gt;
&lt;p&gt;3.更友好的提示方式&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Fri, 17 May 2013 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2013-05-17:posts/2013/05/17/shell-cheat-sheet.html</guid><category>python</category><category>linux</category></item><item><title>写在2012结尾，2013的开始</title><link>http://www.wklken.me/posts/2013/01/02/summary-06-2012end2013begin.html</link><description>&lt;p&gt;本来已经关电脑了，发现似乎落了些什么，想着昨晚似乎没有像以往写下总结，记录一些东西。&lt;/p&gt;
&lt;p&gt;看了下去年的总结: &lt;a href="http://wklken.me/posts/2011/12/31/summary-02-2011end-2012begin.html"&gt;地址&lt;/a&gt;,那时刚工作不久，感觉写的还是很不错的。每每回顾，总感觉过去的自己做得比现在好。难道老了么。。。。。&lt;/p&gt;
&lt;p&gt;既然去年标题，今年也俗一下，写在2012的结尾，2013的开始。虽然是补的。&lt;br/&gt;
思维有些跳跃，很少吃油条，纯粹是跳跃 &amp;gt; - &amp;lt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;这一年做了什么呢？&lt;/p&gt;
&lt;p&gt;十月以前，没日没夜没心没肺开开心心过了玩玩整整的十个月，工作生活学习，充实，开心。&lt;/p&gt;
&lt;p&gt;工作上逐渐熟悉大部分东西了，做事效率什么的也上去了，所以过的也还算轻松。&lt;/p&gt;
&lt;p&gt;工具是提高生产力的方式之一。期间继续捣鼓一些工具脚本，有几个还算满意，有几个折戟沉沙颇为可惜。搞完了vim第一版本配置，搞完第一版alias。搞完了sublimetext2首个配置，开始玩github，dropbox+金山快盘+有道笔记。&lt;/p&gt;
&lt;p&gt;也瞎折腾了一些东西，注册SAE，搞了个开发者身份，迁移东西，搞了自己的域名和博客，瞎折腾。&lt;/p&gt;
&lt;p&gt;然后就是，感觉毕业快一年了，好多东西生疏了，买了几本数据结构和算法的书，同时开始看开放课，博客上也陆续扯了点东西，可惜看着看着直感叹大学白读了。唉。过了那么久，其实剩下的才是真正学到的，忘了的，就忘了吧，最大收获就是，复习后，对很多东西有了重新的认识，会从其他角度来看待问题吧。&lt;/p&gt;
&lt;p&gt;年后回来买了个两轮的车，从此周末的1／2不宅了，每周有了新项目，晨起冲山，每每累趴了，饿过了都暗暗发誓lz以后再也不来了，结果下周末又是屁颠屁颠往山里钻。其实每周出去逛逛挺好，目前深有感触，感觉现在深度宅了，很怀念那段山里的日子。每次从山里出来，无论在哪个口，都习惯性跑西湖边逛一圈，然后回公司蹭个水，上上网。现在回想起来，其实杭州大部分景点都去过了，不过，都是路过.....&lt;/p&gt;
&lt;p&gt;然后，是七月，工作满一周年，一年香是什么感觉呢？不好说，不过很难忘。对自个一年理了理，工作一年也算收获颇多，逐渐适应了那环境和氛围，也认同和接受那里的一切，然后那时候想，接着干，三年醇。哪想，生活总是存在变数的。&lt;/p&gt;
&lt;p&gt;那时候貌似开始要写日报，每天干干活，总要对自己今天做了什么进行思考，然后，想着想着，每天有收获，但是似乎不多，每每对自己说，熟悉了，要有更多的收获，往往比较困难，但是似乎这很难说服自己，有些迷茫吧，不过迷茫归迷茫，生活还得继续，做好当下认为正确的事情。继续埋头捣鼓代码。&lt;/p&gt;
&lt;p&gt;工作也还算顺利，和很多人合作都很愉快，所以效率还好，压力一般，状态不错，很怀念。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;然后，到了十月。&lt;/p&gt;
&lt;p&gt;十月，或者注定不会平静。&lt;/p&gt;
&lt;p&gt;有个大会召开了，然后哥激动地去膜拜了一把大神，虽然是远程视频，回头看看，虽然自己喜欢一样东西，业余搞一搞，用得也还算顺风顺水，但是和专业的一比，微不足道，有种从自我感觉良好直接被打落凡尘的挫败感。&lt;/p&gt;
&lt;p&gt;事实是，这回打击大了..........唉，你妹的纯属自虐。&lt;/p&gt;
&lt;p&gt;前前后后想了几天，发现，目前情况继续下去，永远菜鸟水准，当然，这时候相对比较狭隘吧，只追求技术方面的。&lt;/p&gt;
&lt;p&gt;然后，花了两个钟头，在博客上写了类似自荐的简历，然后扔了出去。&lt;/p&gt;
&lt;p&gt;然后，六天时间，面了三家，都拿到offer。&lt;/p&gt;
&lt;p&gt;然后，是最煎熬的时候，选择，是走，是留，去哪，何去何从。&lt;/p&gt;
&lt;p&gt;我只想说，这五天，是我最煎熬的时刻。&lt;/p&gt;
&lt;p&gt;抉择，总是艰难的吧，这个，真不好选。&lt;/p&gt;
&lt;p&gt;然后，是做决定。&lt;/p&gt;
&lt;p&gt;从开始，到结束，十一天整。&lt;/p&gt;
&lt;p&gt;那句很土的话，我猜得到开始，却猜不到结局。&lt;/p&gt;
&lt;p&gt;决定，总是要做的。唉。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;十一月，是我最后一个月，把离别的愁絮扔到脑后，最后的时光。&lt;/p&gt;
&lt;p&gt;善始善终，不留遗憾，做事原则吧。&lt;/p&gt;
&lt;p&gt;当最后踏出公司，想想要离开自己这熟悉的一切，这里的人，这里的事，心中还是很不舍的。&lt;/p&gt;
&lt;p&gt;这一年，要感谢的人很多，主管，同事，对应的开发.........&lt;/p&gt;
&lt;p&gt;感谢，这里所有的人，所有的一切。&lt;/p&gt;
&lt;p&gt;Thank you , for everything.&lt;/p&gt;
&lt;p&gt;PS：写了一个很长的邮件，回头看了下，有点糗，但是那时心境，也就释然，发了篇博文还被秒杀了，真心不爽，所以决定写到自己的地盘去.........&lt;/p&gt;
&lt;p&gt;第二天，飞机南飘。&lt;/p&gt;
&lt;p&gt;第四天，入职。&lt;/p&gt;
&lt;p&gt;十二月，入职，干活，第一个月还算顺利，该搞定的都搞定了，开始适应吧，每天多出来好几个钟头，却又开始迷茫了，主要原因是不知道怎么花。尼玛没时间迷茫，有时间还迷茫，这叫个什么事呀。&lt;/p&gt;
&lt;p&gt;这几天继续思考吧，好好规划规划时间的花法。&lt;/p&gt;
&lt;p&gt;为何十一月十二月写的那么少，这两个月发生了太多的事情，很多记忆，太过深刻。每每，还没从原来的状态中恢复。&lt;/p&gt;
&lt;p&gt;好吧，我是鸵鸟，在回避一些感觉。&lt;/p&gt;
&lt;p&gt;南下，带了一本相册，几本书，一箱衣服。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;2012&lt;/p&gt;
&lt;p&gt;2012，工作满一年了，收获很多。&lt;/p&gt;
&lt;p&gt;2012，做很多事，见很多人，读很多书，第二个不及格，两外两个勉强80.&lt;/p&gt;
&lt;p&gt;2012，折腾了很多东西，时间有浪费了，也有不浪费的，大多东西没瞎折腾。&lt;/p&gt;
&lt;p&gt;2012，想要做一些事情，跳槽了，告别了一些人，离开了一个地方，到了另一个地方，去做一些事情。&lt;/p&gt;
&lt;p&gt;2012，12月21日，活下来了，说好的末日呢？&lt;/p&gt;
&lt;p&gt;2012，刷微博，看网易成了每天日常，也同步了这一年发生的几乎所有大小事，有丑陋，也有美好&lt;/p&gt;
&lt;p&gt;2012，尾巴，从win彻底迁linux，发现没啥不便，彻底无弹窗广告了.....&lt;/p&gt;
&lt;p&gt;2012，很多事情依旧没有想清楚&lt;/p&gt;
&lt;p&gt;2012，依旧单身，唉&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;最后&lt;/p&gt;
&lt;p&gt;命运感觉是很奇妙的东西，是你决定又不是你决定，就像当年高考差了一分，然后，哥孤身杀到了山东。就像那次去笔试，已然迟到了，但是还是去试了，结果到了杭州，然后是十月，这青黄不接竟然让我面上了，然后来了深圳。&lt;/p&gt;
&lt;p&gt;是你决定，却又不是你决定的东西&lt;/p&gt;
&lt;p&gt;其实，很多时候我在想，自己要什么？而大多数时候，这个问题是无解的，很难明确出一些事情。&lt;/p&gt;
&lt;p&gt;INTJ，注定的独行者，性格如此，别无他法，只能继续。&lt;/p&gt;
&lt;p&gt;做决定，跟着自己内心的直觉走吧，以前感觉乔帮主的follow your heart有点虚，但是实际经历，发现这个很重要，还是那句话，既然选择了远方，便只顾风雨兼程。&lt;/p&gt;
&lt;p&gt;2013，好吧，这是我经历第一个四个数不一样的年。&lt;/p&gt;
&lt;p&gt;90后都出来混职场了，真心觉得老了。&lt;/p&gt;
&lt;p&gt;还没想好，目前挂着Python后台开发的头衔，当然，是初级的，继续搞Python，也要去搞Go，还要去深入linux，总之，这块，很忙。打算自己搞个blog，迁走，更自由吧。另外开始读源码，写些东西，参与开源的项目。然后，要去做题刷题，继续啃书。然后，争取今年不过双十一,目测有点难度的.....&lt;/p&gt;
&lt;p&gt;然后，祝大伙新年快乐吧，今天2号，不算太迟:)&lt;/p&gt;
&lt;p&gt;The end!&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2013-01-02 00:45 于深圳&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 02 Jan 2013 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2013-01-02:posts/2013/01/02/summary-06-2012end2013begin.html</guid><category>总结，程序人生</category></item><item><title>关于测试开发及其他——写在离职之前</title><link>http://www.wklken.me/posts/2012/11/28/summary-05-quitfirstjob.html</link><description>&lt;p&gt;前面&lt;/p&gt;
&lt;p&gt;在入职一周年的时候，写过一些东西，有过一些思考。&lt;/p&gt;
&lt;p&gt;而在一个月前，花了六天，投了下简历，花了五天，思考，抉择。&lt;/p&gt;
&lt;p&gt;虽然要投身入另一个地方，不再搞测试开发，但是，工作十六个月迄今，还是有一些感受的。&lt;/p&gt;
&lt;p&gt;所以，想针对这个，说说一些个人看法，仅供参考。&lt;/p&gt;
&lt;p&gt;（SDET，测试开发，但是貌似实际工作和字面理解还是有些差距的，工作时，角色更像QA+Tester，实际工作中，被称为QA......其实我还是喜欢SDET多些）&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作为测试这一年多（准确来说16个月）：&lt;/p&gt;
&lt;p&gt;有为了赶进度，和开发一起加班到凌晨两点的时候&lt;/p&gt;
&lt;p&gt;有深夜上线，一大早又起来冒烟的时候(冬天很痛苦)&lt;/p&gt;
&lt;p&gt;有要开发帮忙搭环境，拉数据，查问题的时候&lt;/p&gt;
&lt;p&gt;有经历各种问题，挖出一个潜伏很深的bug的时候&lt;/p&gt;
&lt;p&gt;有误提bug导致开发查老半天的时候（面壁面壁）&lt;/p&gt;
&lt;p&gt;有搭环境搭到抓狂的时候&lt;/p&gt;
&lt;p&gt;有为了提高效率（不加班），狂写工具的时候&lt;/p&gt;
&lt;p&gt;也会偶尔测漏，郁闷的时候&lt;/p&gt;
&lt;p&gt;当然，也会吐吐槽，某个项目或某些流程很让人蛋疼&lt;/p&gt;
&lt;p&gt;一年多，经历了很多事情，接触了很多开发，接触了很多测试，无论是开发和测试，都很nice，合作也很愉快，一年多下来，自认做到了&amp;ldquo;靠谱&amp;rdquo;二字，侥幸，一年多经手测试没出过测漏故障。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;关于开发：&lt;/p&gt;
&lt;p&gt;开发，我划分了三类&lt;/p&gt;
&lt;p&gt;一种，完美型，这类开发，对自己要求十分严格，思维严谨，逻辑清晰，严格遵守流程规范，严格自测（或许还懂得测试理论的）。对于这种开发，作为测试对其是十分佩服的，他们的提测近乎完美，文档清晰，从头到尾测试起来效率非常高，提测近于形式。当然，这类开发还是十分少的，大部分是经验丰富而且严格要求自己的开发。&lt;/p&gt;
&lt;p&gt;另一种，次完美型，这类开发，刚刚工作或工作有一段时间，离完美型还有一定距离，（经验问题而非能力问题），在向完美型努力，代码会有bug,规范有不遵守，文档有缺失，等等，但是非常配合测试，测试提的bug等及时修复，文档规范等及时改正，犯过一次的错误后续不会再出现，逐步地完善。合作起来还是非常愉快地，良性循环，逐步提高的过程，随着合作深入，效率不断提高。接触的大部分开发属于此类。&lt;/p&gt;
&lt;p&gt;还一种，新手型，这类开发，大多是新人，对环境流程等等还不熟悉，处于初生牛犊不怕虎的。又分为两种，一种认为不需要测试，另一种认为走走测试流程也还好。无论哪种，第一次提测比较头痛，如果对应开发部门没有新人规范或者没师兄指导的话，提测是属于头痛型甚至灾难型的，一次提测bug频出，频繁触犯规范，狂打包.......一般头痛一次即可，每一个开发都是需要培养的，逐渐就会遵守规范了。&lt;/p&gt;
&lt;p&gt;很幸运，碰到的开发都很nice，非常配合。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;关于测试：&lt;/p&gt;
&lt;p&gt;测试有依赖型和独立型，依赖型过度地依赖开发(只用不学，用过即忘，对开发各种依赖-环境搭建，调试定位等等)，独立型相对独立(接触-请教-学习-实践，自我驱动，独立能搞定大部分东西)。后者我认为才是合格的测试人员，&lt;/p&gt;
&lt;p&gt;这年头，测试不再是所谓的点点鼠标能搞定的&lt;/p&gt;
&lt;p&gt;我们要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对业务熟悉，项目的业务，涉及逻辑，上下游等等&lt;/li&gt;
&lt;li&gt;对代码熟悉，参与code review，读懂各类代码，java/c++/perl/python/shell....同时要懂debug，往往要定位到错误原因&lt;/li&gt;
&lt;li&gt;要会写代码，测试需要各种工具，自动化等等，都需要实现&lt;/li&gt;
&lt;li&gt;对流程规范熟悉，从项目初始介入，到最终上线完成，要制定测试计划，协助和跟进各个环节风险和进度（测试环节在最后，前面环节的失误会影响测试进程及项目主体进度，而且这时候PM往往会压缩测试时间），各种沟通&lt;/li&gt;
&lt;li&gt;会搭环境，sap.apach,nginx,hadoop.....要面对各种千奇百怪的错误异常。&lt;/li&gt;
&lt;li&gt;要会测试理论，进行各种测试（功能性能稳定性黑盒白盒.......），造各种case,模拟各种场景&lt;/li&gt;
&lt;li&gt;要会写文档，会提bug，描述清楚问题....总之，文笔要好，不要求会吟一首好诗，但要会以最简洁的文字描述清楚问题&lt;/li&gt;
&lt;li&gt;要会分配时间，多线程运作......往往开发测试比开始很高的，有时候同时要处理好多事情.....&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;.................&lt;/p&gt;
&lt;p&gt;当然，这些都是需要时间的。&lt;/p&gt;
&lt;p&gt;以及&lt;/p&gt;
&lt;p&gt;测试，需要有足够的细心和耐心，只有忍无可忍的时候，没有无需再忍的时候。(当然，事不过三，过三就是你自个问题了)&lt;/p&gt;
&lt;p&gt;测试，要求什么都要达到一定程度（什么都要会，会到足够用，但也经常被人吐槽什么都会点，什么都不精），测试其实对广度要求来得高些，但其实很多前辈身怀绝技，卧虎藏龙之地。&lt;/p&gt;
&lt;p&gt;测试，有时候想想挺郁闷的，因为我们的目标是没有测试。通过各种方式提高质量，终极目标没有测试一样质量有保证。即，我们的目的是消灭自己。（这个想象就.......）&lt;/p&gt;
&lt;p&gt;测试，还有个很矛盾的问题，一个牛逼的项目，不出问题，好像没你测试什么事，出了问题，却又觉得辜负了这份信任，哎。（这个有些苦逼了）&lt;/p&gt;
&lt;p&gt;测试，还有个问题，就是要全程参与关注流程，必须像一个老妈子一样，事无巨细，关注很多事情......&lt;/p&gt;
&lt;p&gt;测试，有些被动的角色，却要时时掌握主动权，督促开发&lt;/p&gt;
&lt;p&gt;测试，既要和开发保持良好关系，又要坚持自身的原则（不能放水）&lt;/p&gt;
&lt;p&gt;记得在哪听过，代码问题，和测试有毛关系。其实作为测试，存在测试遗漏，无论是否是自身问题，测试都会数省吾身，反省，思考，改进，提高自身及改进流程，防止再次发生。(我不杀伯仁，伯仁却因我而死.......)&lt;/p&gt;
&lt;p&gt;测试，其实有时候是相当累的，项目多的时候，满负荷运转，数量上去了，还得质量保证。但将一个个项目送上线，还是很有成就感的。&lt;/p&gt;
&lt;p&gt;测试，更多的像是幕后全能型选手，操心一切，保证一切ok，一切ok，我们便ok。(你好，我好.............囧)&lt;/p&gt;
&lt;p&gt;其实测试涉及的内容还很多，我只是作为最初级的测试人员，就所做所见写了下.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;关于测试开发关系：&lt;/p&gt;
&lt;p&gt;说说测试和开发的关系。&lt;/p&gt;
&lt;p&gt;记得上次会上，提到测试和开发的关系，有恋爱关系，长辈晚辈关系，敌人关系等等，不同人有不同看法，不同条件也会得到不同结论。&lt;/p&gt;
&lt;p&gt;开发和测试其实是需要磨合的，老开发新测试，开发需要多配合指导一些。新开发老测试，测试需要更花心思督促规范。新开发新测试，都需要多问前辈多思考。老开发老测试，一句你懂的足矣。&lt;/p&gt;
&lt;p&gt;网上看到很多开发吐槽测试或者测试吐槽开发的，其实，这只是其中某一方做得不够好，导致磨合进入恶性循环而非良性循环。&lt;/p&gt;
&lt;p&gt;要保证良性循环，开发在不断提高自身代码质量，测试在不断完善和优化流程规范，提高自身测试相关的素质，保证项目质量，二者配合之下，一个良性循环，开发和测试效率都会大大提高。&lt;/p&gt;
&lt;p&gt;这需要做的，首先还是开发需要积极的态度配合测试，而测试，需要了解开发的习惯，了解对应的项目，读代码，熟悉流程，会环境搭建，熟悉逻辑，测试逻辑，很多都需要在开发的帮助下完成。但这并不是依赖关系，开发教你搭了一次环境，你就要学会搭环境，下次不再麻烦。&lt;/p&gt;
&lt;p&gt;恶性循环往往始于轻视和不配合，开发认为测试不重要，测试吐槽开发不配合，但是测试流程还是要走的，往往结果是，双方效率直线下降，消耗了大量时间和精力。搞完之后，对对方的印象都再次恶化。&lt;/p&gt;
&lt;p&gt;看到有吐槽测试不重要，不需要QA的。&lt;/p&gt;
&lt;p&gt;当然，如果团队都是完美型的选手，再加上某些方法，当然可以。&lt;/p&gt;
&lt;p&gt;但是现实很骨感的，大部分情况是次完美型选手居多，这类情况，QA还是有存在必要的。&lt;/p&gt;
&lt;p&gt;合格的开发+合格的测试 + 良性循环 =  最佳组合&lt;/p&gt;
&lt;p&gt;无论是开发或测试，都会走的更远。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;关于规范：&lt;/p&gt;
&lt;p&gt;很多开发可能吐槽很多规范(代码，打包，流程等等)的形式化or不重要or浪费时间。&lt;/p&gt;
&lt;p&gt;但是，其实这些规范一开始也都是没有的，都是前人一次次踩坑踩出来的。&lt;/p&gt;
&lt;p&gt;存在即合理，该遵守的规范还是不能忽视。但对于流程规范，也没有完全死板硬性要求一定要做什么，根据项目特点，确认某些规范是否适用，是否有改进之处。这并不矛盾，很多规范，有个适用性，很多规范，也是在一步步改进和优化，目的只有一个，提高质量。&lt;/p&gt;
&lt;p&gt;开发和测试或许大目标不一样，但是我们目的只有一个，保证最终产品正常运行。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;关于靠谱：&lt;/p&gt;
&lt;p&gt;要做到&amp;ldquo;靠谱&amp;rdquo;二字，感觉还是有些难度的&lt;/p&gt;
&lt;p&gt;有几类：相当不靠谱，不靠谱，一般靠谱，靠谱&lt;/p&gt;
&lt;p&gt;大多数处于一般靠谱-&amp;gt;靠谱之间，当然，有极少数属于相当不靠谱/不靠谱/靠谱。&lt;/p&gt;
&lt;p&gt;其实，要达到靠谱，需要一个过程，这个过程有快有慢&lt;/p&gt;
&lt;p&gt;大部分都是随经验和能力增长变得靠谱，当然，也有极少数顿悟型的，直接进入靠谱行列&lt;/p&gt;
&lt;p&gt;测试和开发，同样要经历一个过程，逐步&amp;ldquo;靠谱&amp;rdquo;&lt;/p&gt;
&lt;p&gt;是否，我说修复了，一定就是修复了，我说有bug，一定是有问题，我说，我回头check下，一定就check了。&lt;/p&gt;
&lt;p&gt;最给力的，我说，没问题，一定就没问题。&lt;/p&gt;
&lt;p&gt;可以自问下，我靠不靠谱？&lt;/p&gt;
&lt;p&gt;开发最怕改需求(特别是刚写完代码就改)，其实测试最怕提测后改需求（特别是测完的时候）......哎，来来回回尽折腾。&lt;/p&gt;
&lt;p&gt;所以，一群靠谱的人，可以释放超乎想象的能量。&lt;/p&gt;
&lt;p&gt;靠谱的最高境界，或许是把复杂的事情做简单，把简单的事情做好。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;关于选择：&lt;/p&gt;
&lt;p&gt;你为什么选择做测试？&lt;/p&gt;
&lt;p&gt;记得面试的时候被问过这个问题，（那时候是，你为什么选择测试开发？），好吧，当时刚刚毕业的我，实习半年多(Java开发)，那时对测试开发印象模糊，工作半年后才发现，测试比例多一些，和SDET其实还是有些差距的。&lt;/p&gt;
&lt;p&gt;曾经有段迷茫的时候，也被主管问及到底想要做什么，那时候的回答是&amp;ldquo;做当下认为正确的事情&amp;rdquo;，很多事情，没想明白之前，做自己认为正确的事情。&lt;/p&gt;
&lt;p&gt;其实，每个阶段有每个阶段的想法，受到那时经验/阅历/环境的限制，我们做出的决定或许并不是最好的。&lt;/p&gt;
&lt;p&gt;但是，选择没有正不正确，只有后不后悔。&lt;/p&gt;
&lt;p&gt;我当时的选择，我并不后悔，工作后这一年多，很充实，很快乐，这就足够了。&lt;/p&gt;
&lt;p&gt;So,当面临选择时，问下自己，自己是否喜欢？SWOT，分析下&lt;/p&gt;
&lt;p&gt;做出决定，便不后悔。&lt;/p&gt;
&lt;p&gt;既然选择了远方，便只顾风雨兼程。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;SDET，测试开发，我的第一份工作。三天后，我只能说，我曾经是。&lt;/p&gt;
&lt;p&gt;哎，伤感&lt;/p&gt;
&lt;p&gt;最后，在这里，感谢这一年多，一起奋战的同事，谢谢！！！&lt;/p&gt;
&lt;p&gt;：）&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2012-11-28 于杭州&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 28 Nov 2012 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2012-11-28:posts/2012/11/28/summary-05-quitfirstjob.html</guid><category>总结，程序人生</category></item><item><title>入职一周年小结</title><link>http://www.wklken.me/posts/2012/07/04/summary-04-workoneyear.html</link><description>&lt;p&gt;@author: wklken&lt;br/&gt;
@date: 2012-07-04&lt;br/&gt;
@version: 0.1&lt;br/&gt;
@desc: 入职一年，算作小结&lt;/p&gt;
&lt;p&gt;2012-07-04&lt;/p&gt;
&lt;p&gt;皓月当空，很久没有停下来好好望望月。&lt;/p&gt;
&lt;p&gt;从去年毕业入职到现在，正好一周年。&lt;/p&gt;
&lt;p&gt;一年中，不变的很多，改变的也很多。&lt;/p&gt;
&lt;p&gt;记得去年的7月4日，背着包挤公交去入职，认识新同事，打了两个礼拜酱油（熟悉各种...），然后开工。&lt;/p&gt;
&lt;p&gt;上班，培训，上课，写作业，加班，outing,新人秀.......&lt;/p&gt;
&lt;p&gt;回想一年，过得还算充实。&lt;/p&gt;
&lt;p&gt;时间流逝，生活也是一个不断发展的过程，是过程而非结果，这中间，得到什么，失去什么，迷茫，信念，思考，欢乐，失落，看过，走过，遗忘的，铭记的，遇到的事情，见到的人，做过的事，成功的，失败的.......&lt;/p&gt;
&lt;p&gt;人生，就像老天爷起了一个进程，问题是丫永远不知道接下去会干什么，碰到什么，溢出，阻塞，挂起，还是直接被干掉，虽然大部分时间运行稳定，但是很不幸：1，资源是抢占的，2，程序没有经过测试，有bug，而且还不少&lt;/p&gt;
&lt;p&gt;工作后&lt;/p&gt;
&lt;p&gt;工作后，最纠结的是，你不能想在学校那样，随心所欲。我一直认为，学校是人生中停留最最幸福和干净的地方（对比后才知道），但不幸的是，当局者迷，围城，年轻的我们总是想跳出这围城，但，很多东西，都是失去后才觉得美好，所以，珍惜当下吧。不能凭好恶，不能凭心情去做事，很多事情，虽不像不愿，却也需要去面对，去处理，而且要处理得让自己满意。&lt;/p&gt;
&lt;p&gt;另外一个很明显的变化是，上班，你再也没有整整一大段时间去做一件自己想做的事情，上班时间，下班时间，作为IT工程师的我们，还有加班时间（囧），大学或许可以一个礼拜攻完一本书，但是工作后，你会发现，可能一个月才能勉勉强强啃完，时间碎片化，而且每天工作很晚，回来还要做点自己喜欢的事情，生活会相当充实。嘿。看很多书，做很多事。这是我刚入职后不久贴到墙上的，后者不清楚是否足够，幸好前者感觉还是达到。工作后最明显的变化还有一点就是这个，你可以买书，哈哈，不用像大学里，从生活费里省出来。当当，京东各种促销，三百减一百，算下来今年买书估计也有一千，当然，光买不看是件极其败家的事情，算到今天，四十余本，一半杂书，一半技术砖头，都啃得差不多，所获颇多，今年也算没有虚度，算是给自个先投资了。&lt;/p&gt;
&lt;p&gt;工作后，还有一个，就是没有各种假了，没有暑假寒假，一年只有法定假日加上那么可怜的几天年假，上学是偶尔可以翘翘课，上班时却没法翘班，记得刚来时，7点10分起，公交，八点多准时到公司，三个月，风雨无阻，一年后最大的变化是，八点起，接近九点到公司，老油条了.......所谓不打卡，上下班自由，但是事情多的时候，只能悲剧地加班了。刚来那半年，加班比较多，因为各种不懂，不熟悉，但那段时间或许是指数级地上涨，最近加班不多，大部分在做自己想做的事情，却也发现，没压力，动力似乎少了不少，哎。&lt;/p&gt;
&lt;p&gt;很多时候&lt;/p&gt;
&lt;p&gt;很多时候，都在思考，自己想要的是什么，活在这个世上，所追求的是什么？难道简简单单遵循一个模式，这不是我想要的，这个问题思考很久，一直没有想清楚，继续思考中。很多时候，感觉现在得到的似乎并不是自己想要的东西，就像，原本想要一个西瓜，生活return一个苹果回来，想着好歹是个苹果，就接受了。外人看起来很美好，起码你有了个苹果，但苹果是酸是甜，有木有虫子，好不好吃，这是个问题。&lt;/p&gt;
&lt;p&gt;很多时候，困扰我们的，不是我们没有，而是我们拥有的不是我们想要的。&lt;/p&gt;
&lt;p&gt;很多时候，生活不易，冷暖自知。&lt;/p&gt;
&lt;p&gt;一直在想，是不是应该放下所有，去找自己想要的东西。但自己想要的东西，似乎又没想好。这么一个蛋疼的问题，哎。&lt;/p&gt;
&lt;p&gt;每天&lt;/p&gt;
&lt;p&gt;每天依旧跟上学似地，三点一线，完成工作，看书，睡觉，周末敲敲代码，逛逛西湖（去过几次不记得了...）&lt;/p&gt;
&lt;p&gt;每天刷刷微博看看网易新闻（每天的报道都让我感觉这世界快完了........）&lt;/p&gt;
&lt;p&gt;每天逛逛论坛，更新下blog，更新下自己的代码&lt;/p&gt;
&lt;p&gt;这一年&lt;/p&gt;
&lt;p&gt;这一年，工作中同事给予了很多帮助，衷心感谢。&lt;/p&gt;
&lt;p&gt;这一年，开始了思考，学会了如何去解决各式各样的问题。&lt;/p&gt;
&lt;p&gt;这一年，见过靠谱的，不靠谱的，自认自己做到&amp;ldquo;靠谱&amp;rdquo;二字。&lt;/p&gt;
&lt;p&gt;这一年，一起入职的同事走了几个。&lt;/p&gt;
&lt;p&gt;最近&lt;/p&gt;
&lt;p&gt;最近，一直在攻书，感觉有进步&lt;/p&gt;
&lt;p&gt;最近，迷上了骑行，每周五十公里（周末，平常上班6&lt;em&gt;2&lt;/em&gt;5=60，上班有点远）&lt;/p&gt;
&lt;p&gt;最近，最幸福的时候，便是周末，泡杯清茶，放段音乐，看书or敲代码or思考，安安静静地。远离喧嚣的外界，思考。&lt;/p&gt;
&lt;p&gt;列了20个自己想去的地方，列了20个自己会实现的目标。&lt;/p&gt;
&lt;p&gt;未来是个未知数，在思考，在前进，一年后会是怎么样我不清楚，但我相信可以达到目标，一步一个脚印。&lt;/p&gt;
&lt;p&gt;几点，权作小结：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要主动。做任何事情，多要主动，不要被动地放任事情发展，否则最后悲剧的往往是你；&lt;/li&gt;
&lt;li&gt;站在别人的角度思考和沟通；&lt;/li&gt;
&lt;li&gt;事不过三，发生一次，可以，两次，忍了，三次，决不允许；&lt;/li&gt;
&lt;li&gt;学会拒绝，大包大揽老好人是不行的，严格遵循原则，否则，悲剧的肯定是你（加班&amp;amp;背锅，对谁都不好）&lt;/li&gt;
&lt;li&gt;学习&amp;amp;思考，做靠谱的人，你对所做事情的学习和思考，决定了你是不是变得越来越靠谱，也决定了你是工作一年有三年经验，还是工作三年有一年经验；（干IT的毕业一年经验一年半，加班加的）&lt;/li&gt;
&lt;li&gt;没有大事，没有小事，认认真真做事，淡定严谨&lt;/li&gt;
&lt;li&gt;读书&amp;amp;尝试新事物&amp;amp;使用工具&lt;/li&gt;
&lt;li&gt;锻炼身体&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The End!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2012-07-04:posts/2012/07/04/summary-04-workoneyear.html</guid><category>总结，程序人生</category></item><item><title>数据结构&amp;算法实践-Python——序章</title><link>http://www.wklken.me/posts/2012/05/10/python-ds-01-start.html</link><description>&lt;p&gt;很久很久之前的blog，没写完的系列，当时想写完来着，有点用，先转过来&lt;/p&gt;
&lt;p&gt;数据结构&amp;amp;算法实践&amp;mdash;&amp;mdash;Python&amp;nbsp;&lt;/p&gt;
&lt;p&gt;--------------------------------------目录 START------------------------------------------------&lt;/p&gt;
&lt;p&gt;第一部分列表(目录主要来自于维基百科)&lt;/p&gt;
&lt;p&gt;模块一：经典排序实现&lt;/p&gt;
&lt;p&gt;交换排序法&lt;/p&gt;
&lt;p&gt;冒泡排序&amp;nbsp;|鸡尾酒排序&amp;nbsp;|奇偶排序&amp;nbsp;|梳排序&amp;nbsp;|地精排序(gnome_sort)&amp;nbsp;|Bogo排序|快速排序&lt;/p&gt;
&lt;p&gt;选择排序法&lt;/p&gt;
&lt;p&gt;选择排序 | 堆排序&lt;/p&gt;
&lt;p&gt;插入排序法&lt;/p&gt;
&lt;p&gt;插入排序 | 希尔排序 | 二叉查找树排序 | Library sort | Patience sorting&lt;/p&gt;
&lt;p&gt;归并排序法&lt;/p&gt;
&lt;p&gt;归并排序 | Strand sort&lt;/p&gt;
&lt;p&gt;非比较排序法&lt;/p&gt;
&lt;p&gt;基数排序 | 桶排序 | 计数排序 | 鸽巢排序 | Burstsort | Bead sort&lt;/p&gt;
&lt;p&gt;其他&lt;/p&gt;
&lt;p&gt;拓扑排序 | 排序网络 | Bitonic sorter | Batcher odd-even mergesort | Pancake sorting&lt;/p&gt;
&lt;p&gt;低效排序法&lt;/p&gt;
&lt;p&gt;Bogosort | Stooge sort&lt;/p&gt;
&lt;p&gt;模块二：经典查找&lt;/p&gt;
&lt;p&gt;模块三：数据结构(后续补充完整，树和图是大头，包含很多分类和经典算法)&lt;/p&gt;
&lt;p&gt;线性表 &amp;nbsp; 队列 &amp;nbsp; 栈 &amp;nbsp; 堆 &amp;nbsp; 树 &amp;nbsp;图&lt;/p&gt;
&lt;p&gt;--------------------------------------目录 END------------------------------------------------&lt;/p&gt;
&lt;p&gt;写在前面&lt;/p&gt;
&lt;p&gt;毕业迄今也接近一年了，发现很多学校的东西似乎生疏了.&lt;/p&gt;
&lt;p&gt;最近重新拿起数据结构，算法导论，离散数学，决定用代码敲些东西，权当复习&lt;/p&gt;
&lt;p&gt;大部分的地方我只会给出例子和具体的代码实现，顺带给出一些百科的链接，概念和理论性的东西网上都有，不赘述了&lt;br/&gt;
&lt;br/&gt;
之所以选择用python来写，主要是python的可读性非常好，即使不写注释，也能很轻松读懂.&lt;/p&gt;
&lt;p&gt;我把这个过程大概切成三个部分：&lt;/p&gt;
&lt;p&gt;1.经典数据结构和算法的实现&lt;/p&gt;
&lt;p&gt;实现基本的经典算法，包括经典排序，经典查找，索引等，基本实现及改进&lt;/p&gt;
&lt;p&gt;实现基本的数据结构，包括线性表，队列，栈，堆，树，图等，包含扩展&lt;/p&gt;
&lt;p&gt;使用实现类似Java的数据结构，至始至终都认为java的api最为优美，使用Python实现之，包括Map,List,Set等，提供相同的API，同时希望会循序渐进，先用简单直观的方法实现，给出优化，涉及的知识主要是python面向对象，继承，重写内置方法，封装，（要对Python和java数据结构实现的底层源码有了解，需要看源代码）&lt;/p&gt;
&lt;p&gt;2.笔试题面试题数据结构和算法实现&lt;/p&gt;
&lt;p&gt;笔试&amp;amp;面试题的python处理&lt;/p&gt;
&lt;p&gt;使用Python搞定笔试题&amp;amp;面试题中出现的算法和数据结构题目&lt;/p&gt;
&lt;p&gt;包含大规模数据处理的详细例子&lt;/p&gt;
&lt;p&gt;3.challenge&lt;/p&gt;
&lt;p&gt;挑战一些大个的东西，深入实现一些较为复杂的算法&lt;/p&gt;
&lt;p&gt;不罗嗦，先列下目录，已经写完一部分了，逐步发出来，更新目录(挪到前头去了)&lt;br/&gt;
&lt;br/&gt;
先列这些，逐渐补充.&lt;/p&gt;
&lt;p&gt;每天上完班回来，啃这堆砖头，然后敲出来，累却充实.&lt;/p&gt;
&lt;p&gt;敲代码，调试代码其实是一件十分快乐的事情&lt;/p&gt;
&lt;p&gt;My daytime job is SDET,平时敲自己喜欢的代码的时间并不会太多，业余时间有限&lt;/p&gt;
&lt;p&gt;但做事贵善始善终，会坚持搞完的哈!&lt;br/&gt;
&lt;br/&gt;
The End!&lt;/p&gt;
&lt;p&gt;wklken@yeah.net&lt;/p&gt;
&lt;p&gt;2012-05-10&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Thu, 10 May 2012 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2012-05-10:posts/2012/05/10/python-ds-01-start.html</guid><category>python-ds-algorithm</category></item><item><title>Python读取修改ini配置文件[ConfigParser]</title><link>http://www.wklken.me/posts/2012/02/19/python-ini-configparser.html</link><description>&lt;p&gt;使用到的包：ConfigParser &lt;a href="http://docs.python.org/2/library/configparser.html"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码托管位置 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_1"&gt;需求&lt;/h3&gt;
&lt;p&gt;写个项目，用到数据库，多个地方使用，不能硬编码。很类似java的properties文件&lt;/p&gt;
&lt;p&gt;Python支持ini文件的读取&lt;/p&gt;
&lt;h3 id="ini"&gt;ini文件&lt;/h3&gt;
&lt;p&gt;db_config.ini&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[baseconf]&lt;/span&gt;
&lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;127.0.0.1&lt;/span&gt;
&lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;3306&lt;/span&gt;
&lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;root&lt;/span&gt;
&lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;root&lt;/span&gt;
&lt;span class="na"&gt;db_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;evaluting_sys&lt;/span&gt;
&lt;span class="k"&gt;[concurrent]&lt;/span&gt;
&lt;span class="na"&gt;processor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_2"&gt;示例代码&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;#author: lingyue.wkl&lt;/span&gt;
&lt;span class="c1"&gt;#desc: use to db ops&lt;/span&gt;
&lt;span class="c1"&gt;#---------------------&lt;/span&gt;
&lt;span class="c1"&gt;#2012-02-18 created&lt;/span&gt;
&lt;span class="c1"&gt;#---------------------&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ConfigParser&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_file_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;cf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ConfigParser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConfigParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sections&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'section:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;

    &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"baseconf"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'options:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;

    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"baseconf"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'db:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;

    &lt;span class="n"&gt;db_host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"baseconf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"host"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;db_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"baseconf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"port"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;db_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"baseconf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"user"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;db_pwd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"baseconf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;db_host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db_port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db_pwd&lt;/span&gt;

    &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"baseconf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"db_pass"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"123456"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"config_file_path"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"../conf/db_config.ini"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="init_oppy"&gt;通用模块init_op.py&lt;/h3&gt;
&lt;p&gt;支持命令行+import两种&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;#author: lingyue.wkl&lt;/span&gt;
&lt;span class="c1"&gt;#desc: use to read ini&lt;/span&gt;
&lt;span class="c1"&gt;#---------------------&lt;/span&gt;
&lt;span class="c1"&gt;#2012-02-18 created&lt;/span&gt;
&lt;span class="c1"&gt;#2012-09-02 changed for class support&lt;/span&gt;
&lt;span class="c1"&gt;#---------------------&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ConfigParser&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ConfigParser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConfigParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;cf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ConfigParser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConfigParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;cf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ConfigParser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConfigParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="n"&gt;config_file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
   &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;read_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;write_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 19 Feb 2012 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2012-02-19:posts/2012/02/19/python-ini-configparser.html</guid><category>python</category><category>ini</category></item><item><title>半年工作成长小结</title><link>http://www.wklken.me/posts/2012/02/05/summary-03-workhalfyear.html</link><description>&lt;p&gt;自去年毕业工作至今，满打满算，七个月&lt;/p&gt;
&lt;p&gt;这七个月思考不断接触新的东西，学习很多，思考很多，却也依旧很是迷茫&lt;/p&gt;
&lt;p&gt;很多问题还没想好，所以，继续思考&lt;/p&gt;
&lt;p&gt;收获还是很多的，主要是一些前辈的建议&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;技术与业务的关系？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A. 业务是目的，技术是手段。要在业务的设计开发中沉淀出通用的技术产品，要不断了解出现的技术，是否能为我所用，形成敏锐的判断力&lt;/p&gt;
&lt;p&gt;B. 业务分析能力更多的是经验、思考和坚持&lt;/p&gt;
&lt;p&gt;C. 技术研究与创新要与团队的整体目标紧密相连，才能得到更好地认同和发展&lt;/p&gt;
&lt;p&gt;刚毕业，对于技术，还是相当有热情的，理所当然，所谓的业务在心里的占比，就不是那么大了。去啃shell，啃python，回过头来发现似乎不太对劲。&lt;/p&gt;
&lt;p&gt;对于这几点，迄今还不是很能理解。起码对技术热情依然盖过了业务。&lt;/p&gt;
&lt;p&gt;很多问题，需要去深入学习和思考，或许只能慢慢来&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要形成自己的知识体系&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;术业有专攻，东西那么多，人的精力总是有限的，需要对自己整体的技术体系和业务体系有一个规划，形成体系。&lt;/p&gt;
&lt;p&gt;盲目通吃，多而不精，浅尝则止，是不行的&lt;/p&gt;
&lt;p&gt;单点 到 网络 再到体系&lt;/p&gt;
&lt;p&gt;规划下目标，实现之&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;成长的过程就是进步&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A.形成自己的思想，自己的知识体系&lt;/p&gt;
&lt;p&gt;B.形成自己的做事方法和风格&lt;/p&gt;
&lt;p&gt;C.建立自己对事情的评判标准&lt;/p&gt;
&lt;p&gt;这是一个迭代的过程，需要自己不断去摸索和改进&lt;/p&gt;
&lt;p&gt;目前自己方法和风格刚刚雏形，所谓一步一个脚印，还是那句话，思考&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;多思考和分享，在不断分享中接受挑战，完善自己的思路&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更加开放的心态，乐于接受新的事物，乐于接受不同的意见&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;忙不是成长的绊脚石，而是助推器，想方设法（技术方案，工具，解决方法），解决那些耗费时间的，机械性的工作，变得不忙，便是成长。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我按照这个原则这么做的，结果发现，效率上去了，活也变多了，总体工作时间几乎没被降下来&lt;/p&gt;
&lt;p&gt;加班，依然如故。所谓能力越大责任越大，同理，效率越高，活也越多&lt;/p&gt;
&lt;p&gt;不过需要继续改进，为了不加班，继续努力改进&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;成长是长跑，持久的坚持是最基本的前提&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;坚持，总之，需要形成好的习惯&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;多看多问，求甚解&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从小事做起，主动承担，学习推动事情的发展，并解决之&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;停止抱怨，主动改变现状，很多事情，都不是问题&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;开始抱怨的时候，就是问题出现的时候，想办法解决之&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;学会规划，也要学会量化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;记录于此&lt;/p&gt;
&lt;p&gt;刚来，资源紧张，连续加了三个月班，然而，资源总是紧张滴，所以，要从自己，从流程上，不断审视，思考，优化和改进，提高自己的效率&lt;/p&gt;
&lt;p&gt;虽然现在还是得加班，但是，毕竟机械性重复性劳动全部秒杀掉了，不用那么苦逼了&lt;/p&gt;
&lt;p&gt;效率提高，意味着有更多时间学习想学的东西，然后再次提高效率，良性循环&lt;/p&gt;
&lt;p&gt;以上很多事这半年来各位前辈给的建议，也供大家参考吧&lt;/p&gt;
&lt;p&gt;虽然很多还需要继续思考，例如依旧偏执地将技术放在首位，例如为啥效率提高那么多还需要加班，&lt;/p&gt;
&lt;p&gt;例如为啥那么苦逼，例如怎样才能不苦逼&lt;/p&gt;
&lt;p&gt;继续思考，但是不要停下来，即使还没想清楚，即使依旧迷茫&lt;/p&gt;
&lt;p&gt;做当前正确的事情&lt;/p&gt;
&lt;p&gt;写年度规划去鸟，提前祝大伙元宵快乐&lt;/p&gt;
&lt;p&gt;2012-02-05&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 05 Feb 2012 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2012-02-05:posts/2012/02/05/summary-03-workhalfyear.html</guid><category>总结，程序人生</category></item><item><title>写在2011的结尾，2012的开始</title><link>http://www.wklken.me/posts/2011/12/31/summary-02-2011end-2012begin.html</link><description>&lt;p&gt;写在2011的结尾，2012的开始&lt;/p&gt;
&lt;p&gt;2011-12-31 22:50&lt;/p&gt;
&lt;p&gt;今天是2011的最后一天。&lt;/p&gt;
&lt;p&gt;本来已经绝了写点东西的念头，但是想想，还是写点东西吧，算是对过去一年的一个总结吧。&lt;/p&gt;
&lt;p&gt;有点长，估计得写到明年才能写完&lt;/p&gt;
&lt;p&gt;从哪开始呢&lt;/p&gt;
&lt;p&gt;还是从头来吧&lt;/p&gt;
&lt;p&gt;2010年最后一天，也就是去年的今天，我正在北京，什么区来着，额，丰台区，四环外的一个小区，程庄路程庄北里八号楼，一个半地下室，和同来实习的一群哥们在一起。&lt;/p&gt;
&lt;p&gt;那时候实习，是来学校招的，大三时候也没想太多，面上了便来了。七八个人住半地下室，刚来第一个月是培训，什么都不管，早上五点半起，倒两个小时车，到北三环学院路一个大厦里上课，一天的课，那时起，对北京4毛的公交印象深刻，对一堵堵成列车的公交迄今难忘。&lt;/p&gt;
&lt;p&gt;上课那段只是复习而已，个人而言，还没自己看十天书敲十天代码来得强，主要是快餐式地灌输J2EE快速开发的一些内容，当然，也学到了不少东西，起码在学校接触不到。&lt;/p&gt;
&lt;p&gt;那时候，没想那么多，实习而已嘛，没想到我们几个实习生却承担了很大部分的工作，当做正式员工使，每天很忙，上班，吃饭，加班。印象里有几回凌晨两三点回去，满大街清冷，只有黑的不时靠上来问是否要打车。&lt;/p&gt;
&lt;p&gt;上班，加班，轮回，但每周固定回去超市，我主要是买一周的补给。每周去一次超市，这个习惯，那时候养成。迄今保留。逛超市是件令人愉快的事情，虽然俺是效率派，去两三次之后彻底摸清货架，之后每次都是直达目的。&lt;/p&gt;
&lt;p&gt;突然很怀念那段日子，不用想太多，除了干活，睡觉，偶尔出去聚一聚，奢侈一把。一群人。&lt;/p&gt;
&lt;p&gt;天下没有不散的宴席，先是培训结束后，分到了不同项目组，然后，又是陆续离开了公司。&lt;/p&gt;
&lt;p&gt;快到年前的时候，只剩下我一个人呆在宿舍，很是凄凉。&lt;/p&gt;
&lt;p&gt;看过电影的快放没，一大群人拖着行李到了这个地方，一起生活，一起去上班，一起下班，做饭，吃饭，热热闹闹，然后，然后，一个个离开，到最后剩下你一个人。&lt;/p&gt;
&lt;p&gt;实习的公司不大不小，最后我的感想：人很好，体制不行。的确，里面每个人都很好，很友善，那是我们刚踏入社会，虽然是半只脚，从他们身上，我学到了很多东西，我进的第一个项目组已经进入了维护期，所以也没什么事情，领了一台电脑，也没什么事干，前后经理就扔了两个任务给我。那一个月，却是感觉敲代码那么久第一次有了提升的感觉，一个月，new了一个java project，从无到有，搭建出了那个项目现有使用的基本框架，对还是菜鸟的我，开始感觉有点进步了，后台java-&amp;gt;hibernate-&amp;gt;mysql,前台完全是freemarker模板。也摸到点感觉，仿着写了一个。然后的然后，没然后了，我被一个电话借走，一个全国邮政的项目，慧哥是我们几个实习生的TL，那段时间还是很累的额，一周六天班，周一三五晚上必须加班，因为模板化了，每个人负责部分都是从前台到后台一路打到底，期间维护了所有的公有代码，以及对现有框架进行重构和升级。那七个月，过得也算充实，期间主要接触oracle，还有需求方来的各种苦逼的更改和要求，也开始以另一种角度看自己的代码。&lt;/p&gt;
&lt;p&gt;之后，因为各种原因，实习生相继离开了。最后组里就剩三个人，记得有一次整层楼都我一个人，那种感觉。那段时间，一个人当几个使，要cover所有人的bug，要写程序搞定的上线初始化数据，那时候还不会脚本，对linux木有概念，用的是java+第三方开源jar包，现在那个系统用的数据批量导入还是java+poi用annotation搞定的通用数据处理。当晚上回到宿舍只有自己一个人，一天可能除了接几个电话处理问题，找不到任何人说话。这种状态，直到快过年前两天才结束。因为，我也选择了离开。&lt;/p&gt;
&lt;p&gt;做出这个决定其实挺难的，当时经理找我谈过几次，问过我想做什么，其实，那时候出学校实习，七个月，没有仔细想过要做什么。真让我想想，要做什么？那时候才发现，自己也不知道。这个问题我思考了接近三个月，自己想做什么，究竟喜欢做的是什么？&lt;/p&gt;
&lt;p&gt;结果，没想通。&lt;/p&gt;
&lt;p&gt;呵呵，很多问题，那时候是搞不懂的，所谓历史局限性。&lt;/p&gt;
&lt;p&gt;很多问题，现在也还不懂。&lt;/p&gt;
&lt;p&gt;思考了很久，做出了决定。&lt;/p&gt;
&lt;p&gt;没想出来的问题，接着想，但是，必须做出决定，做当下正确的事情，起码自己认为正确的事情。这是我的原则。&lt;/p&gt;
&lt;p&gt;做了决定，却没有立刻走，做一件事情，善始善终，这也是我的原则。&lt;/p&gt;
&lt;p&gt;一直cover掉所有东西，过年了，才向经理道别。&lt;/p&gt;
&lt;p&gt;南下的飞机，离开的那时，我对自己说，京城，俺还会回来的。&lt;/p&gt;
&lt;p&gt;然后，最后终是没有回去。&lt;/p&gt;
&lt;p&gt;过年，一家人团聚，这年有大事，老姐嫁人了，呵呵。&lt;/p&gt;
&lt;p&gt;日子一天天过去，那段时间，压力其实挺大的，因为校招在年前已经结束了，很多同学已然定下了，考研，考公务员，工作，等等。而自己，还未定。&lt;/p&gt;
&lt;p&gt;所以，年后匆匆，再次北上，这次目的很明确，找工作。&lt;/p&gt;
&lt;p&gt;到了北京，雪还未化去，而我，开始了为期一个月最精彩的日子，酸甜苦辣，尽在其中，压力山大，那段时间，经历很多，也学到很多。&lt;/p&gt;
&lt;p&gt;面了很多公司，基本都拿到offer，却迟迟没有决定，因为一个问题，还是那个问题，你到底想做什么？&lt;/p&gt;
&lt;p&gt;前半月，基本晚上投简历，白天出去笔试和面试，有的效率比较高，一路到底给结果，慢的也就隔几天，因为校招已经结束，这时候还是相当难找的，只能参加各个社招。有一次面一非常想去的公司，终面挂了，有一次去了才知道，要找有三年经验的，结果人事MM拉我简历过去了，败得一塌糊涂。&lt;/p&gt;
&lt;p&gt;面试的好处是，搞定笔试后可以直接接触到面试官，再次感谢所有面过我的面试官，从中学到了很多东西，对某些事情的看法，对技术的观点，解决问题的思路，以及我自身的短板和不足。面试其实是一件很有意思的事情，你不知道对方是谁，会问什么问题，关注什么，同样，他也不知道你是何许人也，一个小时，两个小时谈下来，其实，可以看到自己很多看不到的东西。&lt;/p&gt;
&lt;p&gt;下半月，前半月的顺利就此截止，拿到很多offer, 有的还好，没有要求立刻答复，有几个给了一个礼拜，有一个给了两天。期限在这时候到来，意味着我必须做出决定。选择什么？&lt;/p&gt;
&lt;p&gt;很多时候，抉择是困难的，特别是难以抉择的时候&amp;hellip;&amp;hellip;囧，有点绕&lt;/p&gt;
&lt;p&gt;这时候，已然开学很久，某天收到华为短信，才发现跑我们学校招去了，问了下同学，基本都定下了，就剩我了&amp;hellip;&amp;hellip;..这时候，方知何为压力。&lt;/p&gt;
&lt;p&gt;对付压力的办法，睡觉！&lt;/p&gt;
&lt;p&gt;对我来所蛮有效的方法，对付搞不定的事情，好好睡一觉，第二天满状态再去搞。&lt;/p&gt;
&lt;p&gt;至于那个问题，我想做的是什么？起码不想做重复枯燥无意义的因为体制导致的无法优化的重复性劳动【这基本就是我实习的状态】&lt;/p&gt;
&lt;p&gt;评估以后，去掉了一半，然后，想做什么？有活力，比较自由，可以通过自己代码看到效果的，不会因为体制原因导致重复劳动的，好吧，没有了。&lt;/p&gt;
&lt;p&gt;思考了两天，当然，期限的最后一天。打电话，一个个回复了。把所有的都拒掉了。然后，重写简历，重新开始。&lt;/p&gt;
&lt;p&gt;做自己认为正确的事情。&lt;/p&gt;
&lt;p&gt;笔试，面试，奔走于北京各个角落，地铁，公交，记忆里那常常坐的390.额，面的倒数第二家公司，就是我现在在的，笔试只有三道题，迄今做题最少的一次，半小时，当时大致看了下休息区，椅子很舒服。面试的时候，一点半进去，四点半出来，三面，简历，问题，项目，写写画画，映像很深的是第一面时画了整整两页，第三面坐在二十五楼临窗，看下去很壮观。后来又参加了几个公司在学校里的校招，见识过管培生与技术同时笔试时五百比二十的场面，话说那次笔试题起码三个小时的量，给了一个半小时，涉及各种，答到手酸。&lt;/p&gt;
&lt;p&gt;然后，事情还算顺利，顺利拿到offer，很多通知面试的也就没去了。没有选择去实习，因为经历了这几个月，分外珍惜学校的日子。&lt;/p&gt;
&lt;p&gt;最后，拖着行李箱，关上了那扇门，南下回校。&lt;/p&gt;
&lt;p&gt;既然选择了远方，便只顾风雨兼程。这是我初中英语老师送的一句话。&lt;/p&gt;
&lt;p&gt;回学校的日子，仿佛却又是另一个世界，没有任何压力。那时候已然知道离别的日子将要到来，一天天数着日子。&lt;/p&gt;
&lt;p&gt;泡图书馆，上自习，还有，就是敲代码。那时候宿舍哥们都去打篮球，打累了差不多到饭点了打个电话呼我下去，一起校外去吃饭。那时候会去跑步，跑了两次，发现坚持不了，也发现身体是该锻炼地。&lt;/p&gt;
&lt;p&gt;最后，毕业季，散伙饭，然后，各奔东西。&lt;/p&gt;
&lt;p&gt;送走一个个同学，然后，再被同学送走。&lt;/p&gt;
&lt;p&gt;美好的时光总是短暂，怀念一起的日子，虽然平淡，但是，那种日子再也没有了。&lt;/p&gt;
&lt;p&gt;然后，就是来到杭州，开始新的篇章。&lt;/p&gt;
&lt;p&gt;话说六个月了，这篇章书写的，并不是十分满意吧。&lt;/p&gt;
&lt;p&gt;本身，话比较少，额，周围人应该都能感受。性格使然，用别人对我的评价就是，性格偏冷。&lt;/p&gt;
&lt;p&gt;性格偏内向，所以或许会给大家带来一些困扰，十分抱歉。&lt;/p&gt;
&lt;p&gt;迄今六个月，linux从一点概念都木有，到现在稍微有点概念，摸到门槛，python，也是从无到有，好歹想做什么就写什么。对测试，也逐渐了解和深入，技术活，而且还挺难。&lt;/p&gt;
&lt;p&gt;六个月，形成了一套自己的工具体系，例如dropbox，有道笔记,chrome及各种插件，桌面工具，开发工具等等，有了一整套，效率，提高很多。&lt;/p&gt;
&lt;p&gt;六个月，写了很多脚本，根据事不过三的原则，对每一个项目测试进行一轮轮优化，力求达到最快速高效准确地搞定任务。唯一苦逼的是平时木有什么时间写脚本，周末偶尔写写，还得自己测，貌似组里就我一个用python,也就意味着写完就自个用。&lt;/p&gt;
&lt;p&gt;六个月，看了很多文章，很多书，对很多东西有了新的认识，继续，视野需要拓展。&lt;/p&gt;
&lt;p&gt;六个月，唯一遗憾就是放掉了java,用了三年多，记得时隔几个月再一次打开eclipse时，激动了一把，虽然现在拿来写python&amp;hellip;&amp;hellip;.发现学完java,python基本不难接受。&lt;/p&gt;
&lt;p&gt;六个月，还是没有很好地形成自己的做事风格，当然，学会承诺并兑现自己的承诺，承诺做过什么，一定尽全力做好。好，好的，额，ok，没问题，我会去&amp;hellip;.。这是我的承诺，我会做好。算是风格部分，需要更多的东西。&lt;/p&gt;
&lt;p&gt;六个月，还是没有学会更好的沟通，这个需要加强的，清楚的表达意思。&lt;/p&gt;
&lt;p&gt;六个月其实经历了很多事情，很多事，都需要去学习，经历过一次，便掌握之，不需要第二遍。第二遍就是轻车熟路了，这或许是这六个月做的还算不错的地方。&lt;/p&gt;
&lt;p&gt;绝对不在同一个地方摔倒两次。&lt;/p&gt;
&lt;p&gt;至于明年，额，淘宝上搞了张船票，O(&amp;cap;_&amp;cap;)O~。&lt;/p&gt;
&lt;p&gt;额，对了，是今年了，规划，还在思考，需要继续深入学习很多东西，想写个工具库，自己用也好，把流程最优化，提高效率才是王道。想好了自己规划，一步步执行。&lt;/p&gt;
&lt;p&gt;2011，难忘的一年，实习了，毕业了，工作了，写过很多代码，看过很多书，见过很多人，去过很多地方，做过很多事，想过很多问题，很多问题依旧没有想通。&lt;/p&gt;
&lt;p&gt;还算充实。&lt;/p&gt;
&lt;p&gt;我给自己大学四年的评价，有遗憾，无后悔。&lt;/p&gt;
&lt;p&gt;我给自己2011年评价，无遗憾，无后悔，继续。&lt;/p&gt;
&lt;p&gt;2012，继续努力&lt;/p&gt;
&lt;p&gt;Be good，do right!&lt;/p&gt;
&lt;p&gt;感谢所有人！&lt;/p&gt;
&lt;p&gt;The end of summary&lt;/p&gt;
&lt;p&gt;just the beginning of 2012.Happy new year.&lt;/p&gt;
&lt;p&gt;2012-1-1 1:31 于杭州&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 31 Dec 2011 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2011-12-31:posts/2011/12/31/summary-02-2011end-2012begin.html</guid><category>总结，程序人生</category></item><item><title>虽有遗憾，不曾后悔——写在离校之前</title><link>http://www.wklken.me/posts/2011/06/18/summary-01-leaveschool.html</link><description>&lt;p&gt;即将离开学校了，突然想写点什么，既然是CSDN，就写写这四年是咋过的吧。&lt;/p&gt;
&lt;p&gt;高考一分之差，错过了自己报的本省大学，机缘巧合，补录到了离家两千多公里外的这个大学。&lt;/p&gt;
&lt;p&gt;大一，只身北上，两千五百多公里，二十七个钟头火车，来到了学校。&lt;/p&gt;
&lt;p&gt;话说那时候挺猛，一个人杀到学校注册，结果到的时候发现就自己是一个人来的，囧。&lt;/p&gt;
&lt;p&gt;注册，军训，然后开始了正儿八经的大学生活。&lt;/p&gt;
&lt;p&gt;大一，中规中矩，大一教的编程语言是Java，其实一直到现在对这个一直抱有怨念，坑爹的应该教C才对。虽然简单易学，但是毕竟属于比较非底层的语言。但毕竟有自己的优点，也就是那时候，开始使用Java。&lt;/p&gt;
&lt;p&gt;记得那时候的实验课，是感觉最具有挑战性的，题目都是实验老师临时出的，一晚上一个，做出来交上就完事，呵呵，记得写print第一个画图形的程序花了两个多钟头，还记得另一个写日历程序，那时候压根还不知道Java自带的日历，坑爹的拿纸整整演算了两大页，用算法愣是搞出来了。呵呵，回头看，似乎没啥，但是人总是存在一个成长的过程，经历了。&lt;/p&gt;
&lt;p&gt;晕晕乎乎，把Java学完了，那时候做习题，以及考试，都是用手写代码，总算是培养了个好习惯，手写最高境界是一口气写完，木有涂改，然后肯定地说：这段代码木有问题！呵呵，后来和同学合作写东西，压根没有测试环境，只能说说实现，然后各自去写，凭&amp;ldquo;臆想&amp;rdquo;去规划书写代码，然后最后整合起来再进行测试。&lt;/p&gt;
&lt;p&gt;大一的高等数学，以及后来的概率统计，数值计算，离散数学，线性代数等等数学课程，刚开始可能觉得没啥，写个程序不会用到多少，但是由于大一自己不知道学了有没有用，索性就好好学，所以基础还是不错的，其实，数学学好，无形中思维上，以及算法，代码等等都有很强的提高。所以，或许暂时用不上，但是好好学，多学点东西总是没错的。&lt;/p&gt;
&lt;p&gt;大一下学期课程设计，写的是聊天工具，话说上学期上完基本还没什么概念，有点赶鸭子上架的味道，但是有压力才是有动力，你会发现自己潜力还是不错的。O(&amp;cap;_&amp;cap;)O~。下学期基本都在这敲敲打打中度过，学会了String的所有操作，大概熟悉了集合框架，多线程，图形界面，还有GUI的设计。话说最重要的是学到了怎么去查找信息，应用到问题的解决中。&lt;/p&gt;
&lt;p&gt;大一下学期最后到大二上学期期间，感觉应该可以做更多的事情了，然后开始学JSP。刚开始一个月，完全不知道这玩意儿到底是个神马东西，两本书，快一个月，一堆大大的笔记，全是代码。后来悟了，开始敲代码，发现Eclipse不好用，就用上了MyEclipse，呵呵，大三又换回了Eclipse。敲代码实现，记得第一个比较完善的程序是一个论坛，页面超级简陋的论坛，实现主体的所有功能，刚开始全是JSP页面，就是&amp;lt;%%&amp;gt;加一堆代码的那种，后来看到JavaBean，重构了一次，发现代码量骤减，后来看了EL，再次重构，又少了一大堆，再看到JSP标签部分，再次重构，&amp;lt;%%&amp;gt;已经很少了，后来JSTL，再次重构，彻底清理了&amp;lt;%%&amp;gt;。感觉学习是一个循序渐进的过程，而写代码，实在不断重构中实现的进步。话说那时候经常性死磕，中文乱码死磕了一个礼拜才搞出来，但是虽说苦了点，后来这个问题就不是问题了，还是值得的。&lt;/p&gt;
&lt;p&gt;大一下，五一的时候，同学拿了个彩铃的网站过来，说是从老师那拿到的项目，那时候一般般，本想拒了，但是同学接了却找不到人做，只能自己试试了，记得那时候刚看了点MVC，就用JSP+JavaBean+Servlet实现了，这期间大概一个多月不断写不断测和修改，又用了一个多月维护。主要用到socket编程，js，多线程，回头看看，代码十分简单，呵呵。貌似这两天查了下，网站还在线上，点了下，貌似还有几个BUG，囧，那时候拿到了四百块钱，这是第一次用代码换钱，请舍友到饭店改善了下伙食，买了两本书，基本没了。&lt;/p&gt;
&lt;p&gt;大二，开始学数据结构，用的是C++，大一学Java，让我怨念的就是这个。每一章都有实验课，这时候只能由模仿开始，学习C++，学习数据结构，相当于学了两样东西。我一直认为数据结构，算法和语言三者是最最基础的东西，所以相当上心，这时候实验课就没啥挑战了，基本能前几个交了，秒杀。大二下的数据结构课程设计，写的是计算器和Huffman文本压缩，计算器没有用传统的栈解决，用了递归，解析字符串，直接出结果。Huffman用C++，花了挺长时间的，貌似还被命中抽到上台将PPT，想起自己上台讲解的样子，挺搞。&lt;/p&gt;
&lt;p&gt;大二暑假，和同学合作参加了软件设计大赛，写一个局域网资源搜索引擎。负责XML处理和搜索部分。整整两个月，相当忙碌，也挺充实，早上自然醒，也不会太晚，醒了就开始写代码，然后午饭，下午继续写，傍晚夹本书，穿着大裤头，买个冷饮，晃晃悠悠晃到没有几个人的自习室【主要是有空调，宿舍电扇不给力呀】，边想着问题，看看书，写写解决方案，感觉差不多了再晃悠回宿舍，和同写的那个哥们讨论下，然后继续敲代码，敲到想睡为止，基本都是凌晨，貌似有一回快天亮才睡。想想那时候，太有激情了。充实，自由自在，没有烦恼。一直很佩服合作的那个哥们，逻辑性比我强了不是一点半点。那时候不知道有SVN这玩意儿，写代码接口啥的都是讨论下，他写他的，我写我的，然后最后再测，经常是&amp;ldquo;臆想&amp;rdquo;着就敲完了。那时候印象最深的是一个问题，搞不定，就一直想，查东西，吃饭时也在考虑，睡觉时还在考虑，然后第二天早上醒过来突然就想通了，这种感觉真奇妙。那段时间感觉自己编码能力提高很大吧，量变引起质变，写代码写多了，自然而然感觉&amp;ldquo;境界&amp;rdquo;提升了，思考的方式，看问题的角度，解决问题的方法都有很大的提高。暑假快结束，也是大赛快结束，写完代码才发现木有文档，坑爹的，花了三天草草弄了文档。问题就出在这，大赛只拿了个三等奖，后来补齐文档，重新整理，把项目拿到学院科技创新评比，也拿了三等，汗倒，最后拿了四百，项目组五个人，其实就我两干活。&lt;/p&gt;
&lt;p&gt;后来，队长进了银行，另一个去了北邮读研，和我合作的哥们去了中科院，我，工作，快了，过几天南下杭州。逝去的青春，牢记于心。&lt;/p&gt;
&lt;p&gt;大二大三是所有写程序最多的，多个课程设计同时上，忙呀。期间写了个学生选课系统【软院的绝对传统】，写了个基于Struts2的班级网站，然后是SSH的网上商城，写了个大的教务监控管理系统，一个lucene搜索，中间选修数据仓库和图形学，写了个算法模拟器，一个opengl迷宫。循序渐进，虽然有提高，但是感觉只是会用，而不会写。知其然而不知其所以然。不过，总是有历史局限性的嘛，那时候，还没有意识到那么多，只是不断地去学怎么用，而不会去思考为什么。&lt;/p&gt;
&lt;p&gt;大三下学期，面临着考研，考公务员还有找工作的抉择，家里的意思是让我自己选择，最终还是决定工作，从农村出来，一路走到这，想想，该承担一些责任了。有些东西，还不能享受，有些责任，已要承担。&lt;/p&gt;
&lt;p&gt;那时候有公司来招聘实习生，在不知情的情况下，和同学去笔试面试，呵呵，貌似当时来得挺多，开始了人生第一次笔试面试。忙碌了一段时间，定了下去向，决定到北京闯一闯。那段时间近一个多月，一直在学c,因为听说金融系统用的比较多，后来才发现没用上，但是毕竟学了。&lt;/p&gt;
&lt;p&gt;大三选修了现代软件开发和面向对象，还有几门偏向实用性质的选修课程。这时候开始接触&amp;ldquo;设计&amp;rdquo;，分层，设计模式，接口等等。&lt;/p&gt;
&lt;p&gt;大三已结束，立马赶到北京实习了，兴冲冲到了才发现，住的是六人一屋子的半地下室，想想，该锻炼下，也就忍了。刚开始没分项目组，一堆人9个全住一块，去拉网，去买厨具等等，都是学生，都很穷，但是日子还过得去。第一个月培训，木有工资，只管午饭。一个月培训主要是Java和J2ee的东西，天天上课，一天近七小时，那段时间，感觉只是对Java整体的一个查漏补缺，进步是有，但是不是很多。培训老师干了近十年，经验应该算是相当丰富，讲的内容大部分是快速应用，基本木有涉及原理，所以差不多是快餐，也算还行。印象深刻的是刚去那会，五点半起床，倒车，从北四环外到南三环，三趟公交车，直接挤死。八点半左右勉强到了，吃个早饭，然后上一整天课，后来才发现可以只倒两趟的，只是多走一站地，那时候上了车开始迷迷糊糊睡觉。&lt;/p&gt;
&lt;p&gt;培训完之后的一个月，算是比较轻松的吧，刚进项目组，也没什么事情，发现就我一个分去做Java了，其他人去做C，我一个人呆在五楼的一个项目组，项目后期运维，也没我什么事，另外一些人在一楼，天天做C的一些练习题。我可能性格使然，算是比较悲剧的，不怎么好过。因为刚开始不熟，自己话又比较少，而项目运维本身就没什么事让我干，老员工电话来了处理下问题，基本不会和我有什么交集，天天坐着，经理一天可能都不会跟我说句话【性格内向的人伤不起呀】，没我什么事，虽然交代下来的事情基本都能按时搞定，但是感觉到孤独呀。事实上经理人很不错，呵呵，那时候主要还是自己的问题。既然没事干，便开始看代码，从头开始，new了一个工程，仿照着开始搭项目框架，看文档，跟踪代码，画结构图，写写文档等等，快一个月，勉强搭出一个半成品。然后，就被另一个项目组借走了。&lt;/p&gt;
&lt;p&gt;第一个月实习公司，九百大洋。&lt;/p&gt;
&lt;p&gt;新的项目组是一个新的项目，写了一个多月文档，然后开始编码和测试，加了近四个月班，天天，一二四加班，三五六不加，但是正常上班，那时候只有周日，但基本用来睡觉了。有时候晚的时候加班到凌晨一两点。因为实习生工资是按工时算的，所以加班最多一个月拿到了一千六百五，哎。其实实习生干的活绝对和正式员工差不多，一个小组，两个正式员工，带着六个实习生。那时候加班直接加郁闷了，主要是累，回去就睡觉，还有就是太没营养，天天重复性劳动。我还算好，因为有那个月看代码，负责组件扩展，重构，公共代码部分，当然还有自己负责模块，工作量是两倍吧，但是主要是交替着来不会觉得枯燥，其他人基本重复着写东西，相当枯燥。&lt;/p&gt;
&lt;p&gt;最后在决定去留的时候还是选择离开，同去的实习生都走了，我一直坚持加班加到大年二十八，第二个省上完线才撤的，那时候整个五楼就我一个人，偶尔处理下bug，也没什么事，住的地方就我一个人了，感觉，挺凄凉。那段时间想的最多的是自己到底想要的是什么，是什么样的工作？最终还是没有想通，但是绝对不是目前的工作。所以决定离开。&lt;/p&gt;
&lt;p&gt;经理和组长对我还是十分不错的，走的时候谈话了，一下子加了一千五工资，让我留下好好干，后来还是决定离开，前阵听说经理和组长都升了一级。&lt;/p&gt;
&lt;p&gt;大四下，正月十几，我就又杀到北京了，目标很明确，找个工作，找个自己想要的工作。&lt;/p&gt;
&lt;p&gt;这期间整整一个月，到最后自己接受offer，一个月的时间，这辈子，永远忘不了。苦过，累过，烦躁过，痛苦过。在偌大的北京，跑来跑去，笔试面试，这一个月的经历，感觉比过去一整年的经历还多，最后逼到绝路，拒了所有offer，然后重头来过，重新开始找，逼着自己，要么找到自己想要的，要么滚蛋。呵呵，最后三面一直通过，找到了目前的工作，算是比较想做的一个工作。记得某天傍晚，看到宣讲通知，没吃晚饭便杀过去了，两个多小时车程，笔完，回来，一个人在寒风中等车，可谓饥寒交迫。还有一次，早上出发两钟头去笔试，笔完说过两天通知面试，坑爹的刚回来还么吃饭呢让我回去面试，草草吃了饭又杀回去面试，那天，花了八个钟头在车上。那段时间，瘦了二十来斤吧。&lt;/p&gt;
&lt;p&gt;到北京半年多，却没有去过一个地方游玩，基本都在加班，睡觉的循环中，找工作这一个月，压力太大，也没有出去，天天忙碌，早出晚归，基本见不到什么人，以至于刚面完那天下午，坐地铁半路下了车，到天安门广场沾沾人气，记得安检查我包的时候，一个笔，一瓶水，一个笔记本，一本书，那天等了两个多小时看完降旗，才慢慢悠悠晃回去。&lt;/p&gt;
&lt;p&gt;后来的后来，找到了工作，回了学校，却一直没有去想，没有去提这段时间。可能是回避吧，想喘口气，往昔不堪回首，这段时间，铭记了，但是却不轻易去想。所以回到学校，倍加珍惜学校的生活，因为，这样的日子不多了。慢悠悠晃去吃饭，偶尔上个自习，图书馆，散散步，跟同学胡吹海聊，这样的日子，好好珍惜，外面社会压力太大，这样的日子，不多了。&lt;/p&gt;
&lt;p&gt;现在是凌晨2:21，距离离校还有九天，想想还是写些东西，记录下吧。虽然自认为记忆力还行，几年内发生的事情基本都全部清楚地记录，但是，十几年后呢，几十年后呢。呵呵，想得远了。&lt;/p&gt;
&lt;p&gt;这四年，基本算是充实，也算是丰富吧，木有参加社团什么的，木有谈恋爱，这只能算是遗憾吧。大一大二天天上自习，大二大三疯狂代码，大四找工作，大学，结束了啊。&lt;/p&gt;
&lt;p&gt;虽有遗憾，不曾后悔。&lt;/p&gt;
&lt;p&gt;再看看未来吧，宿舍六人，一国家公务员，两省公务员，一保研，还有我和另一个哥们找工作，一个深圳一个杭州，从此天南地北，各奔东西了。&lt;/p&gt;
&lt;p&gt;未来，不敢说太远，今后五到十年，好好努力吧，好好奋斗&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 18 Jun 2011 00:00:00 +0800</pubDate><guid>tag:www.wklken.me,2011-06-18:posts/2011/06/18/summary-01-leaveschool.html</guid><category>总结，程序人生</category></item></channel></rss>